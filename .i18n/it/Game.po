#
#
# Federico Dal Pio Luogo <dalpio23@gmail.com>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Mon Apr 29 13:18:35 2024\n"
"PO-Revision-Date: 2024-12-03 12:15+0100\n"
"Last-Translator: Federico Dal Pio Luogo <dalpio23@gmail.com>\n"
"Language-Team: Italian <kde-i18n-doc@kde.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.5\n"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr "livello completato! üéâ"

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr "livello completato, ma ci sono dei warning... üé≠"

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr "goal intermedio risolto! üéâ"

#: Game.Levels.Tutorial.L01rfl
msgid "The rfl tactic"
msgstr "La tattica rfl"

#: Game.Levels.Tutorial.L01rfl
#, fuzzy
msgid ""
"## Summary\n"
"\n"
"`rfl` proves goals of the form `X = X`.\n"
"\n"
"In other words, the `rfl` tactic will close any goal of the\n"
"form `A = B` if `A` and `B` are *identical*.\n"
"\n"
"`rfl` is short for \\\"reflexivity (of equality)\\\".\n"
"\n"
"## Example:\n"
"\n"
"If the goal looks like this:\n"
"\n"
"```\n"
"x + 37 = x + 37\n"
"```\n"
"\n"
"then `rfl` will close it. But if it looks like `0 + x = x` then `rfl` won't work, because even\n"
"though $0+x$ and $x$ are always equal as *numbers*, they are not equal as *terms*.\n"
"The only term which is identical to `0 + x` is `0 + x`.\n"
"\n"
"## Details\n"
"\n"
"`rfl` is short for \\\"reflexivity of equality\\\".\n"
"\n"
"## Game Implementation\n"
"\n"
"*Note that our `rfl` is weaker than the version used in core Lean and `mathlib`,\n"
"for pedagogical purposes; mathematicians do not distinguish between propositional\n"
"and definitional equality because they think about definitions in a different way\n"
"to type theorists (`zero_add` and `add_zero` are both \\\"facts\\\" as far\n"
"as mathematicians are concerned, and who cares what the definition of addition is).*"
msgstr ""
"## Riassunto\n"
"\n"
"`rfl` dimostra obiettivi della forma `X = X`.\n"
"\n"
"Detto in altre parole, la tattica `rfl` chiuder√† qualsiasi goal della forma\n"
"forma `A = B` se `A` e `B` sono termini *identici*, ovvero sono scritti nello stesso modo.\n"
"\n"
"`rfl` √® l'abbreviazione di \"riflessivit√† (di uguaglianza)\".\n"
"\n"
"## Esempio:\n"
"\n"
"Se questo √® il goal:\n"
"\n"
"```\n"
"x + 37 = x + 37\n"
"```\n"
"\n"
"allora `rfl` lo chiuder√†. Ma su questo `0 + x = x` `rfl` non funzioner√†, perch√© sebbene $0+x$ e $x$ *rappresentino* lo stesso numero, non sono termini identici.\n"
"Perci√≤, l'unico termine identico a `0 + x` √® `0 + x`.\n"
"\n"
"## Nel dettaglio\n"
"\n"
"`rfl' √® l'abbreviazione di `\"reflexivity of equality\".\n"
"\n"
"## Note di implementazione\n"
"\n"
"*Per motivi didattici questo gioco usa una versione di `rfl` pi√π debole della versione di Lean e della sua libreria `mathlib`;\n"
"infatti nella matematica classica non vi √® distinzione tra uguaglianza proposizionale e\n"
"e uguaglianza denotazionale, questa distinzione √® rilevante solo nella teoria dei tipi.\n"
"(ad esempio, `zero_add` e `add_zero` sono entrambi dei \\\"fatti\\\" per quanto riguarda i matematici,\n"
"a loro non interessa quale sia la definizione precisa di addizione).*"

#: Game.Levels.Tutorial.L01rfl
msgid ""
"# Read this first\n"
"\n"
"Each level in this game involves proving a mathematical theorem (the \"Goal\").\n"
"The goal will be a statement about *numbers*. Some numbers in this game have known values.\n"
"Those numbers have names like $37$. Other numbers will be secret. They're called things\n"
"like $x$ and $q$. We know $x$ is a number, we just don't know which one.\n"
"\n"
"In this first level we're going to prove the theorem that $37x + q = 37x + q$.\n"
"You can see `x q : ‚Ñï` in the *Objects* below, which means that `x` and `q`\n"
"are numbers.\n"
"\n"
"We solve goals in Lean using *Tactics*, and the first tactic we're\n"
"going to learn is called `rfl`, which proves all theorems of the form $X = X$.\n"
"\n"
"Prove that $37x+q=37x+q$ by executing the `rfl` tactic."
msgstr ""
"# Leggi questo prima\n"
"\n"
"Ciascun livello di questo gioco consiste nel dimostrare un teorema matematico (il cosiddetto \"goal\").\n"
"Il goal √® tipicamente un'affermazione che riguarda dei numeri. Certi numeri avranno dei valori ben precisi,\n"
"come $37$. Altri numeri saranno invece dati come incognite, e queste verranno denotate con delle lettere quali $x$ o $q$.\n"
"Possiamo dire con certezza che $x$ √® un numero, ma non sappiamo quale!\n"
"\n"
"In questo primo livello dimostreremo il teorema $37x + q = 37x + q$.\n"
"Nella sezione *Oggetti* in basso puoi vedere `x q : ‚Ñï`, che significa che `x` e `q`\n"
"sono numeri naturali.\n"
"\n"
"Per risolvere i goal in Lean usiamo le *tattiche*. La prima tattica che vedremo si chiama `rfl`, che\n"
"dimostra tutti i goal della forma $X = X$.\n"
"\n"
"Adesso tocca a te! Dimostra $37x+q=37x+q$ eseguendo la tattica `rfl`."

#: Game.Levels.Tutorial.L01rfl
msgid "If $x$ and $q$ are arbitrary natural numbers, then $37x+q=37x+q.$"
msgstr "Se $x$ e $q$ sono numeri naturali qualsiasi, allora $37x+q=37x+q.$"

#: Game.Levels.Tutorial.L01rfl
msgid ""
"In order to use the tactic `rfl` you can enter it in the text box\n"
"under the goal and hit \"Execute\"."
msgstr ""
"Per utilizzare la tattica `rfl` digitala nella casella di testo\n"
"sotto il goal e premi \"Esegui\"."

#: Game.Levels.Tutorial.L01rfl
msgid ""
"Congratulations! You completed your first verified proof!\n"
"\n"
"Remember that `rfl` is a *tactic*. If you ever want information about the `rfl` tactic,\n"
"you can click on `rfl` in the list of tactics on the right.\n"
"\n"
"Now click on \"Next\" to learn about the `rw` tactic."
msgstr ""
"Congratulazioni! Hai completato la tua prima dimostrazione formale!\n"
"\n"
"Ricorda che `rfl` √® una *tattica*. Se vuoi sapere di pi√π sulla tattica `rfl`,\n"
"clicca su `rfl` nella lista di tattiche a destra.\n"
"\n"
"Adesso vedremo la tattica `rw`. Premi \"Avanti\"."

#: Game.Levels.Tutorial.L02rw
msgid "the rw tactic"
msgstr "la tattica rw"

#: Game.Levels.Tutorial.L02rw
msgid ""
"## Summary\n"
"\n"
"If `h` is a proof of an equality `X = Y`, then `rw [h]` will change\n"
"all `X`s in the goal to `Y`s. It's the way to \\\"substitute in\\\".\n"
"\n"
"## Variants\n"
"\n"
"* `rw [‚Üê h]` (changes `Y`s to `X`s; get the back arrow by typing `\\left ` or `\\l`.)\n"
"\n"
"* `rw [h1, h2]` (a sequence of rewrites)\n"
"\n"
"* `rw [h] at h2` (changes `X`s to `Y`s in hypothesis `h2`)\n"
"\n"
"* `rw [h] at h1 h2 ‚ä¢` (changes `X`s to `Y`s in two hypotheses and the goal;\n"
"get the `‚ä¢` symbol with `\\|-`.)\n"
"\n"
"* `repeat rw [add_zero]` will keep changing `? + 0` to `?`\n"
"until there are no more matches for `? + 0`.\n"
"\n"
"* `nth_rewrite 2 [h]` will change only the second `X` in the goal to `Y`.\n"
"\n"
"### Example:\n"
"\n"
"If you have the assumption `h : x = y + y` and your goal is\n"
"```\n"
"succ (x + 0) = succ (y + y)\n"
"```\n"
"\n"
"then\n"
"\n"
"`rw [add_zero]`\n"
"\n"
"will change the goal into `succ x = succ (y + y)`, and then\n"
"\n"
"`rw [h]`\n"
"\n"
"will change the goal into `succ (y + y) = succ (y + y)`, which\n"
"can be solved with `rfl`.\n"
"\n"
"### Example:\n"
"\n"
"You can use `rw` to change a hypothesis as well.\n"
"For example, if you have two hypotheses\n"
"```\n"
"h1 : x = y + 3\n"
"h2 : 2 * y = x\n"
"```\n"
"then `rw [h1] at h2` will turn `h2` into `h2 : 2 * y = y + 3`.\n"
"\n"
"## Common errors\n"
"\n"
"* You need the square brackets. `rw h` is never correct.\n"
"\n"
"* If `h` is not a *proof* of an *equality* (a statement of the form `A = B`),\n"
"for example if `h` is a function or an implication,\n"
"then `rw` is not the tactic you want to use. For example,\n"
"`rw [P = Q]` is never correct: `P = Q` is the theorem *statement*,\n"
"not the proof. If `h : P = Q` is the proof, then `rw [h]` will work.\n"
"\n"
"## Details\n"
"\n"
"The `rw` tactic is a way to do \\\"substituting in\\\". There\n"
"are two distinct situations where you can use this tactic.\n"
"\n"
"1) Basic usage: if `h : A = B` is an assumption or\n"
"the proof of a theorem, and if the goal contains one or more `A`s, then `rw [h]`\n"
"will change them all to `B`'s. The tactic will error\n"
"if there are no `A`s in the goal.\n"
"\n"
"2) Advanced usage: Assumptions coming from theorem proofs\n"
"often have missing pieces. For example `add_zero`\n"
"is a proof that `? + 0 = ?` because `add_zero` really is a function,\n"
"and `?` is the input. In this situation `rw` will look through the goal\n"
"for any subterm of the form `x + 0`, and the moment it\n"
"finds one it fixes `?` to be `x` then changes all `x + 0`s to `x`s.\n"
"\n"
"Exercise: think about why `rw [add_zero]` changes the term\n"
"`(0 + 0) + (x + 0) + (0 + 0) + (x + 0)` to\n"
"`0 + (x + 0) + 0 + (x + 0)`\n"
"\n"
"If you can't remember the name of the proof of an equality, look it up in\n"
"the list of lemmas on the right.\n"
"\n"
"## Targetted usage\n"
"\n"
"If your goal is `b + c + a = b + (a + c)` and you want to rewrite `a + c`\n"
"to `c + a`, then `rw [add_comm]` will not work because Lean finds another\n"
"addition first and swaps those inputs instead. Use `rw [add_comm a c]` to\n"
"guarantee that Lean rewrites `a + c` to `c + a`. This works because\n"
"`add_comm` is a proof that `?1 + ?2 = ?2 + ?1`, `add_comm a` is a proof\n"
"that `a + ? = ? + a`, and `add_comm a c` is a proof that `a + c = c + a`.\n"
"\n"
"If `h : X = Y` then `rw [h]` will turn all `X`s into `Y`s.\n"
"If you only want to change the 37th occurrence of `X`\n"
"to `Y` then do `nth_rewrite 37 [h]`."
msgstr ""
"## Descrizione\n"
"\n"
"Se `h` √® una prova dell'uguaglianza `X = Y`, allora `rw [h]` scriver√†\n"
"`Y` al posto di ogni `X` nel goal. `rw` svolge l'operazione di \\\"sostituzione\\\".\n"
"\n"
"## Varianti di `rw`\n"
"\n"
"* `rw [‚Üê h]` (riscrive le `Y` con `X`; per avere la freccetta all'indietro si digita `\\left ` oppure `\\l`.)\n"
"\n"
"* `rw [h1, h2]` (sostituzioni in sequenza)\n"
"\n"
"* `rw [h] at h2` (riscrive le `X` in `Y` nell'ipotesi `h2`)\n"
"\n"
"* `rw [h] at h1 h2 ‚ä¢` (riscrive le `X` in `Y` in due ipotesi e nel goal;\n"
"per avere il simbolo `‚ä¢` digita `\\|-`.)\n"
"\n"
"* `repeat rw [add_zero]` riscriver√† continuamente `? + 0` in `?`\n"
"finch√© non riesce pi√π a trovare espressioni della forma `? + 0`.\n"
"\n"
"* `nth_rewrite 2 [h]` riscriver√† solo la seconda `X` nel goal in `Y`.\n"
"\n"
"### Esempio:\n"
"\n"
"Se hai l'ipotesi `h : x = y + y` e il goal √®\n"
"```\n"
"succ (x + 0) = succ (y + y)\n"
"```\n"
"\n"
"allora il comando\n"
"\n"
"`rw [add_zero]`\n"
"\n"
"riscriver√† il goal in `succ x = succ (y + y)`, e poi il comando\n"
"\n"
"`rw [h]`\n"
"\n"
"riscriver√† il goal in `succ (y + y) = succ (y + y)`, il quale\n"
"pu√≤ essere risolto con `rfl`.\n"
"\n"
"### Esempio:\n"
"\n"
"`rw` pu√≤ anche riscrivere nelle ipotesi.\n"
"Ad esempio, se hai le seguenti due ipotesi:\n"
"```\n"
"h1 : x = y + 3\n"
"h2 : 2 * y = x\n"
"```\n"
"eseguendo `rw [h1] at h2` sostituir√† la `x` dentro `h2`, che diventer√† `h2 : 2 * y = y + 3`.\n"
"\n"
"## Errori comuni\n"
"\n"
"* `rw` accetta una lista di teoremi, dunque le parentesi quadre sono sempre da mettere. Scrivere `rw h` √® un errore di sintassi.\n"
"\n"
"* Inoltre, gli argomenti che passi a `rw` devono essere *prove* di *uguaglianza*, dunque dei teoremi che hai dimostrato in precedenza e che hanno la forma`A = B`).\n"
"Scrivere `rw [P = Q]` √® sbagliato: `P = Q` √® solo l'*affermazione* dell'uguaglianza,\n"
"non la sua dimostrazione. Se invece hai `h : P = Q` nel contesto, `h` √® una dimostrazione di `P = Q` e allora potrai scrivere `rw [h]`.\n"
"\n"
"## Dettagli\n"
"\n"
"`rw` √® la tattica che svolge la \\\"sostituzione\\\". Ci sono due casi in cui pu√≤\n"
"essere usata:\n"
"\n"
"1) Uso basilare: se `h : A = B` √® un'ipotesi del contesto\n"
"oppure la dimostrazione di un teorema, e se il goal contiene una o pi√π `A`, allora `rw [h]`\n"
"le sostituir√† tutte con `B`. La tattica dar√† un errore\n"
"se non ci sono `A` nel goal.\n"
"\n"
"2) Uso avanzato: certi teoremi hanno delle incognite.\n"
" Ad esempio, `add_zero`\n"
"pu√≤ essere trattato come un funzione il cui corpo √® `? + 0 = ?`\n"
"dove `?` √® l'input. Applicando `rw` a `add_zero`, `rw` cercher√† all'interno del goal\n"
"un termine della forma `x + 0`; appena lo trova\n"
"fissa l'incognita `?` a `x` e cambier√† tutte le occorrenze di `x + 0` a `x`.\n"
"\n"
"Esercizio: prova a spiegare perch√© `rw [add_zero]` trasforma il termine\n"
"`(0 + 0) + (x + 0) + (0 + 0) + (x + 0)` in\n"
"`0 + (x + 0) + 0 + (x + 0)`\n"
"\n"
"Se non ti ricordi il nome di una dimostrazione di un'uguaglianza, puoi cercarlo\n"
"nell'elenco di lemma sulla destra.\n"
"\n"
"## Uso mirato\n"
"\n"
"Se nel goal hai `b + c + a = b + (a + c)` e vuoi riscrivere solo il termine `a + c`\n"
"a `c + a`, invocare semplicemente `rw [add_comm]` non dar√† il risultato che ti aspetti perch√© Lean\n"
"applica il teorema sulla prima espressione che ha un match con un'addizione. Puoi usare `rw [add_comm a c]` per\n"
"far s√¨ che Lean riscriva `a + c` a `c + a`. In questo modo stai fissando le incognite del teorema:\n"
"`add_comm` √® la prova di `?1 + ?2 = ?2 + ?1`, `add_comm a` √® la prova\n"
"di `a + ? = ? + a`, e infine `add_comm a c` √® la prova di `a + c = c + a`.\n"
"\n"
"Data la dimostrazione `h : X = Y`, `rw [h]` riscriver√† tutte le `X` a `Y` nel goal.\n"
"Per cambiare solo la trentasettesima occorrenza di `X`\n"
"a `Y`, il metodo giusto √® `nth_rewrite 37 [h]`."

#: Game.Levels.Tutorial.L02rw
msgid ""
"## Summary\n"
"\n"
"`repeat t` repeatedly applies the tactic `t`\n"
"to the goal. You don't need to use this\n"
"tactic, it just speeds things up sometimes.\n"
"\n"
"## Example\n"
"\n"
"`repeat rw [add_zero]` will turn the goal\n"
"`a + 0 + (0 + (0 + 0)) = b + 0 + 0`\n"
"into the goal\n"
"`a = b`.\n"
"\"\n"
"\n"
"TacticDoc nth_rewrite \"\n"
"## Summary\n"
"\n"
"If `h : X = Y` and there are several `X`s in the goal, then\n"
"`nth_rewrite 3 [h]` will just change the third `X` to a `Y`.\n"
"\n"
"## Example\n"
"\n"
"If the goal is `2 + 2 = 4` then `nth_rewrite 2 [two_eq_succ_one]`\n"
"will change the goal to `2 + succ 1 = 4`. In contrast, `rw [two_eq_succ_one]`\n"
"will change the goal to `succ 1 + succ 1 = 4`."
msgstr ""
"## Descrizione\n"
"\n"
"`repeat t` applica la tattica `t`\n"
"nel goal ripetitivamente. Non √® necessario usare questa tattica\n"
"per completare il gioco, ma a volte √® utile nel rendere le dimostrazioni pi√π succinte.\n"
"\n"
"## Esempio\n"
"\n"
"`repeat rw [add_zero]` trasformer√† il goal\n"
"`a + 0 + (0 + (0 + 0)) = b + 0 + 0`\n"
"nel nuovo goal\n"
"`a = b`.\n"
"\"\n"
"\n"
"TacticDoc nth_rewrite \"\n"
"## Descrizione\n"
"\n"
"Se hai `h : X = Y` e ci sono diverse `X` nel goal, allora\n"
"`nth_rewrite 3 [h]` sostituir√† solo la terza `X` in `Y`.\n"
"\n"
"## Esempio\n"
"\n"
"Se nel goal hai `2 + 2 = 4` allora con `nth_rewrite 2 [two_eq_succ_one]`\n"
"sostituisce la seconda occorrenza del lato sinistro di `two_eq_succ_one`, e il goal diventa `2 + succ 1 = 4`. Invece il normale `rw [two_eq_succ_one]`\n"
"sostituira la prima occorrenza di `2` nel goal, che diventa `succ 1 + succ 1 = 4`."

#: Game.Levels.Tutorial.L02rw
msgid ""
"## Summary\n"
"\n"
"If `h : X = Y` and there are several `X`s in the goal, then\n"
"`nth_rewrite 3 [h]` will just change the third `X` to a `Y`.\n"
"\n"
"## Example\n"
"\n"
"If the goal is `2 + 2 = 4` then `nth_rewrite 2 [two_eq_succ_one]`\n"
"will change the goal to `2 + succ 1 = 4`. In contrast, `rw [two_eq_succ_one]`\n"
"will change the goal to `succ 1 + succ 1 = 4`."
msgstr ""
"## Descrizione\n"
"\n"
"Se hai `h : X = Y` e nel goal ci sono diverse `X`, con\n"
"`nth_rewrite 3 [h]` puoi cambiare solo la terza `X` in `Y`.\n"
"\n"
"## Esempio\n"
"\n"
"Se il goal √® `2 + 2 = 4` allora `nth_rewrite 2 [two_eq_succ_one]`\n"
"sostituir√† la seconda occorrenza di `2`, e il goal diventer√† `2 + succ 1 = 4`. Invece, il semplice `rw [two_eq_succ_one]`\n"
"sostituir√† tutte le occorrenze di `2` e il goal diventer√† `succ 1 + succ 1 = 4`."

#: Game.Levels.Tutorial.L02rw
msgid ""
"In this level the *goal* is $2y=2(x+7)$ but to help us we\n"
"have an *assumption* `h` saying that $y = x + 7$. Check that you can see `h` in\n"
"your list of assumptions. Lean thinks of `h` as being a secret proof of the\n"
"assumption, rather like `x` is a secret number.\n"
"\n"
"Before we can use `rfl`, we have to \"substitute in for $y$\".\n"
"We do this in Lean by *rewriting* the proof `h`,\n"
"using the `rw` tactic."
msgstr ""
"In questo livello il *goal* √® $2y=2(x+7)$ e l'unica informazione che\n"
"pu√≤ aiutarci a dimostrarlo √® l'*ipotesi* `h` che dice $y = x + 7$. Verifica di avere `h` sotto la voce \"Ipotesi\".\n"
"Lean vede `h` come una dimostrazione segreta dell'ipotesi,\n"
"un po' come il valore della variabile `x` √® un'incognita.\n"
"\n"
"Prima di poter usare la tattica `rfl`, dobbiamo \"sostituire per la variabile $y$\".\n"
"In Lean possiamo *riscrivere* la dimostrazione `h`\n"
"attraverso la tattica `rw`."

#: Game.Levels.Tutorial.L02rw
msgid "If $x$ and $y$ are natural numbers, and $y = x + 7$, then $2y = 2(x + 7)$."
msgstr "Se $x$ e $y$ sono numeri naturali, e $y = x + 7$, allora $2y = 2(x + 7)$."

#: Game.Levels.Tutorial.L02rw
msgid "First execute `rw [h]` to replace the `y` with `x + 7`."
msgstr "Innanzitutto, esegui `rw [h]` per sostituire `y` con `x + 7`."

#: Game.Levels.Tutorial.L02rw
msgid "Can you take it from here? Click on \"Show more help!\" if you need a hint."
msgstr "Riesci a finire la dimostrazione da solo? Clicca su \"Aiutami!\" se hai bisogno di un indizio."

#: Game.Levels.Tutorial.L02rw
msgid "Now `rfl` will work."
msgstr "Adesso `rfl` funzioner√†."

#: Game.Levels.Tutorial.L02rw
msgid "You now know enough tactics to prove `2 + 2 = 4`! Let's begin the journey."
msgstr "Ora conosci abbastanza tattiche per dimostrare `2 + 2 = 4`! Proseguiamo l'avventura."

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "Numbers"
msgstr "Numeri"

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid ""
"`‚Ñï` is the natural numbers, just called \\\"numbers\\\" in this game. It's\n"
"defined via two rules:\n"
"\n"
"* `0 : ‚Ñï` (zero is a number)\n"
"* `succ (n : ‚Ñï) : ‚Ñï` (the successor of a number is a number)\n"
"\n"
"## Game Implementation\n"
"\n"
"*The game uses its own copy of the natural numbers, called `MyNat` with notation `‚Ñï`.\n"
"It is distinct from the Lean natural numbers `Nat`, which should hopefully\n"
"never leak into the natural number game.*"
msgstr ""
"`‚Ñï` denota l'insieme dei numeri naturali, che chiameremo semplicemente \\\"numeri \\\" nel resto del gioco. Questo insieme √®\n"
"definito tramite due regole:\n"
"\n"
"* `0 : ‚Ñï` (zero √® un numero)\n"
"* `succ (n: ‚Ñï): ‚Ñï` (il successore di un numero √® un numero)\n"
"\n"
"## Implementazione del gioco \n"
"\n"
"*Il gioco usa una versione propria dei numeri naturali - chiamata `Mynat` con notazione` ‚Ñï` -\n"
"diversa dal tipo primitivo dei numeri naturali di Lean `Nat`; quest'ultimo\n"
"non dovrebbe venire utilizzato nel contesto del gioco.*"

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "`one_eq_succ_zero` is a proof of `1 = succ 0`.\""
msgstr "`one_eq_succ_zero` √® la dimostrazione di `1 = succ 0`.\""

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "`two_eq_succ_one` is a proof of `2 = succ 1`."
msgstr "`two_eq_succ_one` √® la dimostrazione di `2 = succ 1`."

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "`three_eq_succ_two` is a proof of `3 = succ 2`."
msgstr "`three_eq_succ_two` √® la dimostrazione di `3 = succ 2`."

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "`four_eq_succ_three` is a proof of `4 = succ 3`."
msgstr "`four_eq_succ_three` √® la dimostrazione di `4 = succ 3`."

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid ""
"## The birth of number.\n"
"\n"
"Numbers in Lean are defined by two rules.\n"
"\n"
"* `0` is a number.\n"
"* If `n` is a number, then the *successor* `succ n` of `n` is a number.\n"
"\n"
"The successor of `n` means the number after `n`. Let's learn to\n"
"count, and name a few small numbers.\n"
"\n"
"## Counting to four.\n"
"\n"
"`0` is a number, so `succ 0` is a number. Let's call this new number `1`.\n"
"Similarly let's define `2 = succ 1`, `3 = succ 2` and `4 = succ 3`.\n"
"This gives us plenty of numbers to be getting along with.\n"
"\n"
"The *proof* that `2 = succ 1` is called `two_eq_succ_one`.\n"
"Check out the \"012\" tab in the list of lemmas on the right\n"
"for this and other proofs.\n"
"\n"
"Let's prove that $2$ is the number after the number after zero."
msgstr ""
"## La nascita dei numeri\n"
"\n"
"I numeri in Lean sono definiti da due regole:\n"
"\n"
"* `0` √® un numero.\n"
"* Se `n` √® un numero, allora il *successore* `succ n` di `n` √® un numero.\n"
"\n"
"Il successore di `n` √® il numero che viene dopo `n`. Impariamo a contare in questo sistema,\n"
"provando a scrivere alcuni numeri piccoli.\n"
"\n"
"## Contiamo fino a quattro\n"
"\n"
"`0` √® un numero, e `succ 0` √® un numero. Diamo a quest'ultimo numero il nome `1`.\n"
"In modo simile, definiamo `2 = succ 1`, `3 = succ 2` e `4 = succ 3`.\n"
"Questi primi quattro numeri sono pi√π che sufficienti per proseguire il nostro ragionamento.\n"
"\n"
"La *dimostrazione* di `2 = succ 1` si chiama `two_eq_succ_one`.\n"
"Puoi trovarla cliccando sul tab \"012\" nella lista di lemmi a destra nell'interfaccia,\n"
"dove vedrai lei e altre dimostrazioni.\n"
"\n"
"Ora dimostriamo che $2$ √® il numero che viene dopo il numero che viene dopo zero."

#: Game.Levels.Tutorial.L03two_eq_ss0 Game.Levels.Tutorial.L04rw_backwards
msgid "$2$ is the number after the number after $0$."
msgstr "$2$ √® il numero che viene dopo il numero che viene dopo $0$."

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "Start with `rw [two_eq_succ_one]` to begin to break `2` down into its definition."
msgstr "Inizia eseguendo `rw [two_eq_succ_one]` per sostituire `2` con la sua definizione."

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "Can you take it from here?"
msgstr "Sai proseguire da solo?"

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "Next turn `1` into `succ 0` with `rw [one_eq_succ_zero]`."
msgstr "Adesso rendi `1` in uno `succ 0` con `rw [one_eq_succ_zero]`."

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid "Now finish the job with `rfl`."
msgstr "Concludi la dimostrazione con `rfl`."

#: Game.Levels.Tutorial.L03two_eq_ss0
msgid ""
"Note that you can do `rw [two_eq_succ_one, one_eq_succ_zero]`\n"
"and then `rfl` to solve this level in two lines."
msgstr ""
"Puoi anche fare `rw [two_eq_succ_one, one_eq_succ_zero]`\n"
"e poi `rfl` per risolvere questo livello in due sole righe."

#: Game.Levels.Tutorial.L04rw_backwards
msgid "rewriting backwards"
msgstr "riscrivere all'indietro"

#: Game.Levels.Tutorial.L04rw_backwards
msgid ""
"If `h` is a proof of `X = Y` then `rw [h]` will\n"
"turn `X`s into `Y`s. But what if we want to\n"
"turn `Y`s into `X`s? To tell the `rw` tactic\n"
"we want this, we use a left arrow `‚Üê`. Type\n"
"`\\l` and then hit the space bar to get this arrow.\n"
"\n"
"Let's prove that $2$ is the number after the number\n"
"after $0$ again, this time by changing `succ (succ 0)`\n"
"into `2`."
msgstr ""
"Se `h` √® una prova di `X = Y` allora `rw [h]` riscriver√†\n"
"le `X` in `Y`. E se volessimo invece riscrive\n"
"le `Y` in `X`? Per dire alla tattica `rw` che vogliamo\n"
"riscrivere nell'altro verso, usiamo una freccetta a sinistra `‚Üê`. Per ottenere questa freccetta, digita\n"
"`\\l` e premi la barra spaziatrice.\n"
"\n"
"Dimostriamo che $2$ √® il numero che viene dopo il numero che viene dopo\n"
"$0$ di nuovo, per√≤ questa volta procediamo nel senso opposto, trasformando `succ (succ 0)`\n"
"in `2`."

#: Game.Levels.Tutorial.L04rw_backwards
msgid "Try `rw [‚Üê one_eq_succ_zero]` to change `succ 0` into `1`."
msgstr "Scrivi `rw [‚Üê one_eq_succ_zero]` per trasformare `succ 0` in `1`."

#: Game.Levels.Tutorial.L04rw_backwards
msgid "Can you now change the goal into `2 = 2`?"
msgstr "Puoi trasformare il goal in `2 = 2`?"

#: Game.Levels.Tutorial.L04rw_backwards
msgid "Now `rw [‚Üê two_eq_succ_one]` will change `succ 1` into `2`."
msgstr "Ora con `rw [‚Üê two_eq_succ_one]` `succ 1` diventa `2`."

#: Game.Levels.Tutorial.L04rw_backwards
msgid ""
"Why did we not just define `succ n` to be `n + 1`? Because we have not\n"
"even *defined* addition yet! We'll do that in the next level."
msgstr ""
"Come mai non abbiamo definito `succ n` semplicemente come `n + 1`? Perch√© non abbiamo\n"
"ancora *definito* il concetto di addizione! Provvederemo nel prossimo livello."

#: Game.Levels.Tutorial.L05add_zero
msgid "Adding zero"
msgstr "Sommare zero"

#: Game.Levels.Tutorial.L05add_zero
msgid ""
"`Add a b`, with notation `a + b`, is\n"
"the usual sum of natural numbers. Internally it is defined\n"
"via the following two hypotheses:\n"
"\n"
"* `add_zero a : a + 0 = a`\n"
"\n"
"* `add_succ a b : a + succ b = succ (a + b)`\n"
"\n"
"Other theorems about naturals, such as `zero_add a : 0 + a = a`, are proved\n"
"by induction using these two basic theorems.\""
msgstr ""
"`Add a b`, con la notazione `a + b`, √®\n"
"l'operazione di addizione sui numeri naturali. Dentro Lean √® definita\n"
"tramite due ipotesi:\n"
"\n"
"* `add_zero a : a + 0 = a`\n"
"\n"
"* `add_succ a b : a + succ b = succ (a + b)`\n"
"\n"
"Gli altri teoremi sui numeri naturali e l'addizione, come `zero_add a : 0 + a = a`, si dimostrano\n"
"per induzione usando questi due teoremi fondamentali.\""

#: Game.Levels.Tutorial.L05add_zero
msgid ""
"`add_zero a` is a proof that `a + 0 = a`.\n"
"\n"
"## Summary\n"
"\n"
"`add_zero` is really a function, which\n"
"eats a number, and returns a proof of a theorem\n"
"about that number. For example `add_zero 37` is\n"
"a proof that `37 + 0 = 37`.\n"
"\n"
"The `rw` tactic will accept `rw [add_zero]`\n"
"and will try to figure out which number you omitted\n"
"to input.\n"
"\n"
"## Details\n"
"\n"
"A mathematician sometimes thinks of `add_zero`\n"
"as \\\"one thing\\\", namely a proof of $\\forall n ‚àà ‚Ñï, n + 0 = n$.\n"
"This is just another way of saying that it's a function which\n"
"can eat any number n and will return a proof that `n + 0 = n`."
msgstr ""
"`add_zero a` √® una prova della proposizione `a + 0 = a`.\n"
"\n"
"## Descrizione\n"
"\n"
"`add_zero` in realt√† √® una funzione, che\n"
"prende un numero, e restituisce una dimostrazione di un teorema\n"
"che riguarda proprio quel numero. Ad esempio `add_zero 37` √®\n"
"una dimostrazione che `37 + 0 = 37`.\n"
"\n"
"La tattica `rw`, se usata come in `rw [add_zero]`,\n"
"tenter√† di capire da sola quale sia il numero da passare a `add_zero`.\n"
"\n"
"\n"
"## Dettagli\n"
"\n"
"Ai matematici piace pensare a `add_zero`\n"
"come un'\\\"unica cosa\\\", ossia la dimostrazione che $\\forall n ‚àà ‚Ñï, n + 0 = n$.\n"
"Questa √® un'altra notazione per dire che √® una funzione che\n"
"prende un qualsiasi numero n e restituisce una dimostrazione che `n + 0 = n`."

#: Game.Levels.Tutorial.L05add_zero
msgid ""
"## Summary\n"
"\n"
"`repeat t` repeatedly applies the tactic `t`\n"
"to the goal. You don't need to use this\n"
"tactic, it just speeds things up sometimes.\n"
"\n"
"## Example\n"
"\n"
"`repeat rw [add_zero]` will turn the goal\n"
"`a + 0 + (0 + (0 + 0)) = b + 0 + 0`\n"
"into the goal\n"
"`a = b`."
msgstr ""
"## Descrizione\n"
"\n"
"`repeat t` applica la tattica `t`\n"
"nel goal ripetitivamente. Non √® strettamente necessaria al fine di\n"
"completare il gioco, ma a volte √® utile per velocizzare le dimostrazioni.\n"
"\n"
"## Esempio\n"
"\n"
"`repeat rw [add_zero]` trasformer√† il goal\n"
"`a + 0 + (0 + (0 + 0)) = b + 0 + 0`\n"
"nel nuovo goal\n"
"`a = b`."

#: Game.Levels.Tutorial.L05add_zero
msgid ""
"We'd like to prove `2 + 2 = 4` but right now\n"
"we can't even *state* it\n"
"because we haven't yet defined addition.\n"
"\n"
"## Defining addition.\n"
"\n"
"How are we going to add $37$ to an arbitrary number $x$? Well,\n"
"there are only two ways to make numbers in this game: $0$\n"
"and successors. So to define `37 + x` we will need\n"
"to know what `37 + 0` is and what `37 + succ x` is.\n"
"Let's start with adding `0`.\n"
"\n"
"### Adding 0\n"
"\n"
"To make addition agree with our intuition, we should *define* `37 + 0`\n"
"to be `37`. More generally, we should define `a + 0` to be `a` for\n"
"any number `a`. The name of this proof in Lean is `add_zero a`.\n"
"For example `add_zero 37` is a proof of `37 + 0 = 37`,\n"
"`add_zero x` is a proof of `x + 0 = x`, and `add_zero` is a proof\n"
"of `? + 0 = ?`.\n"
"\n"
"We write `add_zero x : x + 0 = x`, so `proof : statement`."
msgstr ""
"Il nostro obiettivo √® dimostrare `2 + 2 = 4`, ma per ora non\n"
"possiamo nemmeno *enunciarlo*\n"
"dato che non abbiamo ancora definito l'addizione.\n"
"\n"
"## Definiamo l'addizione\n"
"\n"
"Come possiamo sommare $37$ a un numero arbitrario $x$? Beh,\n"
"questo numero arbitrario pu√≤ essere stato creato in due modi: o $0$\n"
"o il successore. Dunque per definire `37 + x` abbiamo bisogno\n"
"di sapere quanto fa `37 + 0` e quanto fa `37 + succ x`.\n"
"Partiamo dall'aggiungere `0` a qualcosa.\n"
"\n"
"### Aggiungere zero\n"
"\n"
"Per far s√¨ che l'addizione rispetti la nostra intuizione, *definiamo* `37 + 0`\n"
"come `37`. In generale, definiamo `a + 0` uguale ad `a` per\n"
"qualsiasi numero `a`. Questa dimostrazione in Lean si chiama `add_zero a`.\n"
"Ad esempio `add_zero 37` √® la dimostrazione di `37 + 0 = 37`,\n"
"`add_zero x` √® la dimostrazione di `x + 0 = x`, `add_zero` da solo √® la dimostrazione\n"
"di `? + 0 = ?`.\n"
"\n"
"La sintassi √® `add_zero x : x + 0 = x`, dunque `dimostrazione : enunciato`."

#: Game.Levels.Tutorial.L05add_zero Game.Levels.Tutorial.L06add_zero2
msgid "$a+(b+0)+(c+0)=a+b+c.$"
msgstr "$a+(b+0)+(c+0)=a+b+c.$"

#: Game.Levels.Tutorial.L05add_zero
msgid "`rw [add_zero]` will change `b + 0` into `b`."
msgstr "`rw [add_zero]` trasformer√† `b + 0` in `b`."

#: Game.Levels.Tutorial.L05add_zero
msgid "Now `rw [add_zero]` will change `c + 0` into `c`."
msgstr "Ora `rw [add_zero]` trasformer√† `c + 0` in `c`."

#: Game.Levels.Tutorial.L05add_zero
msgid ""
"Those of you interested in speedrunning the game may want to know\n"
"that `repeat rw [add_zero]` will do both rewrites at once."
msgstr ""
"Se sei interessato a fare lo speedrun del gioco, sappi\n"
"che `repeat rw [add_zero]` esegue entrambe le sostituzioni in un'unica mossa."

#: Game.Levels.Tutorial.L06add_zero2
msgid "Precision rewriting"
msgstr "Rewriting mirato"

#: Game.Levels.Tutorial.L06add_zero2
msgid ""
"## Precision rewriting\n"
"\n"
"In the last level, there was `b + 0` and `c + 0`,\n"
"and `rw [add_zero]` changed the first one it saw,\n"
"which was `b + 0`. Let's learn how to tell Lean\n"
"to change `c + 0` first by giving `add_zero` an\n"
"explicit input."
msgstr ""
"## Rewriting mirato\n"
"\n"
"Nell'ultimo livello vi erano sia `b + 0` che `c + 0` da riscrivere,\n"
"e `rw [add_zero]` ha scelto il primo che ha trovato,\n"
"ossia `b + 0`. Impariamo come dire a Lean\n"
"di riscrivere `c + 0` per primo dando ad `add_zero` un\n"
"input esplicito."

#: Game.Levels.Tutorial.L06add_zero2
msgid "Try `rw [add_zero c]`."
msgstr "Esegui `rw [add_zero c]`."

#: Game.Levels.Tutorial.L06add_zero2
msgid ""
"`add_zero c` is a proof of `c + 0 = c` so that was what got rewritten.\n"
"You can now change `b + 0` to `b` with `rw [add_zero]` or `rw [add_zero b]`. You\n"
"can usually stick to `rw [add_zero]` unless you need real precision."
msgstr ""
"`add_zero c` √® la dimostrazione di `c + 0 = c`, proprio quello che √® stato riscritto.\n"
"Ora puoi scambiare `b + 0` con `b` scrivendo `rw [add_zero]` o `rw [add_zero b]`. Nella pratica, usa\n"
"`rw [add_zero]` quando non hai bisogno di precisare il termine da sostituire."

#: Game.Levels.Tutorial.L06add_zero2
msgid "Let's now learn about Peano's second axiom for addition, `add_succ`."
msgstr "Vediamo adesso il secondo assioma di Peano sull'addizione, `add_succ`."

#: Game.Levels.Tutorial.L07add_succ
msgid "add_succ"
msgstr "add_succ"

#: Game.Levels.Tutorial.L07add_succ
msgid "`add_succ a b` is the proof of `a + succ b = succ (a + b)`."
msgstr "`add_succ a b` √® la dimostrazione di `a + succ b = succ (a + b)`."

#: Game.Levels.Tutorial.L07add_succ
msgid "`succ_eq_add_one n` is the proof that `succ n = n + 1`."
msgstr "`succ_eq_add_one n` √® la dimostrazione di `succ n = n + 1`."

#: Game.Levels.Tutorial.L07add_succ
msgid ""
"Every number in Lean is either $0$ or a successor. We know how to add $0$,\n"
"but we need to figure out how to add successors. Let's say we already know\n"
"that `37 + d = q`. What should the answer to `37 + succ d` be? Well,\n"
"`succ d` is one bigger than `d`, so `37 + succ d` should be `succ q`,\n"
"the number one bigger than `q`. More generally `x + succ d` should\n"
"be `succ (x + d)`. Let's add this as a lemma.\n"
"\n"
"* `add_succ x d : x + succ d = succ (x + d)`\n"
"\n"
"If you ever see `... + succ ...` in your goal, `rw [add_succ]` is\n"
"normally a good idea.\n"
"\n"
"Let's now prove that `succ n = n + 1`. Figure out how to get `+ succ` into\n"
"the picture, and then `rw [add_succ]`. Switch between the `+` (addition) and\n"
"`012` (numerals) tabs under \"Theorems\" on the right to\n"
"see which proofs you can rewrite."
msgstr ""
"Ogni numero in Lean √® $0$ oppure il successore di un altro numero. Abbiamo gi√† visto come aggiungere $0$,\n"
"e ci rimane da capire come aggiungere un successore. Ipotizziamo di sapere\n"
"che vale l'uguaglianza `37 + d = q`. A cosa dovrebbe essere uguale `37 + succ d`? Beh,\n"
"`succ d` √® un'unit√† pi√π grande di `d`, quindi `37 + succ d` dovrebbe essere `succ q`,\n"
"ossia un'unit√† pi√π grande di `q`. In generale `x + succ d` dovrebbe\n"
"dare `succ (x + d)`. Formalizziamo questo ragionamento in un lemma.\n"
"\n"
"* `add_succ x d : x + succ d = succ (x + d)`\n"
"\n"
"Quando vedi `... + succ ...` nel goal, eseguire `rw [add_succ]` √® una\n"
"buona idea.\n"
"\n"
"Dimostriamo ora che `succ n = n + 1`. Cerca di introdurre un `+ succ` nel\n"
"goal, poi esegui `rw [add_succ]`. Controlla entrambi i tab `+` (addizione) e\n"
"`012` (numeri) nella sezione \"Teoremi\" a destra\n"
"per vedere quali teoremi da riscrivere hai a disposizione."

#: Game.Levels.Tutorial.L07add_succ
msgid "For all natural numbers $a$, we have $\\operatorname{succ}(a) = a+1$."
msgstr "Per ogni numero naturale $a$, si ha che $\\operatorname{succ}(a) = a+1$."

#: Game.Levels.Tutorial.L07add_succ
msgid "Start by unravelling the `1`."
msgstr "Comincia espandendo `1`."

#: Game.Levels.Tutorial.L07add_succ
msgid "`rw [one_eq_succ_zero]` will do this."
msgstr "`rw [one_eq_succ_zero]` per espandere."

#: Game.Levels.Tutorial.L07add_succ Game.Levels.Tutorial.L08twoaddtwo
msgid "Now you can `rw [add_succ]`"
msgstr "Ora puoi eseguire `rw [add_succ]`"

#: Game.Levels.Tutorial.L07add_succ
msgid "And now `rw [add_zero]`"
msgstr "E ora `rw [add_zero]`"

#: Game.Levels.Tutorial.L07add_succ
msgid "And finally `rfl`."
msgstr "Infine, `rfl`."

#: Game.Levels.Tutorial.L07add_succ
msgid "[dramatic music]. Now are you ready to face the first boss of the game?"
msgstr "[musica drammatica] Sei pronto per affrontare il primo boss del gioco?"

#: Game.Levels.Tutorial.L08twoaddtwo
msgid "2+2=4"
msgstr "2+2=4"

#: Game.Levels.Tutorial.L08twoaddtwo
msgid ""
"Good luck!\n"
"\n"
"  One last hint. If `h : X = Y` then `rw [h]` will change *all* `X`s into `Y`s.\n"
"  If you only want to change one of them, say the 3rd one, then use\n"
"  `nth_rewrite 3 [h]`."
msgstr ""
"Buona fortuna!\n"
"\n"
"  Un'ultima cosa. Se hai `h : X = Y`, con `rw [h]` cambierai *tutte* le `X` in`Y`.\n"
"  Se vuoi cambiarne solo una, la terza ad esempio, allora devi scrivere\n"
"`nth_rewrite 3 [h]`."

#: Game.Levels.Tutorial.L08twoaddtwo
msgid "$2+2=4$."
msgstr "$2+2=4$."

#: Game.Levels.Tutorial.L08twoaddtwo
msgid "`nth_rewrite 2 [two_eq_succ_one]` is I think quicker than `rw [two_eq_succ_one]`."
msgstr "`nth_rewrite 2 [two_eq_succ_one]` pi√π veloce di `rw [two_eq_succ_one]`, secondo me."

#: Game.Levels.Tutorial.L08twoaddtwo
msgid ""
"Here is an example proof of 2+2=4 showing off various techniques.\n"
"\n"
"```lean\n"
"nth_rewrite 2 [two_eq_succ_one] -- only change the second `2` to `succ 1`.\n"
"rw [add_succ]\n"
"rw [one_eq_succ_zero]\n"
"rw [add_succ, add_zero] -- two rewrites at once\n"
"rw [‚Üê three_eq_succ_two] -- change `succ 2` to `3`\n"
"rw [‚Üê four_eq_succ_three]\n"
"rfl\n"
"```\n"
"\n"
"Optional extra: you can run this proof yourself. Switch the game into \"Editor mode\" by clicking\n"
"on the `</>` button in the top right. You can now see your proof\n"
"written as several lines of code. Move your cursor between lines to see\n"
"the goal state at any point. Now cut and paste your code elsewhere if you\n"
"want to save it, and paste the above proof in instead. Move your cursor\n"
"around to investigate. When you've finished, click the `>_` button in the top right to\n"
"move back into \"Typewriter mode\".\n"
"\n"
"You have finished tutorial world!\n"
"Click \"Leave World\" to go back to the\n"
"overworld, and select Addition World, where you will learn\n"
"about the `induction` tactic."
msgstr ""
"Ecco un esempio di dimostrazione di 2+2=4 che impiega varie tecniche.\n"
"\n"
"```lean\n"
"nth_rewrite 2 [two_eq_succ_one] -- only change the second `2` to `succ 1`.\n"
"rw [add_succ]\n"
"rw [one_eq_succ_zero]\n"
"rw [add_succ, add_zero] -- two rewrites at once\n"
"rw [‚Üê three_eq_succ_two] -- change `succ 2` to `3`\n"
"rw [‚Üê four_eq_succ_three]\n"
"rfl\n"
"```\n"
"\n"
"Esercizio facoltativo: prova ad eseguire questa dimostrazione. Entra nella \"Modalit√† editor\" cliccando sul pulsante\n"
"`</>` in alto a destra. Dovresti vedere la tua dimostrazione estesa su\n"
"diverse linee di codice. Muovendo il cursore da una linea all'altra vedrai\n"
"lo stato della dimostrazione in ogni punto. Ora copia la tua dimostrazione e salvala da qualche parte per non\n"
"perderla, e incolla la dimostrazione che abbiamo riportato qui sopra al posto del tuo codice. Muovi il cursore\n"
"tra le linee per vedere come si comporta, sperimenta un po' con l'interfaccia. Quando hai finito, premi il pulsante `>_` in alto a destra per\n"
"ritornare nella \"Modalit√† interattiva\".\n"
"\n"
"Hai completato il Mondo Tutorial!\n"
"Premi \"Abbandona mondo\" per tornare al \n"
"menu principale, ed entra nel Mondo Addizione, dove imparerai a usare\n"
"la tattica `induction`."

#: Game.Levels.Tutorial
msgid "Tutorial World"
msgstr "Mondo Tutorial"

#: Game.Levels.Tutorial
msgid ""
"Welcome to tutorial world! In this world we learn the basics\n"
"of proving theorems. The boss level of this world\n"
"is the theorem `2 + 2 = 4`.\n"
"\n"
"You prove theorems by solving puzzles using tools called *tactics*.\n"
"The aim is to prove the theorem by applying tactics\n"
"in the right order.\n"
"\n"
"Let's learn some basic tactics. Click on \"Start\" below\n"
"to begin your quest."
msgstr ""
"Benvenuto nel Mondo Tutorial! In questo mondo impareremo le basi\n"
"della dimostrazione formale. Il livello boss di questo mondo\n"
"√® il teorema `2 + 2 = 4`.\n"
"\n"
"Dimostrare i teoremi consiste nel risolvere dei puzzle matematici utilizzando degli strumenti chiamati *tactics* (tattiche).\n"
"Per dimostrare un teorema dovrai applicare le tattiche nell'ordine\n"
"giusto.\n"
"\n"
"Impariamo subito qualche tattica basilare. Premi sul pulsante \"Via\" qui sotto\n"
"per cominciare l'avventura."

#: Game.Levels.Addition.L01zero_add
msgid "zero_add"
msgstr "zero_add"

#: Game.Levels.Addition.L01zero_add
msgid ""
"In this level we're going to prove that $0+n=n$, where $n$ is a secret natural number.\n"
"\n"
"Wait, don't we already know that? No! We know that $n+0=n$, but that's `add_zero`.\n"
"This is `zero_add`, which is different.\n"
"\n"
"The difficulty with proving `0 + n = n` is that we do not have a *formula* for\n"
"`0 + n` in general, we can only use `add_zero` and `add_succ` once\n"
"we know whether `n` is `0` or a successor. The `induction` tactic splits into these two cases.\n"
"\n"
"The base case will require us to prove `0 + 0 = 0`, and the inductive step\n"
"will ask us to show that if `0 + d = d` then `0 + succ d = succ d`. Because\n"
"`0` and successor are the only way to make numbers, this will cover all the cases.\n"
"\n"
"See if you can do your first induction proof in Lean.\n"
"\n"
"(By the way, if you are still in the \"Editor mode\" from the last world, you can swap\n"
"back to \"Typewriter mode\" by clicking the `>_` button in the top right.)"
msgstr ""
"In questo livello dimostreremo l'enunciato $0+n=n$, dove $n$ √® un numero naturale incognito.\n"
"\n"
"Ma come, non l'abbiamo gi√† dimostrato? No! Abbiamo dimostrato $n+0=n$, che abbiamo chiamato `add_zero`.\n"
"Questo √® `zero_add`, un teorema diverso.\n"
"\n"
"Ci√≤ che complica le cose nel dimostrare `0 + n = n` √® che non abbiamo una *formula* per riscrivere\n"
"`0 + n` in generale, possiamo solo applicare `add_zero` o `add_succ` una volta che sappiamo che\n"
"`n` √® `0` oppure un successore. La tattica `induction` spezza la dimostrazione in questi due casi.\n"
"\n"
"Nel caso base dovremo dimostrare `0 + 0 = 0`, e nel caso induttivo dovremo dimostrare\n"
"che se `0 + d = d` allora `0 + succ d = succ d`. Dato che\n"
"`0` e il successore sono i due soli modi per costruire i numeri naturali, la dimostrazione coprir√† tutti i casi possibili.\n"
"\n"
"Ora prova a svolgere la tua prima dimostrazione per induzione su Lean.\n"
"\n"
"(Se sei ancora nella \"Modalit√† editor\" dallo scorso mondo, puoi rientrare nella\n"
"\"Modalit√† interattiva\" cliccando sul pulsante `>_` in alto a destra.)"

#: Game.Levels.Addition.L01zero_add
msgid ""
"`zero_add x` is the proof of `0 + x = x`.\n"
"\n"
"`zero_add` is a `simp` lemma, because replacing `0 + x` by `x`\n"
"is almost always what you want to do if you're simplifying an expression."
msgstr ""
"`zero_add x` √® la dimostrazione di `0 + x = x`.\n"
"\n"
"`zero_add` √® un lemma del tipo `simp` (semplificazione), infatti sostituire `0 + x` con `x`\n"
"√® quasi sempre uno dei passi pi√π ovvi della semplificazione di un'espressione."

#: Game.Levels.Addition.L01zero_add
msgid "For all natural numbers $n$, we have $0 + n = n$."
msgstr "Per ogni numero naturale $n$, si ha che $0 + n = n$."

#: Game.Levels.Addition.L01zero_add
msgid ""
"You can start a proof by induction on `n` by typing:\n"
"`induction n with d hd`."
msgstr ""
"Per avviare una dimostrazione per induzione su `n` digita:\n"
"`induction n with d hd`."

#: Game.Levels.Addition.L01zero_add
msgid ""
"Now you have two goals. Once you proved the first, you will jump to the second one.\n"
"This first goal is the base case $n = 0$.\n"
"\n"
"Recall that you can rewrite the proof of any lemma which is visible\n"
"in your inventory, or of any assumption displayed above the goal,\n"
"as long as it is of the form `X = Y`."
msgstr ""
"Ora hai due goal. Appena dimostrerai il primo, ti verr√† dato il secondo goal da dimostrare.\n"
"Questo primo goal rappresenta il caso base $n = 0$.\n"
"\n"
"Ricorda che puoi riscrivere la dimostrazione di qualsiasi lemma che √® visibile\n"
"nell'inventario, o una qualsiasi ipotesi presente al di sopra del goal,\n"
"a patto che abbia la forma `X = Y`."

#: Game.Levels.Addition.L01zero_add
msgid "try rewriting `add_zero`."
msgstr "prova a riscrivere `add_zero`."

#: Game.Levels.Addition.L01zero_add
msgid ""
"Now for to the second goal. Here you have the induction hypothesis\n"
"`¬´{hd}¬ª : 0 + ¬´{d}¬ª = ¬´{d}¬ª`, and you need to prove that `0 + succ ¬´{d}¬ª = succ ¬´{d}¬ª`."
msgstr ""
"Adesso viene il secondo goal. Qui hai l'ipotesi induttiva\n"
"`¬´{hd}¬ª : 0 + ¬´{d}¬ª = ¬´{d}¬ª`, e devi dimostrare che `0 + succ ¬´{d}¬ª = succ ¬´{d}¬ª`."

#: Game.Levels.Addition.L01zero_add
msgid "Use `add_succ`."
msgstr "Usa `add_succ`."

#: Game.Levels.Addition.L01zero_add
msgid ""
"At this point you see the term `0 + ¬´{d}¬ª`, so you can use the\n"
"induction hypothesis with `rw [¬´{hd}¬ª]`."
msgstr ""
"A questo punto hai davanti il termine `0 + ¬´{d}¬ª`, quindi puoi riscrivere\n"
"l'ipotesi induttiva con `rw [¬´{hd}¬ª]`."

#: Game.Levels.Addition.L01zero_add
msgid ""
"## Summary\n"
"\n"
"If `n : ‚Ñï` is an object, and the goal mentions `n`, then `induction n with d hd`\n"
"attempts to prove the goal by induction on `n`, with the inductive\n"
"variable in the successor case being `d`, and the inductive hypothesis being `hd`.\n"
"\n"
"### Example:\n"
"If the goal is\n"
"```\n"
"0 + n = n\n"
"```\n"
"\n"
"then\n"
"\n"
"`induction n with d hd`\n"
"\n"
"will turn it into two goals. The first is `0 + 0 = 0`;\n"
"the second has an assumption `hd : 0 + d = d` and goal\n"
"`0 + succ d = succ d`.\n"
"\n"
"Note that you must prove the first\n"
"goal before you can access the second one."
msgstr ""
"## Descrizione\n"
"\n"
"Se `n : ‚Ñï` √® un oggetto, e il goal fa il nome di `n`, allora `induction n with d hd`\n"
"avvia la dimostrazione per induzione attorno alla variabile `n`, con la variabile\n"
"induttiva nel caso del successore chiamata `d` e l'ipotesi induttiva chiamata`hd`.\n"
"\n"
"### Esempio:\n"
"Se il goal √®\n"
"```\n"
"0 + n = n\n"
"```\n"
"\n"
"allora\n"
"\n"
"`induction n with d hd`\n"
"\n"
"lo spezzer√† in sue sotto-goal. Il primo √® `0 + 0 = 0`;\n"
"il secondo porta ha con s√© un ipotesi `hd : 0 + d = d` e il goal\n"
"`0 + succ d = succ d`.\n"
"\n"
"Tieni presente che devi dimostrare il primo\n"
"goal prima di avere accesso al secondo."

#: Game.Levels.Addition.L01zero_add
msgid ""
"This lemma would have been easy if we had known that `x + y = y + x`. That theorem\n"
"  is called `add_comm` and it is *true*, but unfortunately its proof *uses* both\n"
"  `add_zero` and `zero_add`!\n"
"\n"
"  Let's continue on our journey to `add_comm`, the proof of `x + y = y + x`."
msgstr ""
"Questo lemma sarebbe stato semplice se avessimo potuto usare `x + y = y + x`. Quel teorema\n"
"  si chiama `add_comm` e, sebbene sia *vero*, la sua dimostrazione *dipende* sia da\n"
"  `add_zero` che da `zero_add`!\n"
"\n"
"  Proseguiamo la nostra avventura verso `add_comm`, la dimostrazione di `x + y = y + x`."

#: Game.Levels.Addition.L02succ_add
msgid "succ_add"
msgstr "succ_add"

#: Game.Levels.Addition.L02succ_add
msgid ""
"Oh no! On the way to `add_comm`, a wild `succ_add` appears. `succ_add a b`\n"
"is the proof that `(succ a) + b = succ (a + b)` for `a` and `b` numbers.\n"
"This result is what's standing in the way of `x + y = y + x`. Again\n"
"we have the problem that we are adding `b` to things, so we need\n"
"to use induction to split into the cases where `b = 0` and `b` is a successor."
msgstr ""
"Oh no! Lungo la strada per `add_comm`, salta fuori un `succ_add` selvatico. `succ_add a b`\n"
"√® la dimostrazione dell'enunciato `(succ a) + b = succ (a + b)` per due numeri `a` e `b` qualsiasi.\n"
"Questo risultato √® ci√≤ che ci manca per dimostrare `x + y = y + x`. E ancora una volta,\n"
"abbiamo il problema di sommare una `b` generica a destra, dunque dobbiamo\n"
"ricorrere all'induzione per spezzare questa `b` nei casi in cui `b = 0` e `b` √® un successore."

#: Game.Levels.Addition.L02succ_add
msgid "`succ_add a b` is a proof that `succ a + b = succ (a + b)`."
msgstr "`succ_add a b` √® la dimostrazione che `succ a + b = succ (a + b)`."

#: Game.Levels.Addition.L02succ_add
msgid ""
"For all natural numbers $a, b$, we have\n"
"$ \\operatorname{succ}(a) + b = \\operatorname{succ}(a + b)$."
msgstr ""
"Per tutti i numeri naturali $a, b$, si ha che\n"
"$ \\operatorname{succ}(a) + b = \\operatorname{succ}(a + b)$."

#: Game.Levels.Addition.L02succ_add
msgid ""
"You might want to think about whether induction\n"
"on `a` or `b` is the best idea."
msgstr ""
"Procedi per induzione: su cosa √® meglio farla qua, su\n"
"`a` o `b`?"

#: Game.Levels.Addition.L02succ_add
msgid ""
"Induction on `a` will not work here. You are still stuck with an `+ b`.\n"
"I suggest you delete this line and try a different approach."
msgstr ""
"Fare induzione su `a` non aiuta: rimarrai bloccato con `+ b`.\n"
"Cancella la linea e tenta un altro approccio."

#: Game.Levels.Addition.L02succ_add
msgid ""
"Note that `succ a + ¬´{d}¬ª` means `(succ a) + ¬´{d}¬ª`. Put your cursor\n"
"on any `succ` in the goal or assumptions to see what exactly it's eating."
msgstr ""
"Attento che `succ a + ¬´{d}¬ª` sta per `(succ a) + ¬´{d}¬ª`. Sposta il mouse\n"
"sopra `succ` o nel goal o nelle ipotesi per capire su cosa agisce esattamente."

#: Game.Levels.Addition.L02succ_add
msgid "Well done! You now have enough tools to tackle the main boss of this level."
msgstr "Ottimo lavoro! Ora sei abbastanza pratico per affrontare il boss principale di questo mondo."

#: Game.Levels.Addition.L03add_comm
msgid "add_comm (level boss)"
msgstr "add_comm (livello boss)"

#: Game.Levels.Addition.L03add_comm
msgid ""
"[boss battle music]\n"
"\n"
"Look in your inventory to see the proofs you have available.\n"
"These should be enough."
msgstr ""
"[musica da boss battle]\n"
"\n"
"Sfrutta le dimostrazioni disponibili nel tuo inventario.\n"
"Dovrebbero bastarti."

#: Game.Levels.Addition.L03add_comm
msgid "`add_comm x y` is a proof of `x + y = y + x`."
msgstr "`add_comm x y` √® la dimostrazione di `x + y = y + x`."

#: Game.Levels.Addition.L03add_comm
msgid ""
"On the set of natural numbers, addition is commutative.\n"
"In other words, if `a` and `b` are arbitrary natural numbers, then\n"
"$a + b = b + a$."
msgstr ""
"L'addizione √® commutativa sull'insieme dei naturali.\n"
"Equivalentemente, se `a` e `b` sono due numeri naturali qualsiasi, allora\n"
"$a + b = b + a$."

#: Game.Levels.Addition.L03add_comm
msgid "Induction on `a` or `b` -- it's all the same in this one."
msgstr "Induzione su `a` o su `b` -- vanno entrambe bene qua."

#: Game.Levels.Addition.L04add_assoc
msgid "add_assoc (associativity of addition)"
msgstr "add_assoc (propriet√† associativa dell'addizione)"

#: Game.Levels.Addition.L04add_assoc
msgid ""
"We've been adding up two numbers; in this level we will add up three.\n"
"\n"
"  What does $x+y+z$ *mean*? It could either mean $(x+y)+z$, or it\n"
"  could mean $x+(y+z)$. In Lean, $x+y+z$ means $(x+y)+z$.\n"
"\n"
"  But why do we care which one it means; $(x+y)+z$ and $x+(y+z)$ are *equal*!\n"
"\n"
"  That's true, but we didn't prove it yet. Let's prove it now by induction."
msgstr ""
"Finora abbiamo sommato solo due numeri alla volta; in questo livello ne sommeremo tre.\n"
"\n"
"  Ma per cosa sta $x+y+z$ *esattamente*? Pu√≤ stare per $(x+y)+z$, oppure pu√≤ stare\n"
"  per $x+(y+z)$. In Lean, $x+y+z$ sta per $(x+y)+z$.\n"
"\n"
"  La posizione delle parentesi potrebbe sembrarti irrilevante; d'altronde $(x+y)+z$ e $x+(y+z)$ sono *uguali*!\n"
"\n"
"  Hai ragione, ma non l'abbiamo ancora dimostrato. Dimostriamolo subito tramite induzione."

#: Game.Levels.Addition.L04add_assoc
msgid ""
"`add_assoc a b c` is a proof\n"
"that `(a + b) + c = a + (b + c)`. Note that in Lean `(a + b) + c` prints\n"
"as `a + b + c`, because the notation for addition is defined to be left\n"
"associative."
msgstr ""
"`add_assoc a b c` √® la dimostrazione\n"
"di `(a + b) + c = a + (b + c)`. Ricordati che in Lean `(a + b) + c` viene\n"
"stampato come `a + b + c`, perch√© la notazione dell'addizione √® left \n"
"associative."

#: Game.Levels.Addition.L04add_assoc
msgid ""
"On the set of natural numbers, addition is associative.\n"
"In other words, if $a, b$ and $c$ are arbitrary natural numbers, we have\n"
"$ (a + b) + c = a + (b + c). $"
msgstr ""
"Sull'insieme dei numeri naturali, l'addizione √® associativa.\n"
"Ovvero, se $a, b$ sono $c$ due numeri naturali qualsiasi, si ha che\n"
"$ (a + b) + c = a + (b + c). $"

#: Game.Levels.Addition.L04add_assoc
msgid ""
"Remember that when Lean writes `a + b + c`, it means `(a + b) + c`.\n"
"If you are not sure where the brackets are in an expression, just hover\n"
"your cursor over it and look at what gets highlighted. For example,\n"
"hover over both `+` symbols on the left hand side of the goal and\n"
"you'll see where the invisible brackets are."
msgstr ""
"Ricorda che, per pura brevit√†, Lean mostra `a + b + c` al posto di `(a + b) + c`.\n"
"Se non sei sicuro di dove si trovino le parentesi in un'espressione, puoi spostare il\n"
"mouse al di sopra e guardare cosa viene evidenziato. Ad esempio,\n"
"se sposti il puntatore sopra entrambi i simboli `+` nel membro sinistro del goal\n"
"avrai un'idea di dove Lean ha messo le parentesi invisibili."

#: Game.Levels.Addition.L04add_assoc
msgid ""
"A passing mathematician congratulates you on proving that naturals\n"
"are an additive commutative monoid.\n"
"\n"
"Let's practice using `add_assoc` and `add_comm` in one more level,\n"
"before we leave addition world."
msgstr ""
"Un matematico di passaggio si congratula con te per aver dimostrato che i naturali\n"
"sono un monoide additivo commutativo.\n"
"\n"
"Esercitiamoci a usare `add_assoc` e `add_comm` in un ultimo livello,\n"
"prima di lasciare il Mondo Addizione."

#: Game.Levels.Addition.L05add_right_comm
msgid "add_right_comm"
msgstr "add_right_comm"

#: Game.Levels.Addition.L05add_right_comm
msgid ""
"`add_comm b c` is a proof that `b + c = c + b`. But if your goal\n"
"is `a + b + c = a + c + b` then `rw [add_comm b c]` will not\n"
"work! Because the goal means `(a + b) + c = (a + c) + b` so there\n"
"is no `b + c` term *directly* in the goal.\n"
"\n"
"Use associativity and commutativity to prove `add_right_comm`.\n"
"You don't need induction. `add_assoc` moves brackets around,\n"
"and `add_comm` moves variables around.\n"
"\n"
"Remember that you can do more targetted rewrites by\n"
"adding explicit variables as inputs to theorems. For example `rw [add_comm b]`\n"
"will only do rewrites of the form `b + ? = ? + b`, and `rw [add_comm b c]`\n"
"will only do rewrites of the form `b + c = c + b`."
msgstr ""
"`add_comm b c` √® una dimostrazione di `b + c = c + b`. Ma se il goal\n"
"√® `a + b + c = a + c + b`, `rw [add_comm b c]` non funzioner√†!\n"
"Questo perch√© il goal sta in realt√† per `(a + b) + c = (a + c) + b`, e se guardi bene questo goal non include\n"
"il termine `b + c` *direttamente*.\n"
"\n"
"Usa l'associativit√† e la commutativit√† per dimostrare `add_right_comm`.\n"
"Non √® necessario procedere per induzione. `add_assoc` sposta le parentesi,\n"
"e `add_comm` sposta le variabili.\n"
"\n"
"Ricorda che puoi fare sostituzioni mirate fornendo\n"
"esplicitamente le variabili in input ai teoremi. Ad esempio `rw [add_comm b]`\n"
"far√† solo sostituzioni della forma `b + ? = ? + b`, e `rw [add_comm b c]`\n"
"far√† solo sostituzioni della forma `b + c = c + b`."

#: Game.Levels.Addition.L05add_right_comm
msgid ""
"`add_right_comm a b c` is a proof that `(a + b) + c = (a + c) + b`\n"
"\n"
"In Lean, `a + b + c` means `(a + b) + c`, so this result gets displayed\n"
"as `a + b + c = a + c + b`."
msgstr ""
"`add_right_comm a b c` √® la dimostrazione di `(a + b) + c = (a + c) + b`\n"
"\n"
"Su Lean, `a + b + c` √® zucchero sintattico per `(a + b) + c`, quindi il nostro risultato verr√† visualizzato\n"
"come `a + b + c = a + c + b`."

#: Game.Levels.Addition.L05add_right_comm
msgid ""
"If $a, b$ and $c$ are arbitrary natural numbers, we have\n"
"$(a + b) + c = (a + c) + b$."
msgstr ""
"Se $a, b$ e $c$ sono numeri naturali qualsiasi, si ha che\n"
"$(a + b) + c = (a + c) + b$."

#: Game.Levels.Addition.L05add_right_comm
msgid ""
"You've now seen all the tactics you need to beat the final boss of the game.\n"
"You can begin the journey towards this boss by entering Multiplication World.\n"
"\n"
"Or you can go off the beaten track and learn some new tactics in Implication\n"
"World. These tactics let you prove more facts about addition, such as\n"
"how to deduce `a = 0` from `x + a = x`.\n"
"\n"
"Click \"Leave World\" and make your choice."
msgstr ""
"Ora hai incontrato tutte le tattiche che ti servono per sconfiggere il boss finale del gioco.\n"
"Puoi proseguire spedito la tua marcia verso il boss finale passando dal Mondo Moltiplicazione.\n"
"\n"
"Oppure puoi fare una deviazione e imparare qualche nuova tattica esotica nel Mondo Implicazione.\n"
"Queste tattiche ti permetteranno di dimostrare altre propriet√† dell'addizione, ad esempio\n"
"come dedurre `a = 0` da `x + a = x`.\n"
"\n"
"Premi \"Abbandona mondo\" e scegli la tua strada."

#: Game.Levels.Addition
msgid "Addition World"
msgstr "Mondo Addizione"

#: Game.Levels.Addition
msgid "Welcome to Addition World! In this world we'll learn the `induction` tactic.\n"
"This will enable us to defeat the boss level of this world, namely `x + y = y + x`.\n"
"\n"
"The tactics `rw`, `rfl` and `induction` are the only tactics you'll need to\n"
"beat all the levels in Addition World, Multiplication World, and Power World.\n"
"Power World contains the final boss of the game.\n"
"\n"
"There are plenty more tactics in this game, but you'll only need to know them if you\n"
"want to explore the game further (for example if you decide to 100%\n"
"the game)."
msgstr ""
"Benvenuto nel Mondo Addizione! In questo mondo impareremo la tattica `induction`,\n"
"che ci permetter√† di sconfiggere il boss di questo mondo, il teorema `x + y = y + x`.\n"
"\n"
"Le tattiche `rw`, `rfl` e `induction` sono le uniche tattiche di cui avrai bisogno per\n"
"per battere tutti i livelli del Mondo Addizione, del Mondo Moltiplicazione e del Mondo Potenza.\n"
"Il Mondo Potenza contiene il boss finale del gioco.\n"
"\n"
"Ci sono tante altre tattiche in questo gioco, ma ne avrai bisogno solo se\n"
"desideri immergerti ulteriormente nel gioco (o hai intenzione di completarlo al 100%)."

#: Game.Levels.Multiplication.L01mul_one
msgid "mul_one"
msgstr "mul_one"

#: Game.Levels.Multiplication.L01mul_one
msgid ""
"See the new \"*\" tab in your lemmas, containing `mul_zero` and `mul_succ`.\n"
"Right now these are the only facts we know about multiplication.\n"
"Let's prove nine more.\n"
"\n"
"Let's start with a warm-up: no induction needed for this one,\n"
"because we know `1` is a successor."
msgstr ""
"Nell'inventario √® comparso il nuovo tab \"*\", dove vedrai `mul_zero` e `mul_succ`.\n"
"Per ora queste sono le uniche due propriet√† della moltiplicazione che conosciamo.\n"
"Insieme ne dimostreremo altre nove.\n"
"\n"
"Cominciamo con un esercizio di riscaldamento: non hai bisogno dell'induzione qua,\n"
"perch√© sappiamo che `1` √® un successore."

#: Game.Levels.Multiplication.L01mul_one
msgid ""
"`Mul a b`, with notation `a * b`, is the usual\n"
"  product of natural numbers. Internally it is\n"
"  via two axioms:\n"
"\n"
"  * `mul_zero a : a * 0 = 0`\n"
"\n"
"  * `mul_succ a b : a * succ b = a * b + a`\n"
"\n"
"Other theorems about naturals, such as `zero_mul`,\n"
"are proved by induction from these two basic theorems."
msgstr ""
"`Mul a b`, con notazione `a * b`, √® il solito\n"
"  prodotto tra numeri naturali. Dentro Lean √®\n"
"  definito tramite due assiomi:\n"
"\n"
"  * `mul_zero a : a * 0 = 0`\n"
"\n"
"  * `mul_succ a b : a * succ b = a * b + a`\n"
"\n"
"Tutti gli altri teoremi sulla moltiplicazione e i naturali, come `zero_mul`,\n"
"si dimostrano per induzione usando questi due assiomi fondamentali."

#: Game.Levels.Multiplication.L01mul_one
msgid "`mul_zero m` is the proof that `m * 0 = 0`."
msgstr "`mul_zero m` √® la dimostrazione di `m * 0 = 0`."

#: Game.Levels.Multiplication.L01mul_one
msgid "`mul_succ a b` is the proof that `a * succ b = a * b + a`."
msgstr "`mul_succ a b` √® la dimostrazione di `a * succ b = a * b + a`."

#: Game.Levels.Multiplication.L01mul_one
msgid "`mul_one m` is the proof that `m * 1 = m`."
msgstr "`mul_one m` √® la dimostrazione di `m * 1 = m`."

#: Game.Levels.Multiplication.L01mul_one
msgid "For any natural number $m$, we have $ m \\times 1 = m$."
msgstr "Per ogni numero naturale $m$, si ha che $ m \\times 1 = m$."

#: Game.Levels.Multiplication.L02zero_mul
msgid "zero_mul"
msgstr "zero_mul"

#: Game.Levels.Multiplication.L02zero_mul
msgid ""
"Our first challenge is `mul_comm x y : x * y = y * x`,\n"
"and we want to prove it by induction. The zero\n"
"case will need `mul_zero` (which we have)\n"
"and `zero_mul` (which we don't), so let's\n"
"start with this."
msgstr ""
"La prima sfida √® dimostrare `mul_comm x y : x * y = y * x`,\n"
"e vogliamo farlo per induzione. Per dimostrare il caso\n"
"base utilizzeremo `mul_zero` (che abbiamo come assioma)\n"
"e `zero_mul`, che non abbiamo ancora, dunque partiamo\n"
"da quest'ultimo."

#: Game.Levels.Multiplication.L02zero_mul
msgid ""
"`zero_mul x` is the proof that `0 * x = 0`.\n"
"\n"
"Note: `zero_mul` is a `simp` lemma."
msgstr ""
"`zero_mul x` √® la dimostrazione di `0 * x = 0`.\n"
"\n"
"NB: `zero_mul` √® un lemma di semplificazione (`simp`)."

#: Game.Levels.Multiplication.L02zero_mul
msgid "For all natural numbers $m$, we have $ 0 \\times m = 0$."
msgstr "Per tutti i numeri naturali $m$, si ha $ 0 \\times m = 0$."

#: Game.Levels.Multiplication.L03succ_mul
msgid "succ_mul"
msgstr "succ_mul"

#: Game.Levels.Multiplication.L03succ_mul
msgid ""
"Similarly we have `mul_succ`\n"
"but we're going to need `succ_mul` (guess what it says -- maybe you\n"
"are getting the hang of Lean's naming conventions).\n"
"\n"
"The last level from addition world might help you in this level.\n"
"If you can't remember what it is, you can go back to the\n"
"home screen by clicking the house icon and then taking a look.\n"
"You won't lose any progress."
msgstr ""
"In modo simile, abbiamo `mul_succ` come assioma\n"
"e vogliamo dimostrare `succ_mul` (puoi immaginarti cosa dice se hai gi√†\n"
"familiarizzato con le convenzioni di nomenclatura di Lean).\n"
"\n"
"L'ultimo livello del Mondo Addizione potrebbe aiutarti qui.\n"
"Per ridargli un'occhiata, puoi tornare al menu principale cliccando sull'icona della casetta.\n"
"Non perderai il progresso fatto in questo livello."

#: Game.Levels.Multiplication.L03succ_mul
msgid ""
"`succ_mul a b` is the proof that `succ a * b = a * b + b`.\n"
"\n"
"It could be deduced from `mul_succ` and `mul_comm`, however this argument\n"
"would be circular because the proof of `mul_comm` uses `mul_succ`."
msgstr ""
"`succ_mul a b` √® la dimostrazione di `succ a * b = a * b + b`.\n"
"\n"
"Questo lemma potrebbe essere dedotto da `mul_succ` e `mul_comm`, ma risulterebbe\n"
"in un ragionamento circolare in quanto la dimostrazione di `mul_comm` dipende da `mul_succ`."

#: Game.Levels.Multiplication.L03succ_mul
msgid ""
"For all natural numbers $a$ and $b$, we have\n"
"$(\\operatorname{succ}\\ a) \\times b = a\\times b + b$."
msgstr ""
"Per tutti i numeri naturali $a$ e $b$, si ha che\n"
"$(\\operatorname{succ}\\ a) \\times b = a\\times b + b$."

#: Game.Levels.Multiplication.L04mul_comm
msgid "mul_comm"
msgstr "mul_comm"

#: Game.Levels.Multiplication.L04mul_comm
msgid ""
"The first sub-boss of Multiplication World is `mul_comm x y : x * y = y * x`.\n"
"\n"
"When you've proved this theorem we will have \"spare\" proofs\n"
"such as `zero_mul`, which is now easily deducible from `mul_zero`.\n"
"But we'll keep hold of these proofs anyway, because it's convenient\n"
"to have exactly the right tool for a job."
msgstr ""
"Il primo mini-boss del Mondo Moltiplicazione √® `mul_comm x y : x * y = y * x`.\n"
"\n"
"Una volta dimostrata la commutativit√† della moltiplicazione certe dimostrazioni che abbiamo fatto diventano \"superflue\",\n"
"come `zero_mul`, il quale ora pu√≤ essere dedotto facilmente da `mul_zero`.\n"
"Ma ce le teniamo care comunque, perch√© sono strumenti specializzati che\n"
"possono rivelarsi sempre utili."

#: Game.Levels.Multiplication.L04mul_comm
msgid ""
"`mul_comm` is the proof that multiplication is commutative. More precisely,\n"
"`mul_comm a b` is the proof that `a * b = b * a`."
msgstr ""
"`mul_comm` √® la dimostrazione che la moltiplicazione √® commutativa. Pi√π precisamente,\n"
"`mul_comm a b` √® la dimostrazione che `a * b = b * a`."

#: Game.Levels.Multiplication.L04mul_comm
msgid "Multiplication is commutative."
msgstr "La moltiplicazione √® commutativa."

#: Game.Levels.Multiplication.L05one_mul
msgid "one_mul"
msgstr "one_mul"

#: Game.Levels.Multiplication.L05one_mul
msgid ""
"You can prove $1\\times m=m$ in at least three ways.\n"
"Either by induction, or by using `succ_mul`, or\n"
"by using commutativity. Which do you think is quickest?"
msgstr ""
"Puoi dimostrare $1\\times m=m$ in almeno tre modi.\n"
"O per induzione, o tramite `succ_mul`, oppure\n"
"usando la commutativit√†. Qual √® il modo pi√π veloce secondo te?"

#: Game.Levels.Multiplication.L05one_mul
msgid "`one_mul m` is the proof `1 * m = m`."
msgstr "`one_mul m` √® la dimostrazione che `1 * m = m`."

#: Game.Levels.Multiplication.L05one_mul
msgid "For any natural number $m$, we have $ 1 \\times m = m$."
msgstr "Per ogni numero naturale $m$, si ha che $ 1 \\times m = m$."

#: Game.Levels.Multiplication.L05one_mul
msgid ""
"Here's my solution:\n"
"```\n"
"rw [mul_comm, mul_one]\n"
"rfl\n"
"```"
msgstr ""
"Ecco come l'ho fatta io:\n"
"```\n"
"rw [mul_comm, mul_one]\n"
"rfl\n"
"```"

#: Game.Levels.Multiplication.L06two_mul
msgid "two_mul"
msgstr "two_mul"

#: Game.Levels.Multiplication.L06two_mul
msgid ""
"This level is more important than you think; it plays\n"
"a useful role when battling a big boss later on."
msgstr ""
"Questo livello √® pi√π importante di quanto non sembri; giocher√†\n"
"un ruolo importante in uno dei boss successivi."

#: Game.Levels.Multiplication.L06two_mul
msgid "`two_mul m` is the proof that `2 * m = m + m`."
msgstr "`two_mul m` √® la dimostrazione che `2 * m = m + m`."

#: Game.Levels.Multiplication.L06two_mul
msgid "For any natural number $m$, we have $ 2 \\times m = m+m$."
msgstr "Per ogni numero naturale $m$, si ha che $ 2 \\times m = m+m$."

#: Game.Levels.Multiplication.L06two_mul
msgid ""
"Here's my solution:\n"
"```\n"
"rw [two_eq_succ_one, succ_mul, one_mul]\n"
"rfl\n"
"```"
msgstr ""
"Ecco come l'ho fatta io:\n"
"```\n"
"rw [two_eq_succ_one, succ_mul, one_mul]\n"
"rfl\n"
"```"

#: Game.Levels.Multiplication.L07mul_add
msgid "mul_add"
msgstr "mul_add"

#: Game.Levels.Multiplication.L07mul_add
msgid ""
"Our next goal is \"left and right distributivity\",\n"
"meaning $a(b+c)=ab+ac$ and $(b+c)a=ba+ca$. Rather than\n"
"these slightly pompous names, the name of the proofs\n"
"in Lean are descriptive. Let's start with\n"
"`mul_add a b c`, the proof of `a * (b + c) = a * b + a * c`.\n"
"Note that the left hand side contains a multiplication\n"
"and then an addition."
msgstr ""
"Il nostro nuovo obiettivo √® dimostrare la \"distributivit√† sinistra e destra\",\n"
"ossia $a(b+c)=ab+ac$ e $(b+c)a=ba+ca$. Al posto di questo nome\n"
"un po' tecnico e altisonante, le dimostrazioni di Lean\n"
"hanno nomi descrittivi. Partiamo da\n"
"`mul_add a b c`, la dimostrazione di `a * (b + c) = a * b + a * c`.\n"
"Nota che a sinistra dell'uguale abbiamo la moltiplicazione\n"
"di un'addizione."

#: Game.Levels.Multiplication.L07mul_add
msgid ""
"Multiplication distributes\n"
"over addition on the left.\n"
"\n"
"`mul_add a b c` is the proof that `a * (b + c) = a * b + a * c`."
msgstr ""
"La moltiplicazione si distribuisce\n"
"sull'addizione a sinistra.\n"
"\n"
"`mul_add a b c` √® la dimostrazione di `a * (b + c) = a * b + a * c`."

#: Game.Levels.Multiplication.L07mul_add
msgid ""
"Multiplication is distributive over addition on the left.\n"
"In other words, for all natural numbers $a$, $b$ and $c$, we have\n"
"$a(b + c) = ab + ac$."
msgstr ""
"La moltiplicazione √® distributiva a sinistra rispetto all'addizione.\n"
"Equivalentemente, per tutti i numeri naturali $a$, $b$ e $c$, si ha che\n"
"$a(b + c) = ab + ac$."

#: Game.Levels.Multiplication.L07mul_add
msgid ""
"You can do induction on any of the three variables. Some choices\n"
"are harder to push through than others. Can you do the inductive step in\n"
"5 rewrites only?"
msgstr ""
"Puoi procedere per induzione su una qualsiasi delle tre variabili. Scegli bene, perch√©\n"
"con certe scelte la dimostrazione si aggroviglia pi√π che con altre. Riesci a dimostrare il caso induttivo in\n"
"sole cinque sostituzioni?"

#: Game.Levels.Multiplication.L07mul_add
msgid ""
"Induction on `a` is the most troublesome, then `b`,\n"
"and `c` is the easiest."
msgstr ""
"L'induzione su `a` √® la pi√π faticosa, mentre su `b`,\n"
"o su `c` √® pi√π facile."

#: Game.Levels.Multiplication.L07mul_add
msgid ""
"Here's my solution:\n"
"```\n"
"induction c with d hd\n"
"rw [add_zero, mul_zero, add_zero]\n"
"rfl\n"
"rw [add_succ, mul_succ, hd, mul_succ, add_assoc]\n"
"rfl\n"
"```\n"
"\n"
"Inducting on `a` or `b` also works, but might take longer."
msgstr ""
"Ecco come l'ho fatta io:\n"
"```\n"
"induction c with d hd\n"
"rw [add_zero, mul_zero, add_zero]\n"
"rfl\n"
"rw [add_succ, mul_succ, hd, mul_succ, add_assoc]\n"
"rfl\n"
"```\n"
"\n"
"Si poteva risolvere anche per induzione su `a` or `b`, ma avrebbe richiesto pi√π passi."

#: Game.Levels.Multiplication.L08add_mul
msgid "add_mul"
msgstr "add_mul"

#: Game.Levels.Multiplication.L08add_mul
msgid ""
"`add_mul` is just as fiddly to prove by induction; but there's a trick\n"
"which avoids it. Can you spot it?"
msgstr ""
"`add_mul` √® altrettanto macchinoso da dimostrare per induzione; ma c'√® un trucco\n"
"che ci permette di evitarla. Sai individuarlo?"

#: Game.Levels.Multiplication.L08add_mul
msgid "`add_mul a b c` is a proof that $(a+b)c=ac+bc$."
msgstr "`add_mul a b c` √® la dimostrazione che $(a+b)c=ac+bc$."

#: Game.Levels.Multiplication.L08add_mul
msgid ""
"Addition is distributive over multiplication.\n"
"In other words, for all natural numbers $a$, $b$ and $c$, we have\n"
"$(a + b) \\times c = ac + bc$."
msgstr ""
"L'addizione gode della propriet√† distributiva sulla moltiplicazione.\n"
"Equivalentemente, per tutti i numeri naturali $a$, $b$ e $c$, si ha che\n"
"$(a + b) \\times c = ac + bc$."

#: Game.Levels.Multiplication.L08add_mul
msgid ""
"Here's my proof:\n"
"```\n"
"rw [mul_comm, mul_add]\n"
"repeat rw [mul_comm c]\n"
"rfl\n"
"```"
msgstr ""
"Ecco la mia dimostrazione:\n"
"```\n"
"rw [mul_comm, mul_add]\n"
"repeat rw [mul_comm c]\n"
"rfl\n"
"```"

#: Game.Levels.Multiplication.L09mul_assoc
msgid "mul_assoc"
msgstr "mul_assoc"

#: Game.Levels.Multiplication.L09mul_assoc
msgid ""
"We now have enough to prove that multiplication is associative,\n"
"the boss level of multiplication world. Good luck!"
msgstr ""
"Adesso abbiamo abbastanza informazioni per dimostrare che la moltiplicazione √® associativa,\n"
"il boss del Mondo Moltiplicazione. Avanti guerriero!"

#: Game.Levels.Multiplication.L09mul_assoc
msgid ""
"`mul_assoc a b c` is a proof that `(a * b) * c = a * (b * c)`.\n"
"\n"
"Note that when Lean says `a * b * c` it means `(a * b) * c`.\n"
"\n"
"Note that `(a * b) * c = a * (b * c)` cannot be proved by \\\"pure thought\\\":\n"
"for example subtraction is not associative, as `(6 - 2) - 1` is not\n"
"equal to `6 - (2 - 1)`."
msgstr ""
"`mul_assoc a b c` √® la dimostrazione che `(a * b) * c = a * (b * c)`.\n"
"\n"
"Ricorda che Lean per `a * b * c` intende `(a * b) * c`.\n"
"\n"
"Ricorda che `(a * b) * c = a * (b * c)` non √® una legge universale della matematica\":\n"
"un esempio famoso di operazione non associativa √® la sottrazione, dato che `(6 - 2) - 1` non √®\n"
"uguale a `6 - (2 - 1)`."

#: Game.Levels.Multiplication.L09mul_assoc
msgid ""
"Multiplication is associative.\n"
"In other words, for all natural numbers $a$, $b$ and $c$, we have\n"
"$(ab)c = a(bc)$."
msgstr ""
"La moltiplicazione √® un'operazione associativa.\n"
"Equivalentemente, per tutti i numeri naturali $a$, $b$ e $c$, si ha che\n"
"$(ab)c = a(bc)$."

#: Game.Levels.Multiplication.L09mul_assoc
msgid ""
"A passing mathematician notes that you've proved\n"
"that the natural numbers are a commutative semiring.\n"
"\n"
"If you want to begin your journey to the final boss, head for Power World."
msgstr ""
"Un matematico di passaggio nota che hai appena dimostrato\n"
"che i numeri naturali sono un semianello commutativo.\n"
"\n"
"Se ti senti pronto per incamminarti verso il boss finale, dirigiti verso il Mondo Potenza."

#: Game.Levels.Multiplication
msgid "Multiplication World"
msgstr "Mondo Moltiplicazione"

#: Game.Levels.Multiplication
msgid ""
"How should we define `37 * x`? Just like addition, we need to give definitions\n"
"when $x=0$ and when $x$ is a successor.\n"
"\n"
"The zero case is easy: we define `37 * 0` to be `0`. Now say we know\n"
"`37 * d`. What should `37 * succ d` be? Well, that's $(d+1)$ $37$s,\n"
"so it should be `37 * d + 37`.\n"
"\n"
"Here are the definitions in Lean.\n"
"\n"
"  * `mul_zero a : a * 0 = 0`\n"
"  * `mul_succ a d : a * succ d = a * d + a`\n"
"\n"
"In this world, we must not only prove facts about multiplication like `a * b = b * a`,\n"
"we must also prove facts about how multiplication interacts with addition, like `a * (b + c) = a * b + a * c`.\n"
"Let's get started."
msgstr ""
"Come si pu√≤ definire `37 * x`? Come per l'addizione, dobbiamo dare la definizione per\n"
"quando $x=0$ e quando $x$ √® un successore.\n"
"\n"
"Il caso di zero √® facile: definiamo `37 * 0` uguale a `0`. Ora, immaginiamo di sapere quanto fa\n"
"`37 * d`. Quanto fa allora `37 * succ d`? Beh, non √® altro che $37$ sommato a se stesso $(d+1)$ volte,\n"
"quindi `37 * d + 37`.\n"
"\n"
"Ecco le due definizioni in Lean.\n"
"\n"
"  * `mul_zero a : a * 0 = 0`\n"
"  * `mul_succ a d : a * succ d = a * d + a`\n"
"\n"
"In questo mondo non ci limiteremo a dimostrare fatti riguardanti solo la moltiplicazione come `a * b = b * a`,\n"
"ma anche fatti su come la moltiplicazione interagisce con l'addizione, come `a * (b + c) = a * b + a * c`.\n"
"Iniziamo!"

#: Game.Levels.Power.L01zero_pow_zero
msgid "zero_pow_zero"
msgstr "zero_pow_zero"

#: Game.Levels.Power.L01zero_pow_zero
msgid ""
"Mathematicians sometimes debate what `0 ^ 0` is;\n"
"the answer depends, of course, on your definitions. In this\n"
"game, `0 ^ 0 = 1`. See if you can prove it.\n"
"\n"
"Check out the *Pow* tab in your list of theorems\n"
"to see the new proofs which are available."
msgstr ""
"Cosa rappresenta `0 ^ 0` √® oggetto di dibattito tra i matematici;\n"
"la risposta dipende, ovviamente, dalle tue definizioni. In questo\n"
"gioco, `0 ^ 0 = 1`. Prova a dimostrarlo.\n"
"\n"
"Guarda nel tab *^* nell'elenco di teoremi\n"
"per vedere le nuove dimostrazioni disponibili."

#: Game.Levels.Power.L01zero_pow_zero
msgid ""
"`Pow a b`, with notation `a ^ b`, is the usual\n"
"  exponentiation of natural numbers. Internally it is\n"
"  defined via two axioms:\n"
"\n"
"  * `pow_zero a : a ^ 0 = 1`\n"
"\n"
"  * `pow_succ a b : a ^ succ b = a ^ b * a`\n"
"\n"
"Note in particular that `0 ^ 0 = 1`."
msgstr ""
"`Pow a b`, con notazione `a ^ b`, √®\n"
"  l'elevamento a potenza sui numeri naturali. Dentro Lean √®\n"
"  definita tramite due assiomi:\n"
"\n"
"  * `pow_zero a : a ^ 0 = 1`\n"
"\n"
"  * `pow_succ a b : a ^ succ b = a ^ b * a`\n"
"\n"
"In particolare, dal primo segue che `0 ^ 0 = 1`."

#: Game.Levels.Power.L01zero_pow_zero
msgid ""
"`pow_zero a : a ^ 0 = 1` is one of the two axioms\n"
"defining exponentiation in this game."
msgstr ""
"`pow_zero a : a ^ 0 = 1` √® uno dei due assiomi che\n"
"definiscono l'elevamento a potenza in questo gioco."

#: Game.Levels.Power.L01zero_pow_zero
msgid ""
"Mathematicians sometimes argue that `0 ^ 0 = 0` is also\n"
"a good convention. But it is not a good convention in this\n"
"game; all the later levels come out beautifully with the\n"
"convention that `0 ^ 0 = 1`."
msgstr ""
"Certi matematici sostengono che `0 ^ 0 = 0` sia pure una\n"
"convenzione ragionevole. Tuttavia non va d'accordo con il modo in cui abbiamo strutturato\n"
"i livelli successivi del gioco, e nell'intento di difendere la loro eleganza matematica\n"
"rimaniamo fermi sulla convenzione `0 ^ 0 = 1`."

#: Game.Levels.Power.L01zero_pow_zero
msgid "$0 ^ 0 = 1$"
msgstr "$0 ^ 0 = 1$"

#: Game.Levels.Power.L02zero_pow_succ
msgid "zero_pow_succ"
msgstr "zero_pow_succ"

#: Game.Levels.Power.L02zero_pow_succ
msgid ""
"We've just seen that `0 ^ 0 = 1`, but if `n`\n"
"is a successor, then `0 ^ n = 0`. We prove that here."
msgstr ""
"Abbiamo appena visto che `0 ^ 0 = 1`, ma se l'esponente `n`\n"
"√® un successore, allora `0 ^ n = 0`. Lo dimostriamo in questo livello."

#: Game.Levels.Power.L02zero_pow_succ
msgid ""
"`pow_succ a b : a ^ (succ b) = a ^ b * a` is one of the\n"
"two axioms defining exponentiation in this game."
msgstr ""
"`pow_succ a b : a ^ (succ b) = a ^ b * a` √® uno dei\n"
"due assiomi che definiscono l'elevamento a potenza in questo gioco."

#: Game.Levels.Power.L02zero_pow_succ
msgid ""
"Although $0^0=1$ in this game, $0^n=0$ if $n>0$, i.e., if\n"
"$n$ is a successor."
msgstr ""
"Sebbene definiamo $0^0=1$ in questo gioco, $0^n=0$ se $n>0$, ossia se\n"
"$n$ √® un successore."

#: Game.Levels.Power.L02zero_pow_succ
msgid "For all numbers $m$, $0 ^{\\operatorname{succ} (m)} = 0$."
msgstr "Per tutti i numeri naturali $m$, $0 ^{\\operatorname{succ} (m)} = 0$."

#: Game.Levels.Power.L03pow_one
msgid "pow_one"
msgstr "pow_one"

#: Game.Levels.Power.L03pow_one
msgid ""
"`pow_one a` says that `a ^ 1 = a`.\n"
"\n"
"Note that this is not quite true by definition: `a ^ 1` is\n"
"defined to be `a ^ 0 * a` so it's `1 * a`, and to prove\n"
"that this is equal to `a` you need to use induction somewhere."
msgstr ""
"`pow_one a` afferma `a ^ 1 = a`.\n"
"\n"
"Questo fatto non deriva direttamente dalla definizione: `a ^ 1` si\n"
"espande in `a ^ 0 * a` ovvero `1 * a`, e abbiamo visto che per dimostrare\n"
"che tale prodotto √® uguale ad `a` bisogna usare l'induzione."

#: Game.Levels.Power.L03pow_one
msgid "For all naturals $a$, $a ^ 1 = a$."
msgstr "Per tutti i numeri naturali $a$, $a ^ 1 = a$."

#: Game.Levels.Power.L04one_pow
msgid "one_pow"
msgstr "one_pow"

#: Game.Levels.Power.L04one_pow
msgid "`one_pow n` is a proof that $1^n=1$."
msgstr "`one_pow n` √® la dimostrazione che $1^n=1$."

#: Game.Levels.Power.L04one_pow
msgid "For all naturals $m$, $1 ^ m = 1$."
msgstr "Per tutti i numeri naturali $m$, $1 ^ m = 1$."

#: Game.Levels.Power.L05pow_two
msgid "pow_two"
msgstr "pow_two"

#: Game.Levels.Power.L05pow_two
msgid "Note: this lemma will be useful for the final boss!"
msgstr "Nota: questo lemma sar√† d'aiuto per il boss finale!"

#: Game.Levels.Power.L05pow_two
msgid "`pow_two a` says that `a ^ 2 = a * a`."
msgstr "`pow_two a` afferma `a ^ 2 = a * a`."

#: Game.Levels.Power.L05pow_two
msgid "For all naturals $a$, $a ^ 2 = a \\times a$."
msgstr "Per tutti i numeri naturali $a$, $a ^ 2 = a \\times a$."

#: Game.Levels.Power.L06pow_add
msgid "pow_add"
msgstr "pow_add"

#: Game.Levels.Power.L06pow_add
msgid "Let's now begin our approach to the final boss,\n"
"by proving some more subtle facts about powers."
msgstr ""
"Vediamo meglio come affrontare il boss finale,\n"
"dimostrando altre propriet√† insidiose delle potenze."

#: Game.Levels.Power.L06pow_add
msgid "`pow_add a m n` is a proof that $a^{m+n}=a^ma^n.$"
msgstr "`pow_add a m n` √® la dimostrazione che $a^{m+n}=a^ma^n.$"

#: Game.Levels.Power.L06pow_add
msgid "For all naturals $a$, $m$, $n$, we have $a^{m + n} = a ^ m  a ^ n$."
msgstr "Per tutti i numeri naturali $a$, $m$, $n$, si ha che $a^{m + n} = a ^ m  a ^ n$."

#: Game.Levels.Power.L07mul_pow
msgid "mul_pow"
msgstr "mul_pow"

#: Game.Levels.Power.L07mul_pow
msgid "The music gets ever more dramatic, as we explore\n"
"the interplay between exponentiation and multiplication.\n"
"\n"
"If you're having trouble exchanging the right `x * y`\n"
"because `rw [mul_comm]` swaps the wrong multiplication,\n"
"then read the documentation of `rw` for tips on how to fix this."
msgstr "La musica si fa sempre pi√π drammatica nel mentre che ci addentriamo\n"
"nella relazione tra elevamento a potenza e prodotto.\n"
"\n"
"Se stai avendo difficolt√† a scambiare il giusto `x * y`\n"
"perch√© `rw [mul_comm]` sta operando su un prodotto diverso,\n"
"leggi la documentazione di `rw` per ripassare come fare sostituzioni mirate."

#: Game.Levels.Power.L07mul_pow
msgid "`mul_pow a b n` is a proof that $(ab)^n=a^nb^n.$"
msgstr "`mul_pow a b n` √® la dimostrazione che $(ab)^n=a^nb^n.$"

#: Game.Levels.Power.L07mul_pow
msgid "For all naturals $a$, $b$, $n$, we have $(ab) ^ n = a ^ nb ^ n$."
msgstr "Per tutti i numeri naturali $a$, $b$, $n$, si ha che $(ab) ^ n = a ^ nb ^ n$."

#: Game.Levels.Power.L08pow_pow
msgid "pow_pow"
msgstr "pow_pow"

#: Game.Levels.Power.L08pow_pow
#, fuzzy
msgid ""
"One of the best named levels in the game, a savage `pow_pow`\n"
"sub-boss appears as the music reaches a frenzy. What\n"
"else could there be to prove about powers after this?"
msgstr ""
"Con il suo nome degno di premio Oscar, il mini-boss `pow_pow`\n"
"salta nel ring e la musica si fa ancora pi√π intensa. Cos'altro c'√® da\n"
"dimostrare sulle potenze dopo di lui?!"

#: Game.Levels.Power.L08pow_pow
msgid "`pow_pow a m n` is a proof that $(a^m)^n=a^{mn}.$"
msgstr "`pow_pow a m n` √® la dimostrazione di $(a^m)^n=a^{mn}.$"

#: Game.Levels.Power.L08pow_pow
msgid "For all naturals $a$, $m$, $n$, we have $(a ^ m) ^ n = a ^ {mn}$."
msgstr "Per tutti i numeri naturali $a$, $m$, $n$, si ha che $(a ^ m) ^ n = a ^ {mn}$."

#: Game.Levels.Power.L08pow_pow
msgid ""
"The music dies down. Is that it?\n"
"\n"
"Course it isn't, you can\n"
"clearly see that there are two worlds left.\n"
"\n"
"A passing mathematician says that mathematicians don't have a name\n"
"for the structure you just constructed. You feel cheated.\n"
"\n"
"Suddenly the music starts up again. This really is the final boss."
msgstr ""
"La musica cessa di suonare. √à finita?\n"
"\n"
"Ovvio che no, come vedi\n"
"ci sono ancora due livelli da battere.\n"
"\n"
"Intanto, un matematico di passaggio ti svela che i matematici non hanno dato un nome\n"
"alla struttura che hai appena costruito. Questa notizia ti lascia l'amaro in bocca.\n"
"\n"
"La musica riparte improvvisamente. Ti lasci alle spalle il passato: lo scontro con il boss finale √® vicino."

#: Game.Levels.Power.L09add_sq
msgid "add_sq"
msgstr "add_sq"

#: Game.Levels.Power.L09add_sq
msgid "[final boss music]"
msgstr "[final boss music]"

#: Game.Levels.Power.L09add_sq
msgid "`add_sq a b` is the statement that $(a+b)^2=a^2+b^2+2ab.$"
msgstr "`add_sq a b` √® l'enunciato $(a+b)^2=a^2+b^2+2ab.$"

#: Game.Levels.Power.L09add_sq
msgid ""
"For all numbers $a$ and $b$, we have\n"
"$$(a+b)^2=a^2+b^2+2ab.$$"
msgstr ""
"Per tutti i numeri naturali $a$ e $b$, si ha che\n"
"$$(a+b)^2=a^2+b^2+2ab.$$"

#: Game.Levels.Power.L09add_sq
msgid ""
"It's all over! You have proved a theorem which has tripped up\n"
"schoolkids for generations (some of them think $(a+b)^2=a^2+b^2$:\n"
"this is \"the freshman's dream\").\n"
"\n"
"How many rewrites did you use? I can do it in 12.\n"
"\n"
"But wait! This boss is stirring...and mutating into a second more powerful form!"
msgstr ""
"Hai vinto tutto! Hai dimostrato un teorema che ha tormentato\n"
"intere generazioni di alunni (alcuni credono che $(a+b)^2=a^2+b^2$:\n"
"il cosiddetto \"freshman's dream\").\n"
"\n"
"Quante sostituzioni hai fatto? Io ci sono riuscito in 12.\n"
"\n"
"In guardia! Il boss si agita...si sta trasformando nella sua seconda forma ancora pi√π letale!"

#: Game.Levels.Power.L10FLT
msgid "Fermat's Last Theorem"
msgstr "L'ultimo teorema di Fermat"

#: Game.Levels.Power.L10FLT
msgid ""
"We now have enough to state a mathematically accurate, but slightly\n"
"clunky, version of Fermat's Last Theorem.\n"
"\n"
"Fermat's Last Theorem states that if $x,y,z>0$ and $m \\geq 3$ then $x^m+y^m\\not =z^m$.\n"
"If you didn't do inequality world yet then we can't talk about $m \\geq 3$,\n"
"so we have to resort to the hack of using `n + 3` for `m`,\n"
"which guarantees it's big enough. Similarly instead of `x > 0` we\n"
"use `a + 1`.\n"
"\n"
"This level looks superficially like other levels we have seen,\n"
"but the shortest solution known to humans would translate into\n"
"many millions of lines of Lean code. The author of this game,\n"
"Kevin Buzzard, is working on translating the proof by Wiles\n"
"and Taylor into Lean, although this task will take many years.\n"
"\n"
"## CONGRATULATIONS!\n"
"\n"
"You've finished the main quest of the natural number game!\n"
"If you would like to learn more about how to use Lean to\n"
"prove theorems in mathematics, then take a look\n"
"at [Mathematics In Lean](https://leanprover-community.github.io/mathematics_in_lean/),\n"
"an interactive textbook which you can read in your browser,\n"
"and which explains how to work with many more mathematical concepts in Lean."
msgstr ""
"Ora abbiamo abbastanza materiale per asserire una versione matematicamente accurata, tuttavia un po' goffa, dell'Ultimo Teorema di Fermat.\n"
"\n"
"L'Ultimo Teorema di Fermat afferma che se $x,y,z>0$ e $m \\geq 3$ allora $x^m+y^m\\not =z^m$.\n"
"Se non sei ancora stato nel Mondo Disequazioni, non possiamo parlare ancora di $m \\geq 3$,\n"
"quindi dobbiamo ricorrere all'espediente `n + 3` per `m`,\n"
"che garantisce che sia abbastanza grande. Allo stesso modo, simuliamo `x > 0`\n"
"tramite `a + 1`.\n"
"\n"
"A primo sguardo, questo livello assomiglia ad altri livelli che abbiamo visto,\n"
"ma in realt√† √® impossibile da dimostrare a mano. Purtroppo, la soluzione pi√π breve nota all'uomo\n"
"corrisponde a milioni di righe di codice Lean. Questo boss imbattibile ti lascia tutti perplessi, ma\n"
"non perdiamoci d'animo! L'autore di questo gioco,\n"
"Kevin Buzzard, sta lavorando al traduzione della prova di Wiles e Taylor in Lean,\n"
"nonostante sia un compito che richieder√† parecchi anni.\n"
"\n"
"## CONGRATULAZIONI!\n"
"\n"
"Hai completato la missione principale del Gioco dei Numeri Naturali!\n"
"Se vuoi sapere di pi√π su come si usa Lean per\n"
"dimostrare i teoremi della matematica, ti indirizziamo a \n"
"[Mathematics In Lean](https://leanprover-community.github.io/mathematics_in_lean/),\n"
"un web book interattivo che puoi leggere dal tuo browser,\n"
"che spiega come trattare tanti altri concetti matematici su Lean."

#: Game.Levels.Power.L10FLT
#, fuzzy
msgid ""
"`xyzzy` is an ancient magic spell, believed to be the origin of the\n"
"modern word `sorry`. The game won't complain - or notice - if you\n"
"prove anything with `xyzzy`."
msgstr ""
"`xyzzy` √® un incantesimo arcaico, si crede che sia l'origine\n"
"della parola inglese `sorry`. Il gioco non si lamenter√† - e nemmeno noter√† - se\n"
"risolvi tutti i livelli con `xyzzy`."

#: Game.Levels.Power.L10FLT
msgid ""
"For all naturals $a$ $b$ $c$ and $n$, we have\n"
"$$(a+1)^{n+3}+(b+1)^{n+3}\\not=(c+1)^{n+3}.$$"
msgstr ""
"Per tutti i numeri naturali $a$ $b$ $c$ e $n$, si ha che\n"
"$$(a+1)^{n+3}+(b+1)^{n+3}\\not=(c+1)^{n+3}.$$"

#: Game.Levels.Power.L10FLT
msgid ""
"Congratulations! You have proved Fermat's Last Theorem!\n"
"\n"
"Either that, or you used magic..."
msgstr ""
"Congratulazioni! Hai dimostrato l'ultimo teorema di Fermat!\n"
"\n"
"O forse no... ti ho visto usare la polvere magica..."

#: Game.Levels.Power
msgid "Power World"
msgstr "Mondo Potenza"

#: Game.Levels.Power
msgid ""
"This world introduces exponentiation. If you want to define `37 ^ n`\n"
"then, as always, you will need to know what `37 ^ 0` is, and\n"
"what `37 ^ (succ d)` is, given only `37 ^ d`.\n"
"\n"
"You can probably guess the names of the general theorems:\n"
"\n"
"  * `pow_zero (a : ‚Ñï) : a ^ 0 = 1`\n"
"  * `pow_succ (a b : ‚Ñï) : a ^ succ b = a ^ b * a`\n"
"\n"
"Using only these, can you get past the final boss level?\n"
"\n"
"The levels in this world were designed by Sian Carey, a UROP student\n"
"at Imperial College London, funded by a Mary Lister McCammon Fellowship\n"
"in the summer of 2019. Thanks to Sian and also thanks to Imperial\n"
"College for funding her."
msgstr ""
"Questo mondo √® casa dell'elevamento a potenza. Come al solito, per definire `37 ^ n`,\n"
"dobbiamo stabilire cosa significa `37 ^ 0`, e poi\n"
"cosa significa `37 ^ (succ d)` data la conoscenza `37 ^ d`.\n"
"\n"
"Questi due assiomi, il cui nome allude al nome dell'operazione in inglese (\"power\"), sono:\n"
"\n"
"  * `pow_zero (a : ‚Ñï) : a ^ 0 = 1`\n"
"  * `pow_succ (a b : ‚Ñï) : a ^ succ b = a ^ b * a`\n"
"\n"
"Riuscirai a battere il livello boss usando solo questi due?\n"
"\n"
"Questo mondo √® stato progettato da Sian Carey, studente UROP\n"
"al Imperial College London, finanziato dalla Mary Lister McCammon Fellowship\n"
"nell'estate 2019. Grazie a Sian e grazie a Imperial\n"
"College per averla sostenuta economicamente."

#: Game.Levels.Implication.L01exact
msgid "The `exact` tactic"
msgstr "La tattica `exact`"

#: Game.Levels.Implication.L01exact
msgid ""
"## Summary\n"
"\n"
"If the goal is a statement `P`, then `exact h` will close the goal if `h` is a proof of `P`.\n"
"\n"
"### Example\n"
"\n"
"If the goal is `x = 37` and you have a hypothesis `h : x = 37`\n"
"then `exact h` will solve the goal.\n"
"\n"
"### Example\n"
"\n"
"If the goal is `x + 0 = x` then `exact add_zero x` will close the goal.\n"
"\n"
"### Exact needs to be exactly right\n"
"\n"
"Note that `exact add_zero` will *not work* in the previous example;\n"
"for `exact h` to work, `h` has to be *exactly* a proof of the goal.\n"
"`add_zero` is a proof of `‚àÄ n, n + 0 = n` or, if you like,\n"
"a proof of `? + 0 = ?` where `?` needs to be supplied by the user.\n"
"This is in contrast to `rw` and `apply`, which will \\\"guess the inputs\\\"\n"
"if necessary. If the goal is `x + 0 = x` then `rw [add_zero]`\n"
"and `rw [add_zero x]` will both change the goal to `x = x`,\n"
"because `rw` guesses the input to the function `add_zero`."
msgstr ""
"## Descrizione\n"
"\n"
"Se il goal √® una proposizione `P`, `exact h` lo risolver√† se `h` √® una dimostrazione di `P`.\n"
"\n"
"### Esempio\n"
"\n"
"Se il goal √® `x = 37` e tra le ipotesi hai `h : x = 37`\n"
"con `exact h` chiuderai il goal.\n"
"\n"
"### Esempio\n"
"\n"
"Se il goal √® `x + 0 = x`, `exact add_zero x` chiuder√† il goal.\n"
"\n"
"### `exact` deve coincidere esattamente con il goal\n"
"\n"
"√à bene notare che `exact add_zero` *non funzioner√†* nell'esempio di prima;\n"
"come dice il nome, `exact h` ha successo solo se `h` coincide *esattamente* al goal.\n"
"`add_zero` √® la dimostrazione dell'enunciato pi√π generale `‚àÄ n, n + 0 = n` o, con notazione pi√π intuitiva,\n"
"alla dimostrazione di `? + 0 = ?` dove `?` deve essere fornito dall'utente.\n"
"Diversamente da `rw` e `apply`, i quali tentano di \\\"indovinare i loro input\\\"\n"
"quando essi sono assenti, `exact` vuole la pappa pronta. Ad esempio, se il goal √® `x + 0 = x` sia `rw [add_zero]`\n"
"che `rw [add_zero x]` porteranno il goal a `x = x`,\n"
"perch√© `rw` √® in grado di indovinare (o meglio, dedurre dal contesto) gli input della funzione `add_zero`."

#: Game.Levels.Implication.L01exact
msgid ""
"In this world we'll learn how to prove theorems of the form $P\\implies Q$.\n"
"In other words, how to prove theorems of the form \"if $P$ is true, then $Q$ is true.\"\n"
"To do that we need to learn some more tactics.\n"
"\n"
"The `exact` tactic can be used to close a goal which is exactly one of\n"
"the hypotheses. It takes the name of the hypothesis as argument: `exact h`."
msgstr ""
"In questo mondo vedremo come dimostrare teoremi della forma $P\\implies Q$.\n"
"In altre parole, verificheremo frasi della forma \"se $P$ √® vero, allora $Q$ √® vero\".\n"
"Per farlo abbiamo bisogno di qualche tattica in pi√π nel nostro arsenale.\n"
"\n"
"La tattica `exact` pu√≤ essere usata per risolvere un goal che coincide con una\n"
"delle ipotesi. Prende come argomento il nome dell'ipotesi: `exact h`."

#: Game.Levels.Implication.L01exact
msgid "Assuming $x+y=37$ and $3x+z=42$, we have $x+y=37$."
msgstr "Ipotizzando che $x+y=37$ e $3x+z=42$, si ha che $x+y=37$."

#: Game.Levels.Implication.L01exact
msgid "The goal in this level is one of our hypotheses. Solve the goal by executing `exact h1`."
msgstr "Il goal di questo livello √® una delle nostre ipotesi. Risolvilo eseguendo `exact h1`."

#: Game.Levels.Implication.L02exact2
msgid "`exact` practice."
msgstr "esercizi su `exact`."

#: Game.Levels.Implication.L02exact2
msgid ""
"If the goal is not *exactly* a hypothesis, we can sometimes\n"
"use rewrites to fix things up."
msgstr ""
"Se il goal non coincide *esattamente* con una delle ipotesi, possiamo\n"
"provare a renderli uguali con qualche sostituzione."

#: Game.Levels.Implication.L02exact2
msgid "Assuming $0+x=(0+y)+2$, we have $x=y+2$."
msgstr "Ipotizzando che $0+x=(0+y)+2$, si ha che $x=y+2$."

#: Game.Levels.Implication.L02exact2
msgid ""
"You can use `rw [zero_add] at ¬´{h}¬ª` to rewrite at `¬´{h}¬ª` instead\n"
"of at the goal."
msgstr ""
"Puoi eseguire `rw [zero_add] at ¬´{h}¬ª` per sostituire all'interno dell'ipotesi `¬´{h}¬ª` invece che\n"
"nel goal."

#: Game.Levels.Implication.L02exact2
msgid ""
"Do that again!\n"
"\n"
"`rw [zero_add] at ¬´{h}¬ª` tries to fill in\n"
"the arguments to `zero_add` (finding `¬´{x}¬ª`) then it replaces all occurences of\n"
"`0 + ¬´{x}¬ª` it finds. Therefor, it did not rewrite `0 + ¬´{y}¬ª`, yet."
msgstr ""
"Ripeti lo stesso comando!\n"
"\n"
"`rw [zero_add] at ¬´{h}¬ª` ha completato automaticamente\n"
"la chiamata a `zero_add` (trovando l'argomento `¬´{x}¬ª`) e poi ha sostituito tutte le occorrenze di\n"
"`0 + ¬´{x}¬ª` in un solo colpo. Dunque non ha toccato `0 + ¬´{y}¬ª` ancora, perci√≤ dovresti ripetere il comando."

#: Game.Levels.Implication.L02exact2
msgid ""
"Now you could finish with `rw [¬´{h}¬ª]` then `rfl`, but `exact ¬´{h}¬ª`\n"
"does it in one line."
msgstr ""
"Adesso potresti chiudere con `rw [¬´{h}¬ª]` e `rfl`, ma `exact ¬´{h}¬ª`\n"
"fa lo stesso lavoro in una sola riga."

#: Game.Levels.Implication.L02exact2
msgid ""
"Here's a two-line proof:\n"
"```\n"
"repeat rw [zero_add] at h\n"
"exact h\n"
"```"
msgstr ""
"Ecco una dimostrazione di due righe:\n"
"```\n"
"repeat rw [zero_add] at h\n"
"exact h\n"
"```"

#: Game.Levels.Implication.L03apply
msgid "The `apply` tactic."
msgstr "La tattica `apply`."

#: Game.Levels.Implication.L03apply
msgid ""
"## Summary\n"
"\n"
"If `t : P ‚Üí Q` is a proof that $P \\implies Q$, and `h : P` is a proof of `P`,\n"
"then `apply t at h` will change `h` to a proof of `Q`. The idea is that if\n"
"you know `P` is true, then you can deduce from `t` that `Q` is true.\n"
"\n"
"If the *goal* is `Q`, then `apply t` will \\\"argue backwards\\\" and change the\n"
"goal to `P`. The idea here is that if you want to prove `Q`, then by `t`\n"
"it suffices to prove `P`, so you can reduce the goal to proving `P`.\n"
"\n"
"### Example:\n"
"\n"
"`succ_inj x y` is a proof that `succ x = succ y ‚Üí x = y`.\n"
"\n"
"So if you have a hypothesis `h : succ (a + 37) = succ (b + 42)`\n"
"then `apply succ_inj at h` will change `h` to `a + 37 = b + 42`.\n"
"You could write `apply succ_inj (a + 37) (b + 42) at h`\n"
"but Lean is smart enough to figure out the inputs to `succ_inj`.\n"
"\n"
"### Example\n"
"\n"
"If the goal is `a * b = 7`, then `apply succ_inj` will turn the\n"
"goal into `succ (a * b) = succ 7`."
msgstr ""
"## Descrizione\n"
"\n"
"Se `t : P ‚Üí Q` √® una dimostrazione di $P \\implies Q$, e `h : P` √® una dimostrazione di `P`,\n"
"allora `apply t at h` trasformer√† `h` in una dimostrazione di `Q`. L'idea alla base di questo √®\n"
"che se sai che `P` √® vera, allora l'implicazione `t` ti permette di dedurre che `Q` √® vera.\n"
"\n"
"Al contrario, se il *goal* √® `Q`, allora `apply t` \\\"ragioner√† all'indietro\\\" e trasformer√† il\n"
"goal in `P`. √à sempre l'implicazione che ci permette di farlo: `Q` √® garantito da `t`\n"
"se riesci a dimostrare `P`, quindi il goal si riduce a una dimostrazione di `P`.\n"
"\n"
"### Esempio:\n"
"\n"
"`succ_inj x y` √® una dimostrazione di `succ x = succ y ‚Üí x = y` (un'implicazione).\n"
"\n"
"Quindi, se hai l'ipotesi `h : succ (a + 37) = succ (b + 42)`\n"
"allora con `apply succ_inj at h` trasformerai `h` in `a + 37 = b + 42`.\n"
"Puoi anche fornire gli argomenti direttamente `apply succ_inj (a + 37) (b + 42) at h`\n"
"ma Lean fa questo lavoro per noi e capisce da solo cosa deve passare a `succ_inj`.\n"
"\n"
"### Esempio\n"
"\n"
"Se hai il goal `a * b = 7`, con `apply succ_inj` trasformerai il\n"
"goal in `succ (a * b) = succ 7`."

#: Game.Levels.Implication.L03apply
msgid ""
"In this level one of our hypotheses is an *implication*. We can use this\n"
"hypothesis with the `apply` tactic."
msgstr ""
"In questo livello una delle nostre ipotesi √® un'*implicazione*. Possiamo usare\n"
"questa ipotesi con la tattica `apply`."

#: Game.Levels.Implication.L03apply
msgid "If $x=37$ and we know that $x=37\\implies y=42$ then we can deduce $y=42$."
msgstr "Se $x=37$ e abbiamo che $x=37\\implies y=42$ allora possiamo dedurre $y=42$."

#: Game.Levels.Implication.L03apply
msgid "Start with `apply h2 at h1`. This will change `h1` to `y = 42`."
msgstr "Inizia con `apply h2 at h1`. Questo trasformer√† `h1` in `y = 42`."

#: Game.Levels.Implication.L03apply
msgid "Now finish using the `exact` tactic."
msgstr "Adesso chiudi la dimostrazione usando `exact`."

#: Game.Levels.Implication.L04succ_inj
msgid "succ_inj : the successor function is injective"
msgstr "succ_inj : la funzione successore √® iniettiva"

#: Game.Levels.Implication.L04succ_inj
msgid ""
"If `a` and `b` are numbers, then `succ_inj a b` is a proof\n"
"that `succ a = succ b` implies `a = b`. Click on this theorem in the *Peano*\n"
"tab for more information.\n"
"\n"
"Peano had this theorem as an axiom, but in Algorithm World\n"
"we will show how to prove it in Lean. Right now let's just assume it,\n"
"and let's prove $x+1=4 \\implies x=3$ using it. Again, we will proceed\n"
"by manipulating our hypothesis until it becomes the goal. I will\n"
"walk you through this level."
msgstr ""
"Se `a` e `b` sono due numeri, allora `succ_inj a b` √® una dimostrazione\n"
"che `succ a = succ b` implica `a = b`. Clicca su questo teorema nel tab *Peano*\n"
"per maggiori dettagli.\n"
"\n"
"Peano formul√≤ questo teorema come assioma, ma nel Mondo Algoritmi\n"
"vedremo come dimostrarlo su Lean. Per ora lo diamo per scontato,\n"
"e lo usiamo per dimostrare $x+1=4 \\implies x=3$. Procederemo nuovamente\n"
"manipolando un'ipotesi ipotesi per farla coincidere con il goal. Ti seguir√≤\n"
"passo per passo in questo livello."

#: Game.Levels.Implication.L04succ_inj
msgid ""
"# Statement\n"
"\n"
"If $a$ and $b$ are numbers, then\n"
"`succ_inj a b` is the proof that\n"
"$ (\\operatorname{succ}(a) = \\operatorname{succ}(b)) \\implies a=b$.\n"
"\n"
"## More technical details\n"
"\n"
"There are other ways to think about `succ_inj`.\n"
"\n"
"You can think about `succ_inj` itself as a function which takes two\n"
"numbers $$a$$ and $$b$$ as input, and outputs a proof of\n"
"$ ( \\operatorname{succ}(a) = \\operatorname{succ}(b)) \\implies a=b$.\n"
"\n"
"You can think of `succ_inj` itself as a proof; it is the proof\n"
"that `succ` is an injective function. In other words,\n"
"`succ_inj` is a proof of\n"
"$\\forall a, b \\in  \\mathbb{N}, ( \\operatorname{succ}(a) = \\operatorname{succ}(b)) \\implies a=b$.\n"
"\n"
"`succ_inj` was postulated as an axiom by Peano, but\n"
"in Lean it can be proved using `pred`, a mathematically\n"
"pathological function."
msgstr ""
"# Enunciato\n"
"\n"
"Se $a$ e $b$ sono numeri, allora\n"
"`succ_inj a b` √® la dimostrazione che\n"
"$ (\\operatorname{succ}(a) = \\operatorname{succ}(b)) \\implies a=b$.\n"
"\n"
"## Dettagli tecnici\n"
"\n"
"Ci sono diversi modi di interpretare `succ_inj`.\n"
"\n"
"Si pu√≤ pensare a `succ_inj` come una funzione che prende in input due\n"
"numeri $$a$$ e $$b$$, e restituisce una dimostrazione di\n"
"$ ( \\operatorname{succ}(a) = \\operatorname{succ}(b)) \\implies a=b$.\n"
"\n"
"Ma `succ_inj` in s√© e anche una dimostrazione; ovvero la dimostrazione\n"
"che `succ` √® una funzione iniettiva. In termini matematici,\n"
"`succ_inj` √® una dimostrazione di\n"
"$\\forall a, b \\in  \\mathbb{N}, ( \\operatorname{succ}(a) = \\operatorname{succ}(b)) \\implies a=b$.\n"
"\n"
"`succ_inj` fu postulato da Peano come un'assioma, ma\n"
"in Lean pu√≤ essere dimostrato usando `pred`, una funzione che non va\n"
"molto d'accordo con i numeri naturali."

#: Game.Levels.Implication.L04succ_inj Game.Levels.Implication.L05succ_inj2
msgid "If $x+1=4$ then $x=3$."
msgstr "Se $x+1=4$ allora $x=3$."

#: Game.Levels.Implication.L04succ_inj
msgid ""
"Let's first get `h` into the form `succ x = succ 3` so we can\n"
"apply `succ_inj`. First execute `rw [four_eq_succ_three] at h`\n"
"to change the 4 on the right hand side."
msgstr ""
"Prima di tutto portiamo `h` alla forma `succ x = succ 3` in modo da poter applicare\n"
"`succ_inj`. Esegui `rw [four_eq_succ_three] at h`\n"
"per sostituire il 4 nel membro destro."

#: Game.Levels.Implication.L04succ_inj
msgid ""
"Now rewrite `succ_eq_add_one` backwards at `h`\n"
"to get the right hand side."
msgstr ""
"Adesso riscrivi `succ_eq_add_one` all'indietro all'interno di `h`\n"
"per avere il suo membro destro."

#: Game.Levels.Implication.L04succ_inj
msgid ""
"You can put a `‚Üê` in front of any theorem provided to `rw` to rewrite\n"
"the other way around. Look at the docs for `rw` for an explanation. Type `‚Üê` with `\\l`."
msgstr ""
"Ricorda che mettendo `‚Üê` davanti a un teorema che passi a `rw` puoi\n"
"sostituire nel senso opposto. Guarda la documentazione di `rw` per capire meglio il suo funzionamento.\n"
"`‚Üê` si ottiene digitando `\\l`."

#: Game.Levels.Implication.L04succ_inj
msgid "Concretely: `rw [‚Üê succ_eq_add_one] at h`."
msgstr "Sintassi concreta: `rw [‚Üê succ_eq_add_one] at h`."

#: Game.Levels.Implication.L04succ_inj
msgid ""
"Now let's `apply` our new theorem. Execute `apply succ_inj at h`\n"
"to change `h` to a proof of `x = 3`."
msgstr ""
"Ora facciamo l'`apply` del nuovo teorema. Esegui `apply succ_inj at h`\n"
"per trasformare `h` in una dimostrazione di `x = 3`."

#: Game.Levels.Implication.L04succ_inj
msgid "Now finish in one line."
msgstr "Ora concludi in una linea."

#: Game.Levels.Implication.L04succ_inj
msgid ""
"And now we've deduced what we wanted to prove: the goal is one of our assumptions.\n"
"Finish the level with `exact h`."
msgstr ""
"Abbiamo dedotto esattamente ci√≤ che volevamo dimostrare: il goal coincide con una delle ipotesi.\n"
"Completa il livello con `exact h`."

#: Game.Levels.Implication.L04succ_inj
msgid "In the next level, we'll do the same proof but backwards."
msgstr "Nel livello successivo, dimostreremo lo stesso enunciato, al contrario."

#: Game.Levels.Implication.L05succ_inj2
msgid "Arguing backwards"
msgstr "Ragionare all'indietro"

#: Game.Levels.Implication.L05succ_inj2
msgid ""
"In the last level, we manipulated the hypothesis `x + 1 = 4`\n"
"  until it became the goal `x = 3`. In this level we'll manipulate\n"
"  the goal until it becomes our hypothesis! In other words, we\n"
"  will \"argue backwards\". The `apply` tactic can do this too.\n"
"  Again I will walk you through this one (assuming you're in\n"
"  command line mode)."
msgstr ""
"Nell'ultimo livello abbiamo manipolato l'ipotesi `x + 1 = 4`\n"
"  per farla coincidere con il goal `x = 3`. In questo livello manipoleremo\n"
"  il goal per farlo combaciare con una delle ipotesi! Si puo dire che\n"
"  \"ragioneremo all'indietro\". √à ancora la tattica `apply` che ce lo consente.\n"
"  Ti guider√≤ io anche in questa dimostrazione (assicurati di essere in modalit√†\n"
"  interattiva)."

#: Game.Levels.Implication.L05succ_inj2
msgid "Start with `apply succ_inj` to apply `succ_inj` to the *goal*."
msgstr "Parti con `apply succ_inj` per applicare `succ_inj` *sul goal*."

#: Game.Levels.Implication.L05succ_inj2
msgid ""
"Applying a proof of $P\\implies Q$ to the *goal* changes $Q$ to $P$.\n"
"Now try `rw [succ_eq_add_one]` to make the goal more like the hypothesis."
msgstr ""
"Applicando $P\\implies Q$ al *goal* ci siamo mossi da $Q$ a $P$.\n"
"Ora esegui `rw [succ_eq_add_one]` per iniziare a portare il goal a una delle ipotesi."

#: Game.Levels.Implication.L05succ_inj2
msgid ""
"Now rewrite `four_eq_succ_three` backwards to make the goal\n"
"equal to the hypothesis."
msgstr ""
"Ora sostituisci `four_eq_succ_three` all'indietro per eguagliare il\n"
"goal all'ipotesi."

#: Game.Levels.Implication.L05succ_inj2
msgid "You can now finish with `exact h`."
msgstr "Concludi la dimostrazione con `exact h`."

#: Game.Levels.Implication.L05succ_inj2
msgid ""
"Many people find `apply t at h` easy, but some find `apply t` confusing.\n"
"If you find it confusing, then just argue forwards.\n"
"\n"
"You can read more about the `apply` tactic in its documentation, which you can view by\n"
"clicking on the tactic in the list on the right."
msgstr ""
"Molte persone trovano pi√π facile ragionare in avanti con `apply t at h`, mentre ad alcuni ragionare all'indietro con `apply t` confonde le idee.\n"
"Se confonde le idee anche a te, puoi sempre ragionare in avanti, i due metodi sono equivalenti.\n"
"\n"
"Trovi pi√π informazioni sulla tattica `apply` nella sua documentazione, a cui puoi accedere\n"
"cliccando sul suo nome nell'elenco di tattiche a destra."

#: Game.Levels.Implication.L06intro
msgid "intro"
msgstr "intro"

#: Game.Levels.Implication.L06intro
msgid ""
"## Summary\n"
"\n"
"If the goal is `P ‚Üí Q`, then `intro h` will introduce `h : P` as a hypothesis,\n"
"and change the goal to `Q`. Mathematically, it says that to prove $P \\implies Q$,\n"
"we can assume $P$ and then prove $Q$.\n"
"\n"
"### Example:\n"
"\n"
"If your goal is `x + 1 = y + 1 ‚Üí x = y` (the way Lean writes $x+1=y+1 \\implies x=y$)\n"
"then `intro h` will give you a hypothesis $x+1=y+1$ named `h`, and the goal\n"
"will change to $x=y$."
msgstr ""
"## Descrizione\n"
"\n"
"Se il goal √® `P ‚Üí Q`, allora `intro h` introdurr√† `h : P` come ipotesi,\n"
"e lascer√† nel goal solo `Q`. Nella matematica, per dimostrare l'implicazione $P \\implies Q$,\n"
"possiamo dare per vero $P$ e dimostrare $Q$.\n"
"\n"
"### Ad esempio:\n"
"\n"
"Se il goal √® `x + 1 = y + 1 ‚Üí x = y` (codice Lean per $x+1=y+1 \\implies x=y$)\n"
"allora `intro h` creer√† un'ipotesi $x+1=y+1$ con nome `h`, e il goal\n"
"diventer√† $x=y$."

#: Game.Levels.Implication.L06intro
msgid ""
"We have seen how to `apply` theorems and assumptions\n"
"of the form `P ‚Üí Q`. But what if our *goal* is of the form `P ‚Üí Q`?\n"
"To prove this goal, we need to know how to say \"let's assume `P` and deduce `Q`\"\n"
"in Lean. We do this with the `intro` tactic."
msgstr ""
"Abbiamo visto come fare `apply` di teoremi e ipotesi\n"
"della forma `P ‚Üí Q`. Ma come ci comportiamo se √® il *goal* ad avere la forma `P ‚Üí Q`?\n"
"Per dimostrare questo tipo di goal, ci serve un modo per dire a Lean \"supponiamo `P` e deduciamo `Q`\".\n"
"Lo possiamo fare con la tattica `intro`."

#: Game.Levels.Implication.L06intro
msgid "$x=37\\implies x=37$."
msgstr "$x=37\\implies x=37$."

#: Game.Levels.Implication.L06intro
msgid "Start with `intro h` to assume the hypothesis and call its proof `h`."
msgstr "Comincia eseguendo `intro h` per introdurre l'ipotesi nel contesto e darle il nome `h`."

#: Game.Levels.Implication.L06intro
msgid "Now `exact h` finishes the job."
msgstr "Ora concludi con `exact h`."

#: Game.Levels.Implication.L07intro2
msgid "intro practice"
msgstr "esercizi su intro"

#: Game.Levels.Implication.L07intro2
msgid ""
"Let's see if you can use the tactics we've learnt to prove $x+1=y+1\\implies x=y$.\n"
"Try this one by yourself; if you need help then click on \"Show more help!\"."
msgstr ""
"Mettiti alla prova applicando le tattiche che abbiamo appena visto per dimostrare $x+1=y+1\\implies x=y$.\n"
"Cerca di dimostrarlo da solo; se ti perdi e hai bisogno di una mano clicca su \"Aiutami!\"."

#: Game.Levels.Implication.L07intro2
msgid "$x+1=y+1 \\implies x=y$."
msgstr "$x+1=y+1 \\implies x=y$."

#: Game.Levels.Implication.L07intro2
msgid "Start with `intro h` to assume the hypothesis."
msgstr "Inizia con `intro h` per supporre l'ipotesi."

#: Game.Levels.Implication.L07intro2
msgid ""
"Now `repeat rw [‚Üê succ_eq_add_one] at h` is the quickest way to\n"
"change `succ x = succ y`."
msgstr ""
"Adesso puoi fare `repeat rw [‚Üê succ_eq_add_one] at h` per fare due sostituzioni in un colpo\n"
"e avrai `succ x = succ y`."

#: Game.Levels.Implication.L07intro2
msgid "Now `apply succ_inj at h` to cancel the `succ`s."
msgstr "Ora esegui `apply succ_inj at h` per togliere i `succ`."

#: Game.Levels.Implication.L07intro2
msgid "Now `rw [h]` then `rfl` works, but `exact h` is quicker."
msgstr "Ora potresti usare `rw [h]` e `rfl` in successione, ma `exact h` √® pi√π elegante."

#: Game.Levels.Implication.L07intro2
msgid ""
"Here's a completely backwards proof:\n"
"```\n"
"intro h\n"
"apply succ_inj\n"
"repeat rw [succ_eq_add_one]\n"
"exact h\n"
"```"
msgstr ""
"Ecco una dimostrazione che procede all'indietro:\n"
"```\n"
"intro h\n"
"apply succ_inj\n"
"repeat rw [succ_eq_add_one]\n"
"exact h\n"
"```"

#: Game.Levels.Implication.L08ne
msgid "‚â†"
msgstr "‚â†"

#: Game.Levels.Implication.L08ne
msgid ""
"We still can't prove `2 + 2 ‚â† 5` because we have not talked about the\n"
"definition of `‚â†`. In Lean, `a ‚â† b` is *notation* for `a = b ‚Üí False`.\n"
"Here `False` is a generic false proposition, and `‚Üí` is Lean's notation\n"
"for \"implies\". In logic we learn\n"
"that `True ‚Üí False` is false, but `False ‚Üí False` is true. Hence\n"
"`X ‚Üí False` is the logical opposite of `X`.\n"
"\n"
"Even though `a ‚â† b` does not look like an implication,\n"
"you should treat it as an implication. The next two levels will show you how.\n"
"\n"
"`False` is a goal which you cannot deduce from a consistent set of assumptions!\n"
"So if your goal is `False` then you had better hope that your hypotheses\n"
"are contradictory, which they are in this level."
msgstr ""
"Non possiamo ancora dimostrare `2 + 2 ‚â† 5` perch√© non abbiamo ancora dato la\n"
"definizione dell'operatore `‚â†`. In Lean, `a ‚â† b` √® *notazione* per `a = b ‚Üí False`.\n"
"`False` √® la proposizione falsa pi√π banale, e `‚Üí` √® la notazione di Lean\n"
"per l'operatore \"implica\". Dalla tabella della verit√† dell'implicazione sappiamo\n"
"che `True ‚Üí False` √® falso, mentre `False ‚Üí False` √® vero. Quindi\n"
"`X ‚Üí False` equivale alla negazione logica di `X`.\n"
"\n"
"Non si √® abituati a vedere `a ‚â† b` come un'implicazione, ma\n"
"in Lean √® comodo trattarla come tale. I prossimi due livelli ti faranno vedere come.\n"
"\n"
"`False` √® un goal insoddisfacibile, impossibile da dedurre da un insieme consistente di ipotesi!\n"
"Quindi se ti capita `False` come goal, puoi solo sperare di avere una contraddizione tra le\n"
"tue ipotesi, come accade in questo livello."

#: Game.Levels.Implication.L08ne
msgid "If $x=y$ and $x \\neq y$ then we can deduce a contradiction."
msgstr "Se $x=y$ e $x \\neq y$ allora possiamo dedurre una contraddizione."

#: Game.Levels.Implication.L08ne
msgid ""
"Remember that `h2` is a proof of `x = y ‚Üí False`. Try\n"
"`apply`ing `h2` either `at h1` or directly to the goal."
msgstr ""
"Ricorda che `h2` √® la dimostrazione di `x = y ‚Üí False`. Fai\n"
"l'`apply` di `h2` con `at h1` o direttamente sul goal."

#: Game.Levels.Implication.L08ne
msgid "`a ‚â† b` is *notation* for `(a = b) ‚Üí False`.\n"
"\n"
"The reason this is mathematically\n"
"valid is that if `P` is a true-false statement then `P ‚Üí False`\n"
"is the logical opposite of `P`. Indeed `True ‚Üí False` is false,\n"
"and `False ‚Üí False` is true!\n"
"\n"
"The upshot of this is that use can treat `a ‚â† b` in exactly\n"
"the same way as you treat any implication `P ‚Üí Q`. For example,\n"
"if your *goal* is of the form `a ‚â† b` then you can make progress\n"
"with `intro h`, and if you have a hypothesis `h` of the\n"
"form `a ‚â† b` then you can `apply h at h1` if `h1` is a proof\n"
"of `a = b`."
msgstr ""
"`a ‚â† b` √® *notazione* per `(a = b) ‚Üí False`.\n"
"\n"
"Questa interpretazione √® valida in matematica\n"
"perch√© se `P` √® una proposizione vero-falso allora `P ‚Üí False`\n"
"√® la negazione logica di `P`. Infatti `True ‚Üí False` √® falso,\n"
"e `False ‚Üí False` √® vero!\n"
"\n"
"Il vantaggio di questa notazione √® che possiamo trattare una disuguaglianza `a ‚â† b`\n"
"come se fosse un implicazione `P ‚Üí Q`, che sappiamo gi√† come manipolare. Ad esempio,\n"
"se il tuo *goal* √® una disuguaglianza `a ‚â† b`, puoi fare progresso\n"
"con `intro h`, e se un'ipotesi `h` √® una disuguaglianza\n"
"`a ‚â† b` allora puoi fare `apply h at h1` se `h1` √® la prova di\n"
"di `a = b`."

#: Game.Levels.Implication.L08ne
msgid "Remember, `x ‚â† y` is *notation* for `x = y ‚Üí False`."
msgstr "Ricorda, `x ‚â† y` √® *zucchero sintattico* per `x = y ‚Üí False`."

#: Game.Levels.Implication.L09zero_ne_succ
msgid "zero_ne_succ"
msgstr "zero_ne_succ"

#: Game.Levels.Implication.L09zero_ne_succ
msgid "`zero_ne_succ n` is the proof that `0 ‚â† succ n`.\n"
"\n"
"In Lean, `a ‚â† b` is *defined to mean* `a = b ‚Üí False`. Hence\n"
"`zero_ne_succ n` is really a proof of `0 = succ n ‚Üí False`.\n"
"Here `False` is a generic false statement. This means that\n"
"you can `apply zero_ne_succ at h` if `h` is a proof of `0 = succ n`."
msgstr ""
"`zero_ne_succ n` √® la dimostrazione che `0 ‚â† succ n`.\n"
"\n"
"In Lean, `a ‚â† b` √® *definito come* `a = b ‚Üí False`. Dunque\n"
"`zero_ne_succ n` √® in realt√† la dimostrazione di `0 = succ n ‚Üí False`.\n"
"Qui `False` √® la proposizione false pi√π banale. Essendo un'implicazione\n"
"puoi applicarla ad una `h` che dimostra `0 = succ n` con `apply zero_ne_succ at h`."

#: Game.Levels.Implication.L09zero_ne_succ
msgid "As warm-up for `2 + 2 ‚â† 5` let's prove `0 ‚â† 1`. To do this we need to\n"
"introduce Peano's last axiom `zero_ne_succ n`, a proof that `0 ‚â† succ n`.\n"
"To learn about this result, click on it in the list of lemmas on the right."
msgstr ""
"Come riscaldamento per il boss `2 + 2 ‚â† 5` dimostriamo `0 ‚â† 1`. A tal fine dobbiamo introdurre\n"
"l'ultimo assioma di Peano, `zero_ne_succ n`, che dimostra che `0 ‚â† succ n`.\n"
"Per capire meglio questo risultato, puoi consultare la sua voce nella lista di lemmi a destra."

#: Game.Levels.Implication.L09zero_ne_succ
msgid "`zero_ne_one` is a proof of `0 ‚â† 1`."
msgstr "`zero_ne_one` √® la dimostrazione di `0 ‚â† 1`."

#: Game.Levels.Implication.L09zero_ne_succ
msgid "$0\\neq1$."
msgstr "$0\\neq1$."

#: Game.Levels.Implication.L09zero_ne_succ
msgid "Start with `intro h`."
msgstr "Inizia con `intro h`."

#: Game.Levels.Implication.L09zero_ne_succ
msgid "Now change `1` to `succ 0` in `h`."
msgstr "Ora riscrivi `1` in `succ 0` in `h`."

#: Game.Levels.Implication.L09zero_ne_succ
msgid "Now you can `apply zero_ne_succ at h`."
msgstr "Ora puoi fare `apply zero_ne_succ at h`."

#: Game.Levels.Implication.L09zero_ne_succ
#: Game.Levels.AdvAddition.L01add_right_cancel
msgid "Nice!"
msgstr "Ottimo!"

#: Game.Levels.Implication.L10one_ne_zero
msgid "1 ‚â† 0"
msgstr "1 ‚â† 0"

#: Game.Levels.Implication.L10one_ne_zero
msgid "We know `zero_ne_succ n` is a proof of `0 = succ n ‚Üí False` -- but what\n"
"if we have a hypothesis `succ n = 0`? It's the wrong way around!\n"
"\n"
"The `symm` tactic changes a goal `x = y` to `y = x`, and a goal `x ‚â† y`\n"
"to `y ‚â† x`. And `symm at h`\n"
"does the same for a hypothesis `h`. We've proved $0 \\neq 1$ and called\n"
"the proof `zero_ne_one`; now try proving $1 \\neq 0$."
msgstr ""
"Abbiamo visto che `zero_ne_succ n` √® la dimostrazione di `0 = succ n ‚Üí False` --  ma come possiamo applicarla\n"
"all'ipotesi `succ n = 0`? √à la stessa uguaglianza, solo con i due lati scambiati!\n"
"\n"
"La tattica `symm` ci viene in soccorso: riscrive un goal `x = y` in `y = x`, e un goal `x ‚â† y`\n"
"in `y ‚â† x`. `symm at h`\n"
"√® la versione che opera sull'ipotesi `h`. Abbiamo dimostrato poco fa $0 \\neq 1$ e chiamato\n"
"la sua dimostrazione `zero_ne_one`; ora prova a dimostrare $1 \\neq 0$."

#: Game.Levels.Implication.L10one_ne_zero
msgid "## Summary\n"
"\n"
"The `symm` tactic will change a goal or hypothesis of\n"
"the form `X = Y` to `Y = X`. It will also work on `X ‚â† Y`\n"
"and on `X ‚Üî Y`.\n"
"\n"
"### Example\n"
"\n"
"If the goal is `2 + 2 = 4` then `symm` will change it to `4 = 2 + 2`.\n"
"\n"
"### Example\n"
"\n"
"If `h : 2 + 2 ‚â† 5` then `symm at h` will change `h` to `5 ‚â† 2 + 2`."
msgstr ""
"## Descrizione\n"
"\n"
"La tattica `symm` trasformer√† un goal o un'ipotesi della forma di\n"
"un'uguaglianza `X = Y` in `Y = X`. Funziona anche sulla disuguaglianza `X ‚â† Y`\n"
"e sull'equivalenza `X ‚Üî Y`.\n"
"\n"
"### Esempio\n"
"\n"
"Se il goal √® `2 + 2 = 4`, `symm` lo trasformer√† in `4 = 2 + 2`.\n"
"\n"
"### Esempio\n"
"\n"
"Se hai `h : 2 + 2 ‚â† 5` allora `symm at h` trasformer√† `h` in `5 ‚â† 2 + 2`."

#: Game.Levels.Implication.L10one_ne_zero
msgid "`one_ne_zero` is a proof that `1 ‚â† 0`."
msgstr "`one_ne_zero` √® la dimostrazione di `1 ‚â† 0`."

#: Game.Levels.Implication.L10one_ne_zero
msgid "$1\\neq0$."
msgstr "$1\\neq0$."

#: Game.Levels.Implication.L10one_ne_zero
msgid "What do you think of this two-liner:\n"
"```\n"
"symm\n"
"exact zero_ne_one\n"
"```\n"
"\n"
"`exact` doesn't just take hypotheses, it will eat any proof which exists\n"
"in the system."
msgstr ""
"Guarda il mio two-liner:\n"
"```\n"
"symm\n"
"exact zero_ne_one\n"
"```\n"
"\n"
"`exact` non prende soltanto ipotesi, puoi passargli qualsiasi dimostrazione\n"
"definita nel gioco."

#: Game.Levels.Implication.L11two_add_two_ne_five
msgid "2 + 2 ‚â† 5"
msgstr "2 + 2 ‚â† 5"

#: Game.Levels.Implication.L11two_add_two_ne_five
msgid "2 + 2 ‚â† 5 is boring to prove in full, given only the tools we have currently.\n"
"To make it a bit less painful, I have unfolded all of the numerals for you.\n"
"See if you can use `zero_ne_succ` and `succ_inj` to prove this."
msgstr ""
"2 + 2 ‚â† 5 √® noioso da dimostrare per intero con le tattiche che abbiamo a disposizione al momento.\n"
"Per salvarti un po' di lavoro, ho espanso in anticipo tutti i numeri per te.\n"
"Completa la dimostrazione utilizzando `zero_ne_succ` e `succ_inj`."

#: Game.Levels.Implication.L11two_add_two_ne_five
msgid "$2+2‚â†5$."
msgstr "$2+2‚â†5$."

#: Game.Levels.Implication.L11two_add_two_ne_five
msgid ""
"Here's my proof:\n"
"```\n"
"intro h\n"
"rw [add_succ, add_succ, add_zero] at h\n"
"repeat apply succ_inj at h\n"
"apply zero_ne_succ at h\n"
"exact h\n"
"```\n"
"\n"
"Even though Lean is a theorem prover, right now it's pretty clear that we have not\n"
"developed enough material to make it an adequate calculator. In Algorithm\n"
"World, a more computer-sciency world, we will develop machinery which makes\n"
"questions like this much easier, and goals like $20 + 20 ‚â† 41$ feasible.\n"
"Alternatively you can do more mathematics in Advanced Addition World, where we prove\n"
"the lemmas needed to get a working theory of inequalities. Click \"Leave World\" and\n"
"decide your route."
msgstr ""
"Ecco la mia dimostrazione:\n"
"```\n"
"intro h\n"
"rw [add_succ, add_succ, add_zero] at h\n"
"repeat apply succ_inj at h\n"
"apply zero_ne_succ at h\n"
"exact h\n"
"```\n"
"\n"
"Lean √® un theorem prover, ma non abbiamo ancora parlato del fatto che pu√≤ anche fungere da linguaggio di programmazione. Nel Mondo Algoritmi,\n"
"un mondo dal carattere pi√π informatico, svilupperemo programmi per automatizzare le\n"
"dimostrazioni, grazie ai quali potremo dimostrare $20 + 20 ‚â† 41$ senza diventare matti.\n"
"In alternativa, puoi proseguire lungo il filo matematico nel Mondo Addizione Avanzata, dove dimostreremo\n"
"i lemmi che supportano la teoria delle disuguaglianze. Clicca su \"Abbandona mondo\" e\n"
"scegli la tua strada."

#: Game.Levels.Implication
msgid "Implication World"
msgstr "Mondo Implicazione"

#: Game.Levels.Implication
msgid ""
"We've proved that $2+2=4$; in Implication World we'll learn\n"
"how to prove $2+2\\neq 5$.\n"
"\n"
"In Addition World we proved *equalities* like $x + y = y + x$.\n"
"In this second tutorial world we'll learn some new tactics,\n"
"enabling us to prove *implications*\n"
"like $x+1=4 \\implies x=3.$\n"
"\n"
"We'll also learn two new fundamental facts about\n"
"natural numbers, which Peano introduced as axioms.\n"
"\n"
"Click on \"Start\" to proceed."
msgstr ""
"Abbiamo dimostrato $2+2=4$; nel Mondo Implicazione vedremo\n"
"come dimostrare $2+2\\neq 5$.\n"
"\n"
"Nel Mondo Addizione abbiamo dimostrato *uguaglianze* del tipo $x + y = y + x$.\n"
"In questo mondo apprenderai le tattiche\n"
"che ci permettono di dimostrare le *implicazioni*\n"
"come $x+1=4 \\implies x=3.$\n"
"\n"
"Imparerai inoltre due nuovi fatti fondamentali sui\n"
"numeri naturali, che Peano postul√≤ come assiomi.\n"
"\n"
"Premi su \"Via\" per iniziare."

#: Game.Levels.Algorithm.L01add_left_comm
msgid "add_left_comm"
msgstr "add_left_comm"

#: Game.Levels.Algorithm.L01add_left_comm
msgid "`add_left_comm a b c` is a proof that `a + (b + c) = b + (a + c)`."
msgstr "`add_left_comm a b c` √® la dimostrazione di `a + (b + c) = b + (a + c)`."

#: Game.Levels.Algorithm.L01add_left_comm
msgid ""
"Having to rearrange variables manually using commutativity and\n"
"associativity is very tedious. We start by reminding you of this. `add_left_comm`\n"
"is a key component in the first algorithm which we'll explain, but we need\n"
"to prove it manually.\n"
"\n"
"Remember that you can do precision commutativity rewriting\n"
"with things like `rw [add_comm b c]`. And remember that\n"
"`a + b + c` means `(a + b) + c`."
msgstr ""
"Ricollocare le variabili manualmente usando la commutativit√† e\n"
"l'associativit√† √® un lavoraccio. Ma possiamo fare di meglio. `add_left_comm`\n"
"√® un lemma chiave del primo algoritmo che spiegheremo, ma prima di impiegarlo dobbiamo\n"
"dimostrarlo.\n"
"\n"
"Ricorda che puoi applicare la commutativit√† precisando le \n"
"variabili che vuoi scambiare, scrivendo tipo `rw [add_comm b c]`. Ricorda anche che\n"
"`a + b + c` sta per `(a + b) + c`."

#: Game.Levels.Algorithm.L01add_left_comm
msgid "If $a, b, c$ are numbers, then $a+(b+c)=b+(a+c)$."
msgstr "Se $a, b, c$ sono dei numeri, allora $a+(b+c)=b+(a+c)$."

#: Game.Levels.Algorithm.L02add_algo1
msgid "making life easier"
msgstr "semplifichiamoci la vita"

#: Game.Levels.Algorithm.L02add_algo1
msgid ""
"In some later worlds, we're going to see some much nastier levels,\n"
"like `(a + a + 1) + (b + b + 1) = (a + b + 1) + (a + b + 1)`.\n"
"Brackets need to be moved around, and variables need to be swapped.\n"
"\n"
"In this level, `(a + b) + (c + d) = ((a + c) + d) + b`,\n"
"let's forget about the brackets and just think about\n"
"the variable order.\n"
"To turn `a+b+c+d` into `a+c+d+b` we need to swap `b` and `c`,\n"
"and then swap `b` and `d`. But this is easier than you\n"
"think with `add_left_comm`."
msgstr ""
"Nei mondi successivi ci sono livelli molto pi√π brutti\n"
"come `(a + a + 1) + (b + b + 1) = (a + b + 1) + (a + b + 1)`.\n"
"Qui le parentesi vanno spostate, e le variabili vanno scambiate tra di loro.\n"
"\n"
"In questo livello, `(a + b) + (c + d) = ((a + c) + d) + b`,\n"
"dimentichiamoci delle parentesi e concentriamoci solamente\n"
"sull'ordine delle variabili.\n"
"Per portare `a+b+c+d` a `a+c+d+b` dobbiamo scambiare `b` con `c`,\n"
"e poi scambiare `b` con `d`. Questo √® pi√π facile di quanto\n"
"pensi tramite `add_left_comm`."

#: Game.Levels.Algorithm.L02add_algo1
msgid ""
"If $a, b$, $c$ and $d$ are numbers, we have\n"
"$(a + b) + (c + d) = ((a + c) + d) + b.$"
msgstr ""
"Se $a, b$, $c$ e $d$ sono numeri, si ha che\n"
"$(a + b) + (c + d) = ((a + c) + d) + b.$"

#: Game.Levels.Algorithm.L02add_algo1
msgid "Start with `repeat rw [add_assoc]` to push all the brackets to the right."
msgstr "Inizia con `repeat rw [add_assoc]` per portare tutte le parentesi a destra."

#: Game.Levels.Algorithm.L02add_algo1
msgid ""
"Now use `rw [add_left_comm b c]` to switch `b` and `c` on the left\n"
"hand side."
msgstr ""
"Ora fai `rw [add_left_comm b c]` per scambiare `b` con `c` a sinistra\n"
"dell'uguale."

#: Game.Levels.Algorithm.L02add_algo1
msgid "Finally use a targetted `add_comm` to switch `b` and `d`"
msgstr "Infine fai un rewrite mirato di `add_comm` per scambiare `b` con `d`"

#: Game.Levels.Algorithm.L02add_algo1
msgid "`rw [add_comm b d]`."
msgstr "`rw [add_comm b d]`."

#: Game.Levels.Algorithm.L02add_algo1
msgid ""
"So that's the algorithm: now let's use automation to perform it\n"
"automatically."
msgstr ""
"Questo √® l'algoritmo: ora cerchiamo di automatizzarlo con\n"
"l'automazione di Lean."

#: Game.Levels.Algorithm.L03add_algo2
msgid "making life simple"
msgstr "semplifichiamoci la vita"

#: Game.Levels.Algorithm.L03add_algo2
msgid ""
"# Overview\n"
"\n"
"Lean's simplifier, `simp`, will rewrite every lemma\n"
"tagged with `simp` and every lemma fed to it by the user, as much as it can.\n"
"Furthermore, it will attempt to order variables into an internal order if fed\n"
"lemmas such as `add_comm`, so that it does not go into an infinite loop."
msgstr ""
"# Overview\n"
"\n"
"Il semplificatore di Lean, `simp`, riscriver√† ogni\n"
"lemma con il tag `simp` e ogni lemma dato dall'utente, finch√© pu√≤.\n"
"Non solo, cercher√† di ordinare le variabili secondo la sua logica interna affinch√© non entri\n"
"in un loop infinito quando utilizza lemmi come `add_comm`"

#: Game.Levels.Algorithm.L03add_algo2
msgid ""
"Lean's simplifier, `simp`, is \"`rw` on steroids\". It will rewrite every lemma\n"
"tagged with `simp` and every lemma fed to it by the user, as much as it can.\n"
"\n"
"This level is not a level which you want to solve by hand.\n"
"Get the simplifier to solve it for you."
msgstr ""
"Il semplificatore Lean, `simp`, pu√≤ essere considerato una versione dopata di `rw`. Esso riscriver√† ogni lemma\n"
"taggato `simp` e ogni lemma passato dall'utente fin tanto c'√® qualcosa da riscrivere, pi√π che pu√≤.\n"
"\n"
"Questo √® un livello che non vorresti risolvere a mano.\n"
"Fai fare il lavoro sporco al semplificatore."

#: Game.Levels.Algorithm.L03add_algo2 Game.Levels.Algorithm.L04add_algo3
msgid ""
"If $a, b,\\ldots h$ are arbitrary natural numbers, we have\n"
"$(d + f) + (h + (a + c)) + (g + e + b) = a + b + c + d + e + f + g + h$."
msgstr ""
"Se $a, b,\\ldots h$ sono numeri naturali qualsiasi, si ha che\n"
"$(d + f) + (h + (a + c)) + (g + e + b) = a + b + c + d + e + f + g + h$."

#: Game.Levels.Algorithm.L03add_algo2
msgid "Solve this level in one line with `simp only [add_assoc, add_left_comm, add_comm]`"
msgstr "Completa questo livello in un'unica riga con `simp only [add_assoc, add_left_comm, add_comm]`"

#: Game.Levels.Algorithm.L03add_algo2
msgid "Let's now make our own tactic to do this."
msgstr "Ora creiamo la nostra tattica per fare qualcosa di simile."

#: Game.Levels.Algorithm.L04add_algo3
msgid "the simplest approach"
msgstr "l'approccio pi√π semplice"

#: Game.Levels.Algorithm.L04add_algo3
msgid ""
"# Overview\n"
"\n"
"Our home-made tactic `simp_add` will solve arbitrary goals of\n"
"the form `a + (b + c) + (d + e) = e + (d + (c + b)) + a`."
msgstr ""
"# Overview\n"
"\n"
"La nostra tattica casalinga `simp_add` risolver√† qualsiasi goal\n"
"del tipo `a + (b + c) + (d + e) = e + (d + (c + b)) + a`."

#: Game.Levels.Algorithm.L04add_algo3
msgid ""
"You can make your own tactics in Lean.\n"
"This code here\n"
"```\n"
"macro \"simp_add\" : tactic => `(tactic|(\n"
"  simp only [add_assoc, add_left_comm, add_comm]))\n"
"```\n"
"was used to create a new tactic `simp_add`, which runs\n"
"`simp only [add_assoc, add_left_comm, add_comm]`.\n"
"Try running `simp_add` to solve this level!"
msgstr ""
"Puoi creare le tue tattiche personalizzate su Lean.\n"
"Con questo codice\n"
"```\n"
"macro \"simp_add\" : tattica => `(tattica|(\n"
"  simp only [add_assoc, add_left_comm, add_comm]))\n"
"```\n"
"abbiamo creato la nuova tattica `simp_add`, che esegue\n"
"`simp only [add_assoc, add_left_comm, add_comm]`.\n"
"Prova ad eseguire `simp_add` per risolvere questo livello!"

#: Game.Levels.Algorithm.L04add_algo3
msgid ""
"Let's now move on to a more efficient approach to questions\n"
"involving numerals, such as `20 + 20 = 40`."
msgstr ""
"Adesso vediamo un metodo pi√π efficiente per risolvere i\n"
"lemmi che contengono numeri, come `20 + 20 = 40`."

#: Game.Levels.Algorithm.L05pred
msgid "pred"
msgstr "pred"

#: Game.Levels.Algorithm.L05pred
msgid ""
"We now start work on an algorithm to do addition more efficiently. Recall that\n"
"we defined addition by recursion, saying what it did on `0` and successors.\n"
"It is an axiom of Lean that recursion is a valid\n"
"way to define functions from types such as the naturals.\n"
"\n"
"Let's define a new function `pred` from the naturals to the naturals, which\n"
"attempts to subtract 1 from the input. The definition is this:\n"
"\n"
"```\n"
"pred 0 := 37\n"
"pred (succ n) := n\n"
"```\n"
"\n"
"We cannot subtract one from 0, so we just return a junk value. As well as this\n"
"definition, we also create a new lemma `pred_succ`, which says that `pred (succ n) = n`.\n"
"Let's use this lemma to prove `succ_inj`, the theorem which\n"
"Peano assumed as an axiom and which we have already used extensively without justification."
msgstr ""
"Ora svilupperemo un algoritmo che ci permette di svolgere le addizioni in maniera pi√π efficiente. Se ricordi,\n"
"abbiamo definito l'addizione tramite la ricorsione, definendo il suo comportamento su `0` e sul successore.\n"
"Uno degli assiomi di Lean dice proprio che la ricorsione √® un metodo valido\n"
"per definire funzioni su tipi di dato induttivi, come i numeri naturali.\n"
"\n"
"Definiamo una nuova funzione `pred` dai naturali ai naturali, che\n"
"tenta di sottrarre 1 dall'input. La definizione √® la seguente:\n"
"\n"
"```\n"
"pred 0 := 37\n"
"pred (succ n) := n\n"
"```\n"
"\n"
"Non potendo sottrarre uno da 0, in tal caso restituiamo un valore spazzatura. In aggiunta a questa\n"
"definizione, creiamo un nuovo lemma `pred_succ` che dice `pred (succ n) = n`.\n"
"Usiamo subito questo lemma per dimostrare `succ_inj`, il teorema che\n"
"Peano postul√≤ come assioma e che abbiamo usato estensivamente finora senza mai motivarlo."

#: Game.Levels.Algorithm.L05pred
msgid "`pred_succ n` is a proof of `pred (succ n) = n`."
msgstr "`pred_succ n` √® la dimostrazione di `pred (succ n) = n`."

#: Game.Levels.Algorithm.L05pred
msgid "If $\\operatorname{succ}(a)=\\operatorname{succ}(b)$ then $a=b$."
msgstr "Se $\\operatorname{succ}(a)=\\operatorname{succ}(b)$ allora $a=b$."

#: Game.Levels.Algorithm.L05pred
msgid "Start with `rw [‚Üê pred_succ a]` and take it from there."
msgstr "Inizia con `rw [‚Üê pred_succ a]` e prosegui da solo."

#: Game.Levels.Algorithm.L05pred
msgid ""
"Nice! You've proved `succ_inj`!\n"
"Let's now prove Peano's other axiom, that successors can't be $0$."
msgstr ""
"Bene! Hai dimostrato `succ_inj`!\n"
"Ora dimostriamo l'altro assioma di Peano, ossia che un successore non pu√≤ essere $0$."

#: Game.Levels.Algorithm.L06is_zero
msgid "is_zero"
msgstr "is_zero"

#: Game.Levels.Algorithm.L06is_zero
msgid ""
"We define a function `is_zero` thus:\n"
"\n"
"```\n"
"is_zero 0 := True\n"
"is_zero (succ n) := False\n"
"```\n"
"\n"
"We also create two lemmas, `is_zero_zero` and `is_zero_succ n`, saying that `is_zero 0 = True`\n"
"and `is_zero (succ n) = False`. Let's use these lemmas to prove `succ_ne_zero`, Peano's\n"
"Last Axiom. Actually, we have been using `zero_ne_succ` before, but it's handy to have\n"
"this opposite version too, which can be proved in the same way. Note: you can\n"
"cheat here by using `zero_ne_succ` but the point of this world is to show\n"
"you how to *prove* results like that.\n"
"\n"
"If you can turn your goal into `True`, then the `trivial` tactic will solve it."
msgstr ""
"Definiamo la funzione `is_zero` cos√¨:\n"
"\n"
"```\n"
"is_zero 0 := True\n"
"is_zero (succ n) := False\n"
"```\n"
"\n"
"E creiamo due lemmi associati, `is_zero_zero` e `is_zero_succ n`, che dicono che `is_zero 0 = True`\n"
"e `is_zero (succ n) = False`. Usiamo questi due lemmi per dimostrare `succ_ne_zero`, l'ultimo assioma di\n"
"Peano. Pu√≤ sembrare ripetitivo perch√© abbiamo gi√† `zero_ne_succ` nel nostro arsenale, ma √® comodo avere anche\n"
"la versione opposta, la cui dimostrazione √® identica. Nota: ora potresti\n"
"barare usando `zero_ne_succ`, ma l'obiettivo di questo mondo\n"
"√® proprio insegnarti a *dimostrare* tali risultati.\n"
"\n"
"Se riesci a riscrivere il goal a `True`, potrai risolverlo con la tattica `trivial`."

#: Game.Levels.Algorithm.L06is_zero
msgid "`is_zero_zero` is a proof of `is_zero 0 = True`."
msgstr "`is_zero_zero` √® la dimostrazione di `is_zero 0 = True`."

#: Game.Levels.Algorithm.L06is_zero
msgid "`is_zero_succ a` is a proof of `is_zero (succ a) = False`."
msgstr "`is_zero_succ a` √® la dimostrazione di `is_zero (succ a) = False`."

#: Game.Levels.Algorithm.L06is_zero
msgid "`succ_ne_zero a` is a proof of `succ a ‚â† 0`."
msgstr "`succ_ne_zero a` √® la dimostrazione di `succ a ‚â† 0`."

#: Game.Levels.Algorithm.L06is_zero
msgid ""
"# Summary\n"
"\n"
"`trivial` will solve the goal `True`."
msgstr ""
"# Descrizione\n"
"\n"
"`trivial` risolve il goal `True`."

#: Game.Levels.Algorithm.L06is_zero
msgid "$\\operatorname{succ}(a) \\neq 0$."
msgstr "$\\operatorname{succ}(a) \\neq 0$."

#: Game.Levels.Algorithm.L06is_zero
msgid ""
"Start with `intro h` (remembering that `X ‚â† Y` is just notation\n"
"for `X = Y ‚Üí False`)."
msgstr ""
"Parti con `intro h` (ricordandoti che `X ‚â† Y` √® notazione per\n"
"`X = Y ‚Üí False`)."

#: Game.Levels.Algorithm.L06is_zero
msgid ""
"We're going to change that `False` into `True`. Start by changing it into\n"
"`is_zero (succ a)` by executing `rw [‚Üê is_zero_succ a]`."
msgstr ""
"Vogliamo trasformare quel `False` in un `True`. Inizia a trasformarlo in\n"
"`is_zero (succ a)` eseguendo `rw [‚Üê is_zero_succ a]`."

#: Game.Levels.Algorithm.L06is_zero
msgid ""
"See if you can take it from here. Look at the new lemmas and tactic\n"
"available on the right."
msgstr ""
"Lascio il resto a te. Sfrutta i nuovi lemmi e tattiche\n"
"disponibili nell'inventario a destra."

#: Game.Levels.Algorithm.L07succ_ne_succ
msgid "An algorithm for equality"
msgstr "Un algoritmo per l'uguaglianza"

#: Game.Levels.Algorithm.L07succ_ne_succ
msgid ""
"Here we begin to\n"
"develop an algorithm which, given two naturals `a` and `b`, returns the answer\n"
"to \"does `a = b`?\"\n"
"\n"
"Here is the algorithm. First note that `a` and `b` are numbers, and hence\n"
"are either `0` or successors.\n"
"\n"
"*) If `a` and `b` are both `0`, return \"yes\".\n"
"\n"
"*) If one is `0` and the other is `succ n`, return \"no\".\n"
"\n"
"*) If `a = succ m` and `b = succ n`, then return the answer to \"does `m = n`?\"\n"
"\n"
"Our job now is to *prove* that this algorithm always gives the correct answer. The proof that\n"
"`0 = 0` is `rfl`. The proof that `0 ‚â† succ n` is `zero_ne_succ n`, and the proof\n"
"that `succ m ‚â† 0` is `succ_ne_zero m`. The proof that if `h : m = n` then\n"
"`succ m = succ n` is `rw [h]` and then `rfl`. This level is a proof of the one\n"
"remaining job we have to do: if `a ‚â† b` then `succ a ‚â† succ b`."
msgstr ""
"Cominciamo lo sviluppo\n"
"di un algoritmo che, dati due naturali `a` e`b`, restituisce la risposta\n"
"alla domanda \"does `a = b`?\"\n"
"\n"
"Presentiamo l'algoritmo. Nota prima che `a` e `b` sono entrambi numeri, e dunque\n"
"sono `0` oppure dei successori.\n"
"\n"
"*) Se `a` e `b` sono entrambi `0`, restituiamo \"s√¨\".\n"
"\n"
"*) Se uno dei due √® `0` e l'altro √® `succ n`, restituiamo \"no\".\n"
"\n"
"*) Se `a = succ m` e `b = succ n`, restituiamo la risposta a \"`m = n`?\"\n"
"\n"
"Non ci rimane che *dimostrare* che questo algoritmo ci d√† sempre la risposta corretta. Procediamo per casi. La dimostrazione di\n"
"`0 = 0` √® `rfl`. La dimostrazione di `0 ‚â† succ n` √® `zero_ne_succ n`, e la dimostrazione di\n"
"`succ m ‚â† 0` √® `succ_ne_zero m`. La dimostrazione di \"se `h : m = n` allora\n"
"`succ m = succ n`\" √® `rw [h]` e infine `rfl`. Questo livello ci salva una parte di\n"
"lavoro per dimostrare: se `a ‚â† b` allora `succ a ‚â† succ b`."

#: Game.Levels.Algorithm.L07succ_ne_succ
msgid ""
"# Summary\n"
"\n"
"If you have a hypothesis\n"
"\n"
"`h : a ‚â† b`\n"
"\n"
"and goal\n"
"\n"
"`c ‚â† d`\n"
"\n"
"then `contrapose! h` replaces the set-up with its so-called \\\"contrapositive\\\":\n"
"a hypothesis\n"
"\n"
"`h : c = d`\n"
"\n"
"and goal\n"
"\n"
"`a = b`."
msgstr ""
"# Descrizione\n"
"\n"
"Se hai un'ipotesi\n"
"\n"
"`h : a ‚â† b`\n"
"\n"
"e il goal\n"
"\n"
"`c ‚â† d`\n"
"\n"
"allora `contrapose! h` cambier√† l'impostazione con la cosiddetta \\\"contronominale\\\":\n"
"un ipotesi\n"
"\n"
"`h : c = d`\n"
"\n"
"e il goal\n"
"\n"
"`a = b`."

#: Game.Levels.Algorithm.L07succ_ne_succ
msgid "`succ_ne_succ m n` is the proof that `m ‚â† n ‚Üí succ m ‚â† succ n`."
msgstr "`succ_ne_succ m n` √® la dimostrazione di `m ‚â† n ‚Üí succ m ‚â† succ n`."

#: Game.Levels.Algorithm.L07succ_ne_succ
msgid "If $a \\neq b$ then $\\operatorname{succ}(a) \\neq\\operatorname{succ}(b)$."
msgstr "Se $a \\neq b$ allora $\\operatorname{succ}(a) \\neq\\operatorname{succ}(b)$."

#: Game.Levels.Algorithm.L07succ_ne_succ
msgid ""
"Start with `contrapose! h`, to change the goal into its\n"
"contrapositive, namely a hypothesis of `succ m = succ m` and a goal of `m = n`."
msgstr ""
"Inizia con `contrapose! h`, che ti fa dimostrare la\n"
"contronominale del goal, cio√® avrai tra le ipotesi la negazione del goal, `succ m = succ m`, e come nuovo goal avrai la negazione dell'ipotesi `h`, `m = n`."

#: Game.Levels.Algorithm.L07succ_ne_succ
msgid ""
"Can you take it from here? (note: if you try `contrapose! h` again, it will\n"
"take you back to where you started!)"
msgstr ""
"Sai proseguire da solo? (nota: se rifai `contrapose! h` ritornerai\n"
"allo stato originale della dimostrazione!)"

#: Game.Levels.Algorithm.L08decide
msgid "decide"
msgstr "decide"

#: Game.Levels.Algorithm.L08decide
msgid ""
"# Summary\n"
"\n"
"`decide` will attempt to solve a goal if it can find an algorithm which it\n"
"can run to solve it.\n"
"\n"
"## Example\n"
"\n"
"A term of type `DecidableEq ‚Ñï` is an algorithm to decide whether two naturals\n"
"are equal or different. Hence, once this term is made and made into an `instance`,\n"
"the `decide` tactic can use it to solve goals of the form `a = b` or `a ‚â† b`."
msgstr ""
"# Descrizione\n"
"\n"
"La tattica `decide` cercher√† di risolvere il goal se esiste un algoritmo\n"
"che possiamo eseguire per risolverlo.\n"
"\n"
"## Esempio\n"
"\n"
"Un termine di tipo `DecidableEq ‚Ñï` √® un algoritmo che decide se due naturali\n"
"sono uguali o diversi. Dunque, se abbiamo un'istanza di questo tipo,\n"
"la tattica `decide` pu√≤ usare la sua implementazione per risolvere i goal della forma `a = b` or `a ‚â† b`."

#: Game.Levels.Algorithm.L08decide
msgid ""
"Implementing the algorithm for equality of naturals, and the proof that it is correct,\n"
"looks like this:\n"
"\n"
"```\n"
"instance instDecidableEq : DecidableEq ‚Ñï\n"
"| 0, 0 => isTrue <| by\n"
"  show 0 = 0\n"
"  rfl\n"
"| succ m, 0 => isFalse <| by\n"
"  show succ m ‚â† 0\n"
"  exact succ_ne_zero m\n"
"| 0, succ n => isFalse <| by\n"
"  show 0 ‚â† succ n\n"
"  exact zero_ne_succ n\n"
"| succ m, succ n =>\n"
"  match instDecidableEq m n with\n"
"  | isTrue (h : m = n) => isTrue <| by\n"
"    show succ m = succ n\n"
"    rw [h]\n"
"    rfl\n"
"  | isFalse (h : m ‚â† n) => isFalse <| by\n"
"    show succ m ‚â† succ n\n"
"    exact succ_ne_succ m n h\n"
"```\n"
"\n"
"This Lean code is a formally verified algorithm for deciding equality\n"
"between two naturals. I've typed it in already, behind the scenes.\n"
"Because the algorithm is formally verified to be correct, we can\n"
"use it in Lean proofs. You can run the algorithm with the `decide` tactic."
msgstr ""
"L'implementazione dell'algoritmo di uguaglianza tra naturali, e la sua dimostrazione di correttezza,\n"
"somigliano a questo:\n"
"\n"
"```\n"
"instance instDecidableEq : DecidableEq ‚Ñï\n"
"| 0, 0 => isTrue <| by\n"
"  show 0 = 0\n"
"  rfl\n"
"| succ m, 0 => isFalse <| by\n"
"  show succ m ‚â† 0\n"
"  exact succ_ne_zero m\n"
"| 0, succ n => isFalse <| by\n"
"  show 0 ‚â† succ n\n"
"  exact zero_ne_succ n\n"
"| succ m, succ n =>\n"
"  match instDecidableEq m n with\n"
"  | isTrue (h : m = n) => isTrue <| by\n"
"    show succ m = succ n\n"
"    rw [h]\n"
"    rfl\n"
"  | isFalse (h : m ‚â† n) => isFalse <| by\n"
"    show succ m ‚â† succ n\n"
"    exact succ_ne_succ m n h\n"
"```\n"
"\n"
"Questo codice Lean √® un algoritmo formalmente verificato che risolve il problema decisionale dell'uguaglianza\n"
"di due numeri naturali. L'ho gi√† inserito dietro le quinte nel gioco.\n"
"Dato che abbiamo prova formale della correttezza dell'algoritmo, possiamo\n"
"impiegarlo nelle dimostrazioni di Lean. Puoi eseguire l'algoritmo all'interno di una dimostrazione con la tattica `decide`."

#: Game.Levels.Algorithm.L08decide
msgid "$20+20=40$."
msgstr "$20+20=40$."

#: Game.Levels.Algorithm.L08decide
msgid ""
"You can read more about the `decide` tactic by clicking\n"
"on it in the top right."
msgstr ""
"Puoi leggere di pi√π sulla tattica `decide` cliccando\n"
"sul suo nome in alto a destra."

#: Game.Levels.Algorithm.L09decide2
msgid "decide again"
msgstr "decide, ancora"

#: Game.Levels.Algorithm.L09decide2
msgid "We gave a pretty unsatisfactory proof of `2 + 2 ‚â† 5` earlier on; now give a nicer one."
msgstr "La dimostrazione che abbiamo dato prima per `2 + 2 ‚â† 5` non √® stata molto elegante; danne una pi√π carina."

#: Game.Levels.Algorithm.L09decide2
msgid "$2+2 \\neq 5.$"
msgstr "$2+2 \\neq 5.$"

#: Game.Levels.Algorithm.L09decide2
msgid ""
"Congratulations! You've finished Algorithm World. These algorithms\n"
"will be helpful for you in Even-Odd World."
msgstr ""
"Congratulazioni! Hai finito il Mondo Algoritmi. Questi algoritmi\n"
"ti saranno sicuramente utili per il Mondo Pari-Dispari."

#: Game.Levels.Algorithm
msgid "Algorithm World"
msgstr "Mondo Algoritmi"

#: Game.Levels.Algorithm
msgid ""
"Proofs like $2+2=4$ and $a+b+c+d+e=e+d+c+b+a$ are very tedious to do by hand.\n"
"In Algorithm World we learn how to get the computer to do them for us.\n"
"\n"
"Click on \"Start\" to proceed."
msgstr ""
"Dimostrazioni come quelle di $2+2=4$ e $a+b+c+d+e=e+d+c+b+a$ sono una tortura da fare a mano.\n"
"Nel Mondo Algoritmi vedremo come farle risolvere al computer al posto nostro.\n"
"\n"
"Premi su \"Via\" per cominciare."

#: Game.Levels.AdvAddition.L01add_right_cancel
msgid "add_right_cancel"
msgstr "add_right_cancel"

#: Game.Levels.AdvAddition.L01add_right_cancel
msgid "`add_right_cancel a b n` is the theorem that $a+n=b+n \\implies a=b.$"
msgstr "`add_right_cancel a b n` √® il teorema $a+n=b+n \\implies a=b.$"

#: Game.Levels.AdvAddition.L01add_right_cancel
msgid ""
"In this world I will mostly leave you on your own.\n"
"\n"
"`add_right_cancel a b n` is the theorem that $a+n=b+n\\implies a=b$."
msgstr ""
"In questo mondo non parler√≤ troppo.\n"
"\n"
"`add_right_cancel a b n` √® il teorema che afferma $a+n=b+n\\implies a=b$."

#: Game.Levels.AdvAddition.L01add_right_cancel
msgid "$a+n=b+n\\implies a=b$."
msgstr "$a+n=b+n\\implies a=b$."

#: Game.Levels.AdvAddition.L01add_right_cancel
msgid "Start with induction on `n`."
msgstr "Inizia facendo induzione su `n`."

#: Game.Levels.AdvAddition.L02add_left_cancel
msgid "add_left_cancel"
msgstr "add_left_cancel"

#: Game.Levels.AdvAddition.L02add_left_cancel
msgid "`add_left_cancel a b n` is the theorem that $n+a=n+b \\implies a=b.$"
msgstr "`add_left_cancel a b n` √® il teorema $n+a=n+b \\implies a=b.$"

#: Game.Levels.AdvAddition.L02add_left_cancel
msgid ""
"`add_left_cancel a b n` is the theorem that $n+a=n+b\\implies a=b$.\n"
"You can prove it by induction on `n` or you can deduce it from `add_right_cancel`."
msgstr ""
"`add_left_cancel a b n` √® il teorema che dice $n+a=n+b\\implies a=b$.\n"
"Puoi dimostrarlo facendo induzione su `n` oppure puoi dedurlo tramite `add_right_cancel`."

#: Game.Levels.AdvAddition.L02add_left_cancel
msgid "$n+a=n+b\\implies a=b$."
msgstr "$n+a=n+b\\implies a=b$."

#: Game.Levels.AdvAddition.L02add_left_cancel
msgid ""
"How about this for a proof:\n"
"```\n"
"repeat rw [add_comm n]\n"
"exact add_right_cancel a b n\n"
"```"
msgstr ""
"Cosa ne pensi di questa dimostrazione:\n"
"```\n"
"repeat rw [add_comm n]\n"
"exact add_right_cancel a b n\n"
"```"

#: Game.Levels.AdvAddition.L03add_left_eq_self
msgid "add_left_eq_self"
msgstr "add_left_eq_self"

#: Game.Levels.AdvAddition.L03add_left_eq_self
msgid "`add_left_eq_self x y` is the theorem that $x + y = y \\implies x=0.$"
msgstr "`add_left_eq_self x y` √® il teorema $x + y = y \\implies x=0.$"

#: Game.Levels.AdvAddition.L03add_left_eq_self
msgid "`add_left_eq_self x y` is the theorem that $x + y = y\\implies x=0.$"
msgstr "`add_left_eq_self x y` √® il teorema $x + y = y\\implies x=0.$"

#: Game.Levels.AdvAddition.L03add_left_eq_self
msgid "$x + y = y\\implies x=0.$"
msgstr "$x + y = y\\implies x=0.$"

#: Game.Levels.AdvAddition.L03add_left_eq_self
msgid ""
"Did you use induction on `y`?\n"
"Here's a two-line proof of `add_left_eq_self` which uses `add_right_cancel`.\n"
"If you want to inspect it, you can go into editor mode by clicking `</>` in the top right\n"
"and then just cut and paste the proof and move your cursor around it\n"
"to see the hypotheses and goal at any given point\n"
"(although you'll lose your own proof this way). Click `>_` to get\n"
"back to command line mode.\n"
"```\n"
"nth_rewrite 2 [‚Üê zero_add y]\n"
"exact add_right_cancel x 0 y\n"
"```"
msgstr ""
"Per caso hai fatto induzione su `y`?\n"
"Ecco una dimostrazione in due righe `add_left_eq_self` che sfrutta `add_right_cancel`.\n"
"Se vuoi vedere come funziona, vai in editor mode cliccando su `</>` in alto a destra,\n"
"copia e incolla la mia dimostrazione e muoviti tra le linee con il cursore\n"
"per vedere le ipotesi e il goal in ogni punto\n"
"(prima salva la tua dimostrazione per√≤, altrimenti la perdi). Premi su `>_` per\n"
"tornare alla modalit√† command line.\n"
"```\n"
"nth_rewrite 2 [‚Üê zero_add y]\n"
"exact add_right_cancel x 0 y\n"
"```"

#: Game.Levels.AdvAddition.L04add_right_eq_self
msgid "add_right_eq_self"
msgstr "add_right_eq_self"

#: Game.Levels.AdvAddition.L04add_right_eq_self
msgid "`add_right_eq_self x y` is the theorem that $x + y = x \\implies y=0.$"
msgstr "`add_right_eq_self x y` √® il teorema $x + y = x \\implies y=0.$"

#: Game.Levels.AdvAddition.L04add_right_eq_self
msgid ""
"`add_right_eq_self x y` is the theorem that $x + y = x\\implies y=0.$\n"
"Two ways to do it spring to mind; I'll mention them when you've solved it."
msgstr ""
"`add_right_eq_self x y` √® il teorema $x + y = x\\implies y=0.$\n"
"Mi vengono in mente due modi per dimostrarlo, ma te li dir√≤ una volta che lo dimostri."

#: Game.Levels.AdvAddition.L04add_right_eq_self
msgid "$x+y=x\\implies y=0$."
msgstr "$x+y=x\\implies y=0$."

#: Game.Levels.AdvAddition.L04add_right_eq_self
msgid ""
"This state is not provable! Did you maybe use `rw [add_left_eq_self] at h`\n"
"instead of `apply [add_left_eq_self] at h`? You can complare the two in the inventory."
msgstr ""
"Questo stato non √® dimostrabile! Per caso hai usato `rw [add_left_eq_self] at h`\n"
"anzich√© `apply [add_left_eq_self] at h`? Puoi confrontare il loro effetto nell'inventario."

#: Game.Levels.AdvAddition.L04add_right_eq_self
msgid ""
"Here's a proof using `add_left_eq_self`:\n"
"```\n"
"rw [add_comm]\n"
"intro h\n"
"apply add_left_eq_self at h\n"
"exact h\n"
"```\n"
"\n"
"and here's an even shorter one using the same idea:\n"
"```\n"
"rw [add_comm]\n"
"exact add_left_eq_self y x\n"
"```\n"
"\n"
"Alternatively you can just prove it by induction on `x`\n"
"(the dots in the proof just indicate the two goals and\n"
"can be omitted):\n"
"\n"
"```\n"
"  induction x with d hd\n"
"  ¬∑ intro h\n"
"    rw [zero_add] at h\n"
"    assumption\n"
"  ¬∑ intro h\n"
"    rw [succ_add] at h\n"
"    apply succ_inj at h\n"
"    apply hd at h\n"
"    assumption\n"
"```"
msgstr ""
"Ecco una dimostrazione che usa `add_left_eq_self`:\n"
"```\n"
"rw [add_comm]\n"
"intro h\n"
"apply add_left_eq_self at h\n"
"exact h\n"
"```\n"
"\n"
"ed eccone una pi√π breve che condensa le ultime tre righe in una sola:\n"
"```\n"
"rw [add_comm]\n"
"exact add_left_eq_self y x\n"
"```\n"
"\n"
"Volendo puoi anche dimostrarlo per induzione su `x`\n"
"(i pallini nel codice qui sotto hanno solo funzione decorativa,\n"
"assieme all'indentazione servono per riconoscere pi√π facilmente i due sottogoal, ma possono essere omessi):\n"
"\n"
"```\n"
"  induction x with d hd\n"
"  ¬∑ intro h\n"
"    rw [zero_add] at h\n"
"    assumption\n"
"  ¬∑ intro h\n"
"    rw [succ_add] at h\n"
"    apply succ_inj at h\n"
"    apply hd at h\n"
"    assumption\n"
"```"

#: Game.Levels.AdvAddition.L05add_right_eq_zero
msgid "add_right_eq_zero"
msgstr "add_right_eq_zero"

#: Game.Levels.AdvAddition.L05add_right_eq_zero
msgid ""
"The next result we'll need in `‚â§` World is that if `a + b = 0` then `a = 0` and `b = 0`.\n"
"Let's prove one of these facts in this level, and the other in the next.\n"
"\n"
"## A new tactic: `cases`\n"
"\n"
"The `cases` tactic will split an object or hypothesis up into the possible ways\n"
"that it could have been created.\n"
"\n"
"For example, sometimes you want to deal with the two cases `b = 0` and `b = succ d` separately,\n"
"but don't need the inductive hypothesis `hd` that comes with `induction b with d hd`.\n"
"In this situation you can use `cases b with d` instead. There are two ways to make\n"
"a number: it's either zero or a successor. So you will end up with two goals, one\n"
"with `b = 0` and one with `b = succ d`.\n"
"\n"
"Another example: if you have a hypothesis `h : False` then you are done, because a false statement implies\n"
"any statement. Here `cases h` will close the goal, because there are *no* ways to\n"
"make a proof of `False`! So you will end up with no goals, meaning you have proved everything."
msgstr ""
"Il prossimo risultato di cui abbiamo bisogno per il Mondo `‚â§` √®: se `a + b = 0` allora `a = 0` e `b = 0`.\n"
"In questo livello dimostriamo solo la prima parte della conclusione, la seconda nel livello successivo.\n"
"\n"
"## Nuova tattica: `cases`\n"
"\n"
"La tattica `cases` scompone un oggetto o un'ipotesi in tutti i modi possibili\n"
"in cui pu√≤ essere stato creato.\n"
"\n"
"Ad esempio, su un numero naturale a volte √® sufficiente ragionare con i due casi `b = 0` e `b = succ d` separatamente,\n"
"tralasciando l'ipotesi induttiva `hd` prodotta da `induction b with d hd`.\n"
"In questa situazione puoi usare `cases b with d`. Ci sono due modi per creare un numero:\n"
"come zero o come successore di qualcosa. `case` riprodurr√† proprio queste due alternative, spezzando la dimostrazione in due sotto-goal, uno\n"
"con l'ipotesi `b = 0` e un'altro con l'ipotesi `b = succ d`.\n"
"\n"
"Chiariamo con un altro esempio: se hai l'ipotesi `h : False` allora hai finito, perch√© un'affermazione falsa implica\n"
"qualsiasi cosa. Qua `cases h` chiuder√† la dimostrazione, perch√© *non* vi √® alcun modo\n"
"di costruire una dimostrazione di `False`! Quindi rimarrai con zero sotto-goal da dimostrare, ossia hai dimostrato tutto."

#: Game.Levels.AdvAddition.L05add_right_eq_zero
msgid ""
"## Summary\n"
"\n"
"If `n` is a number, then `cases n with d` will break the goal into two goals,\n"
"one with `n = 0` and the other with `n = succ d`.\n"
"\n"
"If `h` is a proof (for example a hypothesis), then `cases h with...` will break the\n"
"proof up into the pieces used to prove it.\n"
"\n"
"## Example\n"
"\n"
"If `n : ‚Ñï` is a number, then `cases n with d` will break the goal into two goals,\n"
"one with `n` replaced by 0 and the other with `n` replaced by `succ d`. This\n"
"corresponds to the mathematical idea that every natural number is either `0`\n"
"or a successor.\n"
"\n"
"## Example\n"
"\n"
"If `h : P ‚à® Q` is a hypothesis, then `cases h with hp hq` will turn one goal\n"
"into two goals, one with a hypothesis `hp : P` and the other with a\n"
"hypothesis `hq : Q`.\n"
"\n"
"## Example\n"
"\n"
"If `h : False` is a hypothesis, then `cases h` will turn one goal into no goals,\n"
"because there are no ways to make a proof of `False`! And if you have no goals left,\n"
"you have finished the level.\n"
"\n"
"## Example\n"
"\n"
"If `h : a ‚â§ b` is a hypothesis, then `cases h with c hc` will create a new number `c`\n"
"and a proof `hc : b = a + c`. This is because the *definition* of `a ‚â§ b` is\n"
"`‚àÉ c, b = a + c`."
msgstr ""
"## Descrizione\n"
"\n"
"Se `n` √® un numero, allora `cases n with d` spezzer√† il goal in due goal,\n"
"uno dove `n = 0` e un altro dove `n = succ d`.\n"
"\n"
"Se `h` √® una dimostrazione (per esempio tra le ipotesi), allora `cases h with...` spezzer√†\n"
"la dimostrazione in tante parti quante quanti i modi di derivare `h`.\n"
"\n"
"## Esempio\n"
"\n"
"Se `n : ‚Ñï` √® un numero, allora `cases n with d` spezzer√† il goal in due subgoal,\n"
"uno dove `n` √® stato rimpiazzato da 0 e l'altro dove `n` √® stato rimpiazzato da `succ d`. Questo\n"
"corrisponde all'intuizione matematica che ogni numero naturale √® o `0`\n"
"oppure un successore.\n"
"\n"
"## Esempio\n"
"\n"
"Se `h : P ‚à® Q` √® un'ipotesi, allora `cases h with hp hq` trasformer√† il goal\n"
"in due goal, uno con l'ipotesi `hp : P` e l'altro con\n"
"l'ipotesi `hq : Q`.\n"
"\n"
"## Esempio\n"
"\n"
"Se `h : False` √® un'ipotesi, allora `cases h` trasformer√† il goal in zero goal,\n"
"perch√© non vi √® alcun modo di dimostrare `False`! E se rimani con zero cose da dimostrare\n"
"vuol dire che hai completato il livello.\n"
"\n"
"## Esempio\n"
"\n"
"Se `h : a ‚â§ b` √® un'ipotesi, allora `cases h with c hc` istanzier√† un nuovo numero `c`\n"
"e una dimostrazione di `hc : b = a + c`. Questo deriva dalla *definizione* di `a ‚â§ b`, che √®\n"
"`‚àÉ c, b = a + c`."

#: Game.Levels.AdvAddition.L05add_right_eq_zero
msgid "A proof that $a+b=0 \\implies a=0$."
msgstr "Una dimostrazione di $a+b=0 \\implies a=0$."

#: Game.Levels.AdvAddition.L05add_right_eq_zero
msgid "If $a+b=0$ then $a=0$."
msgstr "Se $a+b=0$ allora $a=0$."

#: Game.Levels.AdvAddition.L05add_right_eq_zero
msgid ""
"Here we want to deal with the cases `b = 0` and `b ‚â† 0` separately,\n"
"so start with `cases b with d`."
msgstr ""
"Qui vogliamo ragionare separatamente con i due casi `b = 0` e `b ‚â† 0`,\n"
"quindi parti con `cases b with d`."

#: Game.Levels.AdvAddition.L05add_right_eq_zero
msgid "Well done!"
msgstr "Ottimo lavoro!"

#: Game.Levels.AdvAddition.L06add_left_eq_zero
msgid "add_left_eq_zero"
msgstr "add_left_eq_zero"

#: Game.Levels.AdvAddition.L06add_left_eq_zero
msgid ""
"You can just mimic the previous proof to do this one -- or you can figure out a way\n"
"of using it."
msgstr ""
"Puoi imitare la dimostrazione precedente per risolvere questa qua -- oppure potresti cercare un\n"
"modo di applicarla."

#: Game.Levels.AdvAddition.L06add_left_eq_zero
msgid "A proof that $a+b=0 \\implies b=0$."
msgstr "Una dimostrazione di $a+b=0 \\implies b=0$."

#: Game.Levels.AdvAddition.L06add_left_eq_zero
msgid "If $a+b=0$ then $b=0$."
msgstr "Se $a+b=0$ allora $b=0$."

#: Game.Levels.AdvAddition.L06add_left_eq_zero
msgid "How about this for a proof:\n"
"\n"
"```\n"
"rw [add_comm]\n"
"exact add_right_eq_zero b a\n"
"```\n"
"\n"
"That's the end of Advanced Addition World! You'll need these theorems\n"
"for the next world, `‚â§` World. Click on \"Leave World\" to access it."
msgstr ""
"Come ti sembra questa dimostrazione:\n"
"\n"
"```\n"
"rw [add_comm]\n"
"exact add_right_eq_zero b a\n"
"```\n"
"\n"
"Questo √® tutto per il Mondo Addizione Avanzata! I teoremi di questo mondo ti torneranno utili\n"
"nel prossimo mondo, il Mondo `‚â§`. Clicca su \"Abbandona mondo\" per navigarci."

#: Game.Levels.AdvAddition
msgid "Advanced Addition World"
msgstr "Mondo Addizione Avanzata"

#: Game.Levels.AdvAddition
msgid ""
"In Advanced Addition World we will prove some basic\n"
"addition facts such as $x+y=x\\implies y=0$. The theorems\n"
"proved in this world will be used to build\n"
"a theory of inequalities in `‚â§` World.\n"
"\n"
"Click on \"Start\" to proceed."
msgstr ""
"Nel Mondo Addizione Avanzata dimostreremo delle propriet√†\n"
"basilari dell'addizione come $x+y=x\\implies y=0$. I teoremi\n"
"dimostrati in questo mondo servono da mattoncini teorici con cui costruiremo\n"
"la teoria delle disuguaglianze nel Mondo `‚â§`.\n"
"\n"
"Premi su \"Via\" per iniziare."

#: Game.Levels.LessOrEqual.L01le_refl
msgid "The `use` tactic"
msgstr "La tattica `use`"

#: Game.Levels.LessOrEqual.L01le_refl
msgid ""
"## Summary\n"
"\n"
"The `use` tactic makes progress with goals which claim something *exists*.\n"
"If the goal claims that some `x` exists with some property, and you know\n"
"that `x = 37` will work, then `use 37` will make progress.\n"
"\n"
"Because `a ‚â§ b` is notation for \\\"there exists `c` such that `b = a + c`\\\",\n"
"you can make progress on goals of the form `a ‚â§ b` by `use`ing the\n"
"number which is morally `b - a`."
msgstr ""
"## Descrizione\n"
"\n"
"La tattica `use` permette di avanzare su goal che postulano l'*esistenza* di qualcosa.\n"
"Se il goal afferma che esiste una certa `x`con qualche propriet√†, e sei sicuro\n"
"che `x = 37` la soddisfi, allora con `use 37` farai progresso nella dimostrazione.\n"
"\n"
"Dato che `a ‚â§ b` √® notazione per \\\"there exists `c` such that `b = a + c`\\\",\n"
"puoi fare progresso su goal della forma `a ‚â§ b` passando a `use`\n"
"quel numero che corrisponde a `b - a`, la distanza tra `a` e `b`."

#: Game.Levels.LessOrEqual.L01le_refl
msgid ""
"`a ‚â§ b` is *notation* for `‚àÉ c, b = a + c`.\n"
"\n"
"Because this game doesn't have negative numbers, this definition\n"
"is mathematically valid.\n"
"\n"
"This means that if you have a goal of the form `a ‚â§ b` you can\n"
"make progress with the `use` tactic, and if you have a hypothesis\n"
"`h : a ‚â§ b`, you can make progress with `cases h with c hc`."
msgstr ""
"`a ‚â§ b` √® *notazione* per `‚àÉ c, b = a + c`.\n"
"\n"
"Dato che in questo gioco non abbiamo i numeri negativi, questa definizione\n"
"√® matematicamente valida.\n"
"\n"
"Una conseguenza pratica di tale definizione √® che se hai un goal della forma `a ‚â§ b` puoi\n"
"scomporlo con la tattica `use`, e se hai un'ipotesi\n"
"`h : a ‚â§ b`, puoi scomporla tramite `cases h with c hc`."

#: Game.Levels.LessOrEqual.L01le_refl
msgid ""
"`a ‚â§ b` is *notation* for `‚àÉ c, b = a + c`. This \"backwards E\"\n"
"means \"there exists\". So `a ‚â§ b` means that there exists\n"
"a number `c` such that `b = a + c`. This definition works\n"
"because there are no negative numbers in this game.\n"
"\n"
"To *prove* an \"exists\" statement, use the `use` tactic.\n"
"Let's see an example."
msgstr ""
"`a ‚â§ b` √® *notazione* per `‚àÉ c, b = a + c`. La \"E rovesciata\"\n"
"si legge \"esiste\". Quindi `a ‚â§ b` vuol dire che esiste\n"
"un numero `c` tale che `b = a + c`. Questa definizione √® valida\n"
"perch√© non abbiamo i numeri negativi in questo gioco.\n"
"\n"
"Per *dimostrare* un \"esiste\", puoi usare la tattica `use`.\n"
"Vediamo un esempio."

#: Game.Levels.LessOrEqual.L01le_refl
msgid ""
"`le_refl x` is a proof of `x ‚â§ x`.\n"
"\n"
"The reason for the name is that this lemma is \"reflexivity of $\\le$\""
msgstr ""
"`le_refl x` √® la dimostrazione di `x ‚â§ x`.\n"
"\n"
"Il nome di questo lemma deriva da \"reflexivity of $\\le$\", dove \"le\"\n"
"√® l'abbreviazione tipica di \"less than or equal\" (minore o uguale)"

#: Game.Levels.LessOrEqual.L01le_refl
msgid "If $x$ is a number, then $x \\le x$."
msgstr "Se $x$ √® un numero, allora $x \\le x$."

#: Game.Levels.LessOrEqual.L01le_refl
msgid ""
"The reason `¬´{x}¬ª ‚â§ ¬´{x}¬ª` is because `¬´{x}¬ª = ¬´{x}¬ª + 0`.\n"
"So you should start this proof with `use 0`."
msgstr ""
"La ragione per cui `¬´{x}¬ª ‚â§ ¬´{x}¬ª` √® perch√© `¬´{x}¬ª = ¬´{x}¬ª + 0`.\n"
"Dunque dovresti aprire la dimostrazione con `use 0`."

#: Game.Levels.LessOrEqual.L01le_refl
msgid "You can probably take it from here."
msgstr "Prova a proseguire da solo."

#: Game.Levels.LessOrEqual.L02zero_le
msgid "0 ‚â§ x"
msgstr "0 ‚â§ x"

#: Game.Levels.LessOrEqual.L02zero_le
msgid "To solve this level, you need to `use` a number `c` such that `x = 0 + c`."
msgstr "Per risolvere questo livello, dovrai chiamare `use` su un numero `c` tale che `x = 0 + c`."

#: Game.Levels.LessOrEqual.L02zero_le
msgid "`zero_le x` is a proof that `0 ‚â§ x`."
msgstr "`zero_le x` √® la dimostrazione che `0 ‚â§ x`."

#: Game.Levels.LessOrEqual.L02zero_le
msgid "If $x$ is a number, then $0 \\le x$."
msgstr "Se $x$ √® un numero, allora $0 \\le x$."

#: Game.Levels.LessOrEqual.L03le_succ_self
msgid "x ‚â§ succ x"
msgstr "x ‚â§ succ x"

#: Game.Levels.LessOrEqual.L03le_succ_self
msgid "`le_succ_self x` is a proof that `x ‚â§ succ x`."
msgstr "`le_succ_self x` √® la dimostrazione che `x ‚â§ succ x`."

#: Game.Levels.LessOrEqual.L03le_succ_self
msgid ""
"If you `use` the wrong number, you get stuck with a goal you can't prove.\n"
"What number will you `use` here?"
msgstr ""
"Se applichi `use` su un numero errato, rimarrai bloccato con un goal non dimostrabile.\n"
"Su che numero applicherai `use` qui?"

#: Game.Levels.LessOrEqual.L03le_succ_self
msgid "If $x$ is a number, then $x \\le \\operatorname{succ}(x)$."
msgstr "Sia $x$ un numero, allora $x \\le \\operatorname{succ}(x)$."

#: Game.Levels.LessOrEqual.L03le_succ_self
msgid ""
"Here's a two-liner:\n"
"```\n"
"use 1\n"
"exact succ_eq_add_one x\n"
"```\n"
"\n"
"This works because `succ_eq_add_one x` is a proof of `succ x = x + 1`."
msgstr ""
"Ecco una dimostrazione di due righe:\n"
"```\n"
"use 1\n"
"exact succ_eq_add_one x\n"
"```\n"
"\n"
"Questo funziona perch√© `succ_eq_add_one x` √® la dimostrazione di `succ x = x + 1`."

#: Game.Levels.LessOrEqual.L04le_trans
msgid "x ‚â§ y and y ‚â§ z implies x ‚â§ z"
msgstr "x ‚â§ y e y ‚â§ z implica x ‚â§ z"

#: Game.Levels.LessOrEqual.L04le_trans
msgid ""
"`le_trans x y z` is a proof that if `x ‚â§ y` and `y ‚â§ z` then `x ‚â§ z`.\n"
"More precisely, it is a proof that `x ‚â§ y ‚Üí (y ‚â§ z ‚Üí x ‚â§ z)`. In words,\n"
"If $x \\le y$ then (pause) if $y \\le z$ then $x \\le z$.\n"
"\n"
"## A note on associativity\n"
"\n"
"In Lean, `a + b + c` means `(a + b) + c`, because `+` is left associative. However\n"
"`‚Üí` is right associative. This means that `x ‚â§ y ‚Üí y ‚â§ z ‚Üí x ‚â§ z` in Lean means\n"
"exactly that `‚â§` is transitive. This is different to how mathematicians use\n"
"$P \\implies Q \\implies R$; for them, this usually means that $P \\implies Q$\n"
"and $Q \\implies R$."
msgstr ""
"`le_trans x y z` √® la dimostrazione che se `x ‚â§ y` e `y ‚â§ z` allora `x ‚â§ z`.\n"
"Riscritto in termini logici, √® la dimostrazione che `x ‚â§ y ‚Üí (y ‚â§ z ‚Üí x ‚â§ z)`. Questa formula si legge ad alta voce cos√¨:\n"
"Se $x \\le y$ allora (pausa) se $y \\le z$ allora $x \\le z$.\n"
"\n"
"## Nota sull'associativit√†\n"
"\n"
"Come sai gi√†, in Lean `a + b + c` sta per `(a + b) + c`, dato che `+` associa a sinistra. Invece l'implicazione\n"
"`‚Üí` associa a destra. Dunque su Lean possiamo scrivere direttamente `x ‚â§ y ‚Üí y ‚â§ z ‚Üí x ‚â§ z`, che codifica\n"
"proprio la propriet√† transitiva di `‚â§`. Attenzione per√≤, in quanto a volte i matematici interpretano le sequenze di `‚Üí` diversamente;  \n"
"per alcuni, $P \\implies Q \\implies R$ si traduce nella congiunzione $P \\implies Q$\n"
"e $Q \\implies R$."

#: Game.Levels.LessOrEqual.L04le_trans
msgid ""
"In this level, we see inequalities as *hypotheses*. We have not seen this before.\n"
"The `cases` tactic can be used to take `hxy` apart."
msgstr ""
"In questo livello, abbiamo delle disuguaglianze tra le *ipotesi*. Non abbiamo ancora visto questo caso.\n"
"La tattica `cases` pu√≤ essere usata per scomporre l'ipotesi `hxy`."

#: Game.Levels.LessOrEqual.L04le_trans
msgid "If $x \\leq y$ and $y \\leq z$, then $x \\leq z$."
msgstr "Se $x \\leq y$ e $y \\leq z$, allora $x \\leq z$."

#: Game.Levels.LessOrEqual.L04le_trans
msgid "Start with `cases ¬´{hxy}¬ª with a ha`."
msgstr "Inizia con `cases ¬´{hxy}¬ª with a ha`."

#: Game.Levels.LessOrEqual.L04le_trans
msgid ""
"Now `¬´{ha}¬ª` is a proof that `¬´{y}¬ª = ¬´{x}¬ª + ¬´{a}¬ª`, and `hxy` has vanished. Similarly, you can destruct\n"
"`¬´{hyz}¬ª` into its parts with `cases ¬´{hyz}¬ª with b hb`."
msgstr ""
"Ora `¬´{ha}¬ª` √® una dimostrazione di `¬´{y}¬ª = ¬´{x}¬ª + ¬´{a}¬ª`, mentre `hxy` √® scomparso. In modo simile, puoi scomporre\n"
"`¬´{hyz}¬ª` nelle sue varie parti tramite `cases ¬´{hyz}¬ª with b hb`."

#: Game.Levels.LessOrEqual.L04le_trans
msgid "Now you need to figure out which number to `use`. See if you can take it from here."
msgstr "Ora devi individuare il numero su cui applicare `use`. Fai un tentativo!"

#: Game.Levels.LessOrEqual.L04le_trans
msgid ""
"A passing mathematician remarks that with reflexivity and transitivity out of the way,\n"
"you have proved that `‚â§` is a *preorder* on `‚Ñï`."
msgstr ""
"Un matematico di passaggio ti fa notare che avendo dimostrato le propriet√† riflessiva e transitiva,\n"
"hai dimostrato che `‚â§` √® un *preordine* su `‚Ñï`."

#: Game.Levels.LessOrEqual.L05le_zero
msgid "x ‚â§ 0 ‚Üí x = 0"
msgstr "x ‚â§ 0 ‚Üí x = 0"

#: Game.Levels.LessOrEqual.L05le_zero
msgid "`le_zero x` is a proof of `x ‚â§ 0 ‚Üí x = 0`."
msgstr "`le_zero x` √® la dimostrazione di `x ‚â§ 0 ‚Üí x = 0`."

#: Game.Levels.LessOrEqual.L05le_zero
msgid ""
"It's \"intuitively obvious\" that there are no numbers less than zero,\n"
"but to prove it you will need a result which you showed in advanced\n"
"addition world."
msgstr ""
"√à \"intuitivamente ovvio\" che non esistono numeri naturali minori di zero,\n"
"ma per dimostrarlo dovrai ricorrere a un risultato che abbiamo dimostrato nel mondo\n"
"Addizione Avanzata."

#: Game.Levels.LessOrEqual.L05le_zero
msgid "`le_zero x` is a proof of the implication `x ‚â§ 0 ‚Üí x = 0`."
msgstr "`le_zero x` √® la dimostrazione dell'implicazione `x ‚â§ 0 ‚Üí x = 0`."

#: Game.Levels.LessOrEqual.L05le_zero
msgid "If $x \\leq 0$, then $x=0$."
msgstr "Se $x \\leq 0$, allora $x=0$."

#: Game.Levels.LessOrEqual.L05le_zero
msgid ""
"You want to use `add_right_eq_zero`, which you already\n"
"proved, but you'll have to start with `symm at` your hypothesis."
msgstr ""
"Qui √® opportuno usare `add_right_eq_zero`, che hai gi√†\n"
"dimostrato, ma prima dovrai applicare `symm at` su un'ipotesi."

#: Game.Levels.LessOrEqual.L06le_antisymm
msgid "x ‚â§ y and y ‚â§ x implies x = y"
msgstr "x ‚â§ y e y ‚â§ x implica x = y"

#: Game.Levels.LessOrEqual.L06le_antisymm
msgid "`le_antisymm x y` is a proof that if `x ‚â§ y` and `y ‚â§ x` then `x = y`."
msgstr "`le_antisymm x y` √® la dimostrazione che `x ‚â§ y` e `y ‚â§ x` implica `x = y`."

#: Game.Levels.LessOrEqual.L06le_antisymm
msgid ""
"This level asks you to prove *antisymmetry* of $\\leq$.\n"
"In other words, if $x \\leq y$ and $y \\leq x$ then $x = y$.\n"
"It's the trickiest one so far. Good luck!"
msgstr ""
"Questo livello ti chiede di dimostrare la propriet√† *antisimmetrica* di $\\leq$.\n"
"In formula, se $x \\leq y$ e $y \\leq x$ allora $x = y$.\n"
"√à forse la pi√π complicata tra quelle affrontate finora. Buona fortuna!"

#: Game.Levels.LessOrEqual.L06le_antisymm
msgid "If $x \\leq y$ and $y \\leq x$, then $x = y$."
msgstr "Se $x \\leq y$ e $y \\leq x$, allora $x = y$."

#: Game.Levels.LessOrEqual.L06le_antisymm
msgid ""
"Here's my proof:\n"
"```\n"
"cases hxy with a ha\n"
"cases hyx with b hb\n"
"rw [ha]\n"
"rw [ha, add_assoc] at hb\n"
"symm at hb\n"
"apply add_right_eq_self at hb\n"
"apply add_right_eq_zero at hb\n"
"rw [hb, add_zero]\n"
"rfl\n"
"```\n"
"\n"
"A passing mathematician remarks that with antisymmetry as well,\n"
"you have proved that `‚â§` is a *partial order* on `‚Ñï`.\n"
"\n"
"The boss level of this world is to prove\n"
"that `‚â§` is a total order. Let's learn two more easy tactics\n"
"first."
msgstr ""
"Ecco la mia dimostrazione:\n"
"```\n"
"cases hxy with a ha\n"
"cases hyx with b hb\n"
"rw [ha]\n"
"rw [ha, add_assoc] at hb\n"
"symm at hb\n"
"apply add_right_eq_self at hb\n"
"apply add_right_eq_zero at hb\n"
"rw [hb, add_zero]\n"
"rfl\n"
"```\n"
"\n"
"Un matematico di passaggio ti fa notare che con l'aggiunta dell'antisimmetria,\n"
"hai dimostrato che `‚â§` √® un *ordine parziale* su `‚Ñï`.\n"
"\n"
"Il livello boss di questo mondo consiste nel dimostrare\n"
"che `‚â§` √® un ordine totale. Prima di affrontarlo vediamo altre due\n"
"tattiche utili."

#: Game.Levels.LessOrEqual.L07or_symm
msgid "Dealing with `or`"
msgstr "Come ragionare con `or`"

#: Game.Levels.LessOrEqual.L07or_symm
msgid ""
"# Summary\n"
"The `left` tactic changes a goal of `P ‚à® Q` into a goal of `P`.\n"
"Use it when your hypotheses guarantee that the reason that `P ‚à® Q`\n"
"is true is because in fact `P` is true.\n"
"\n"
"Internally this tactic is just `apply`ing a theorem\n"
"saying that $P \\implies P \\lor Q.$\n"
"\n"
"Note that this tactic can turn a solvable goal into an unsolvable\n"
"one."
msgstr ""
"# Descrizione\n"
"La tattica `left` trasforma un goal della forma `P ‚à® Q` nel nuovo goal `P`.\n"
"Usala quando le tue ipotesi garantiscono che si pu√≤ dedurre `P ‚à® Q`\n"
"dalla verit√† di `P`.\n"
"\n"
"L'implementazione di Lean di questa tattica non fa altro che l'`apply` di un teorema\n"
"che dice $P \\implies P \\lor Q.$\n"
"\n"
"Nota bene che questa tattica pu√≤ portare il tuo goal a uno stato irrisolvibile."

#: Game.Levels.LessOrEqual.L07or_symm
msgid ""
"# Summary\n"
"The `right` tactic changes a goal of `P ‚à® Q` into a goal of `Q`.\n"
"Use it when your hypotheses guarantee that the reason that `P ‚à® Q`\n"
"is true is because in fact `Q` is true.\n"
"\n"
"Internally this tactic is just `apply`ing a theorem\n"
"saying that $Q \\implies P \\lor Q.$\n"
"\n"
"Note that this tactic can turn a solvable goal into an unsolvable\n"
"one."
msgstr ""
"# Descrizione\n"
"La tattica `right` trasforma un goal della forma `P ‚à® Q` nel nuovo goal `Q`.\n"
"Usala quando le tue ipotesi garantiscono che si pu√≤ dedurre `P ‚à® Q`\n"
"\n"
"dalla verit√† di `Q`.\n"
"\n"
"L'implementazione di Lean di questa tattica non fa altro che `apply` di un teorema\n"
"che dice che $Q \\implies P \\lor Q.$\n"
"\n"
"Nota bene che questa tattica pu√≤ portare il tuo goal a uno stato irrisolvibile."

#: Game.Levels.LessOrEqual.L07or_symm
msgid ""
"Totality of `‚â§` is the boss level of this world, and it's coming up next. It says that\n"
"if `a` and `b` are naturals then either `a ‚â§ b` or `b ‚â§ a`.\n"
"But we haven't talked about `or` at all. Here's a run-through.\n"
"\n"
"1) The notation for \"or\" is `‚à®`. You won't need to type it, but you can\n"
"type it with `\\or`.\n"
"\n"
"2) If you have an \"or\" statement in the *goal*, then two tactics made\n"
"progress: `left` and `right`. But don't choose a direction unless your\n"
"hypotheses guarantee that it's the correct one.\n"
"\n"
"3) If you have an \"or\" statement as a *hypothesis* `h`, then\n"
"`cases h with h1 h2` will create two goals, one where you went left,\n"
"and the other where you went right."
msgstr ""
"La totalit√† di `‚â§` √® il livello boss di questo mondo, ed √® il prossimo livello. Essa afferma che\n"
"se `a` e `b` sono due numeri naturali allora `a ‚â§ b` or `b ‚â§ a`.\n"
"Ma non abbiamo mai parlato di `or` (o, oppure). In breve:\n"
"\n"
"1) La notazione per \"or\" √® `‚à®`. Non avrai bisogno di digitarlo, ma puoi ottenere quel simbolo\n"
"digitando `\\or`.\n"
"\n"
"2) Se hai un enunciato \"or\" nel *goal*, due tattiche ti consentono di fare progresso:\n"
"`left` e `right`. Ma non avere mai fretta di prendere una direzione o l'altra \n"
"se le tue ipotesi non ti garantiscono che stai scegliendo la direzione giusta.\n"
"\n"
"3) Se hai un enunciato \"or\" come *ipotesi* `h`, allora\n"
"`cases h with h1 h2` creer√† due goal, in uno devi dimostrare il lato sinistro,\n"
"e nel secondo devi dimostrare il lato destro."

#: Game.Levels.LessOrEqual.L07or_symm
msgid "If $x=37$ or $y=42$, then $y=42$ or $x=37$."
msgstr "Se $x=37$ o $y=42$, allora $y=42$ o $x=37$."

#: Game.Levels.LessOrEqual.L07or_symm
msgid "We don't know whether to go left or right yet. So start with `cases ¬´{h}¬ª with hx hy`."
msgstr "Non sappiamo ancora se andare a sinistra o a destra nel goal. Dunque lavoriamo sull'ipotesi, inizia con `cases ¬´{h}¬ª with hx hy`."

#: Game.Levels.LessOrEqual.L07or_symm
msgid ""
"Now we can prove the `or` statement by proving the statement on the right,\n"
"so use the `right` tactic."
msgstr ""
"Ora possiamo dimostrare il goal con `or` dimostrando la proposizione a destra,\n"
"perci√≤ usa `right`."

#: Game.Levels.LessOrEqual.L07or_symm
msgid "This time, use the `left` tactic."
msgstr "Questa volta, puoi usare tattica `left`."

#: Game.Levels.LessOrEqual.L07or_symm
msgid "Ready for the boss level of this world?"
msgstr "Pronto per il livello boss di questo mondo?"

#: Game.Levels.LessOrEqual.L08le_total
msgid "x ‚â§ y or y ‚â§ x"
msgstr "x ‚â§ y o y ‚â§ x"

#: Game.Levels.LessOrEqual.L08le_total
msgid "`le_total x y` is a proof that `x ‚â§ y` or `y ‚â§ x`."
msgstr "`le_total x y` √® la dimostrazione che `x ‚â§ y` or `y ‚â§ x`."

#: Game.Levels.LessOrEqual.L08le_total
msgid ""
"This is I think the toughest level yet. Tips: if `a` is a number\n"
"then `cases a with b` will split into cases `a = 0` and `a = succ b`.\n"
"And don't go left or right until your hypotheses guarantee that\n"
"you can prove the resulting goal!\n"
"\n"
"I've left hidden hints; if you need them, retry from the beginning\n"
"and click on \"Show more help!\""
msgstr ""
"Questo √® a mio parere il livello pi√π tosto. Due consigli: se `a` √® un numero naturale\n"
"allora `cases a with b` lo scomporr√† nei casi `a = 0` e `a = succ b`.\n"
"Non andare a sinistra o a destra fin quando le tue ipotesi non ti garantiscono che\n"
"puoi dimostrare quel ramo!\n"
"\n"
"Ti ho lasciato alcuni indizi nascosti; quando ne hai bisogno, riavvia il livello\n"
"e clicca su \"Aiutami!\""

#: Game.Levels.LessOrEqual.L08le_total
msgid "If $x$ and $y$ are numbers, then either $x \\leq y$ or $y \\leq x$."
msgstr "Se $x$ e $y$ sono numeri, allora vale $x \\leq y$ oppure $y \\leq x$."

#: Game.Levels.LessOrEqual.L08le_total
msgid "Start with `induction ¬´{y}¬ª with d hd`."
msgstr "Inizia con `induction ¬´{y}¬ª with d hd`."

#: Game.Levels.LessOrEqual.L08le_total
msgid "Try `cases ¬´{hd}¬ª with h1 h2`."
msgstr "Prova `cases ¬´{hd}¬ª with h1 h2`."

#: Game.Levels.LessOrEqual.L08le_total
msgid "Now `cases ¬´{h2}¬ª with e he`."
msgstr "Ora `cases ¬´{h2}¬ª with e he`."

#: Game.Levels.LessOrEqual.L08le_total
msgid "You still don't know which way to go, so do `cases ¬´{e}¬ª with a`."
msgstr "Non sai ancora che direzione intraprendere, quindi esegui `cases ¬´{e}¬ª with a`."

#: Game.Levels.LessOrEqual.L08le_total
msgid ""
"Very well done.\n"
"\n"
"A passing mathematician remarks that with you've just proved that `‚Ñï` is totally\n"
"ordered.\n"
"\n"
"The final few levels in this world are much easier."
msgstr ""
"Ben fatto.\n"
"\n"
"Un matematico di passaggio ti fa notare che hai appena dimostrato che `‚Ñï` √® ordinato\n"
"totalmente.\n"
"\n"
"Il resto dei livelli di questo mondo sono tutti in discesa."

#: Game.Levels.LessOrEqual.L09succ_le_succ
msgid "succ x ‚â§ succ y ‚Üí x ‚â§ y"
msgstr "succ x ‚â§ succ y ‚Üí x ‚â§ y"

#: Game.Levels.LessOrEqual.L09succ_le_succ
msgid "`succ_le_succ x y` is a proof that if `succ x ‚â§ succ y` then `x ‚â§ y`."
msgstr "`succ_le_succ x y` √® la dimostrazione che se `succ x ‚â§ succ y`, allora `x ‚â§ y`."

#: Game.Levels.LessOrEqual.L09succ_le_succ
msgid ""
"We've proved that `x ‚â§ 0` implies `x = 0`. The last two levels\n"
"in this world will prove which numbers are `‚â§ 1` and `‚â§ 2`.\n"
"This lemma will be helpful for them."
msgstr ""
"Abbiamo dimostrato che `x ‚â§ 0` implica `x = 0`. Gli ultimi due livelli\n"
"di questo mondo ci mostreranno quali sono i numeri `‚â§ 1` e `‚â§ 2`.\n"
"Questo lemma √® propedeutico alle loro dimostrazioni."

#: Game.Levels.LessOrEqual.L09succ_le_succ
msgid "If $\\operatorname{succ}(x) \\leq \\operatorname{succ}(y)$ then $x \\leq y$."
msgstr "Se $\\operatorname{succ}(x) \\leq \\operatorname{succ}(y)$ allora $x \\leq y$."

#: Game.Levels.LessOrEqual.L09succ_le_succ
msgid ""
"Here's my proof:\n"
"```\n"
"cases hx with d hd\n"
"use d\n"
"rw [succ_add] at hd\n"
"apply succ_inj at hd\n"
"exact hd\n"
"```"
msgstr ""
"Ecco la mia dimostrazione:\n"
"```\n"
"cases hx with d hd\n"
"use d\n"
"rw [succ_add] at hd\n"
"apply succ_inj at hd\n"
"exact hd\n"
"```"

#: Game.Levels.LessOrEqual.L10le_one
msgid "x ‚â§ 1"
msgstr "x ‚â§ 1"

#: Game.Levels.LessOrEqual.L10le_one
msgid "`le_one x` is a proof that if `x ‚â§ 1` then `x = 0` or `x = 1`."
msgstr "`le_one x` √® la dimostrazione che se `x ‚â§ 1` allora `x = 0` or `x = 1`."

#: Game.Levels.LessOrEqual.L10le_one
msgid ""
"We've seen `le_zero`, the proof that if `x ‚â§ 0` then `x = 0`.\n"
"Now we'll prove that if `x ‚â§ 1` then `x = 0` or `x = 1`."
msgstr ""
"Abbiamo gi√† visto `le_zero`, la prova di `x ‚â§ 0` implica `x = 0`.\n"
"Adesso dimostreremo che `x ‚â§ 1` implica `x = 0` o `x = 1`."

#: Game.Levels.LessOrEqual.L10le_one
msgid "If $x \\leq 1$ then either $x = 0$ or $x = 1$."
msgstr "Se $x \\leq 1$ allora vale $x = 0$ oppure $x = 1$."

#: Game.Levels.LessOrEqual.L10le_one
msgid ""
"Here's my proof:\n"
"```\n"
"cases x with y\n"
"left\n"
"rfl\n"
"rw [one_eq_succ_zero] at hx ‚ä¢\n"
"apply succ_le_succ at hx\n"
"apply le_zero at hx\n"
"rw [hx]\n"
"right\n"
"rfl\n"
"```\n"
"\n"
"If you solved this level then you should be fine with the next level!"
msgstr ""
"Ecco la mia dimostrazione:\n"
"```\n"
"cases x with y\n"
"left\n"
"rfl\n"
"rw [one_eq_succ_zero] at hx ‚ä¢\n"
"apply succ_le_succ at hx\n"
"apply le_zero at hx\n"
"rw [hx]\n"
"right\n"
"rfl\n"
"```\n"
"\n"
"Se hai risolto questo livello allora puoi risolvere tranquillamente anche il successivo!"

#: Game.Levels.LessOrEqual.L11le_two
msgid "le_two"
msgstr "le_two"

#: Game.Levels.LessOrEqual.L11le_two
msgid "`le_two x` is a proof that if `x ‚â§ 2` then `x = 0` or `x = 1` or `x = 2`."
msgstr "`le_two x` √® la dimostrazione che se `x ‚â§ 2` allora `x = 0` o `x = 1` or `x = 2`."

#: Game.Levels.LessOrEqual.L11le_two
msgid ""
"We'll need this lemma to prove that two is prime!\n"
"\n"
"You'll need to know that `‚à®` is right associative. This means that\n"
"`x = 0 ‚à® x = 1 ‚à® x = 2` actually means `x = 0 ‚à® (x = 1 ‚à® x = 2)`.\n"
"This affects how `left` and `right` work."
msgstr ""
"Questo lemma ci aiuter√† a dimostrare che due √® un numero primo!\n"
"\n"
"Qui ti serve sapere che `‚à®` associa a destra. Significa che\n"
"`x = 0 ‚à® x = 1 ‚à® x = 2` sta in realt√† per `x = 0 ‚à® (x = 1 ‚à® x = 2)`.\n"
"L'associativit√† influisce sul comportamento di `left` e `right`."

#: Game.Levels.LessOrEqual.L11le_two
msgid "If $x \\leq 2$ then $x = 0$ or $1$ or $2$."
msgstr "Se $x \\leq 2$ allora $x = 0$ o $1$ o $2$."

#: Game.Levels.LessOrEqual.L11le_two
msgid ""
"Nice!\n"
"\n"
"The next step in the development of order theory is to develop\n"
"the theory of the interplay between `‚â§` and multiplication.\n"
"If you've already done Multiplication World, you're now ready for\n"
"Advanced Multiplication World. Click on \"Leave World\" to access it."
msgstr ""
"Bene!\n"
"\n"
"Il passo successivo nello sviluppo della teoria degli ordini √® sviluppare\n"
"la teoria dell'interazione tra `‚â§` e la moltiplicazione.\n"
"Se hai gi√† fatto il Mondo Moltiplicazione, sei pronto per ascendere al\n"
"Mondo Moltiplicazione Avanzata. Clicca su \"Abbandona mondo\" per accedervi."

#: Game.Levels.LessOrEqual
msgid "‚â§ World"
msgstr "Mondo ‚â§"

#: Game.Levels.LessOrEqual
msgid ""
"In this world we define `a ‚â§ b` and prove standard facts\n"
"about it, such as \"if `a ‚â§ b` and `b ‚â§ c` then `a ‚â§ c`.\"\n"
"\n"
"The definition of `a ‚â§ b` is \"there exists a number `c`\n"
"such that `b = a + c`. \" So we're going to have to learn\n"
"a tactic to prove \"exists\" theorems, and another one\n"
"to use \"exists\" hypotheses.\n"
"\n"
"Click on \"Start\" to proceed."
msgstr ""
"In questo mondo diamo la definizione `a ‚â§ b` e dimostreremo qualche fatto comune\n"
"sulle diseguaglianze, come \"se ho `a ‚â§ b` e `b ‚â§ c`, allora `a ‚â§ c`\".\n"
"\n"
"La definizione di `a ‚â§ b` √® \"esiste un numero `c`\n"
"tale che `b = a + c`\". Dunque avremo bisogno di imparare una\n"
"tattica che dimostri i teoremi con \"esiste\", e un'altra tattica\n"
"per utilizzare gli \"esiste\" nelle ipotesi.\n"
"\n"
"Premi su \"Via\" per procedere."

#: Game.Levels.AdvMultiplication.L01mul_le_mul_right
msgid "mul_le_mul_right"
msgstr "mul_le_mul_right"

#: Game.Levels.AdvMultiplication.L01mul_le_mul_right
msgid "`mul_le_mul_right a b t` is a proof that `a ‚â§ b ‚Üí a * t ‚â§ b * t`."
msgstr "`mul_le_mul_right a b t` √® la dimostrazione che `a ‚â§ b ‚Üí a * t ‚â§ b * t`."

#: Game.Levels.AdvMultiplication.L01mul_le_mul_right
msgid "Let's warm up with an easy one, which works even if `t = 0`."
msgstr "Riscaldiamoci le dita con un teorema facile, che vale anche per `t = 0`."

#: Game.Levels.AdvMultiplication.L01mul_le_mul_right
msgid ""
"My proof:\n"
"```\n"
"cases h with d hd\n"
"use d * t\n"
"rw [hd, add_mul]\n"
"rfl\n"
"```"
msgstr ""
"La mia dimostrazione:\n"
"```\n"
"cases h with d hd\n"
"use d * t\n"
"rw [hd, add_mul]\n"
"rfl\n"
"```"

#: Game.Levels.AdvMultiplication.L02mul_left_ne_zero
msgid "mul_left_ne_zero"
msgstr "mul_left_ne_zero"

#: Game.Levels.AdvMultiplication.L02mul_left_ne_zero
msgid "`mul_left_ne_zero a b` is a proof that `a * b ‚â† 0 ‚Üí b ‚â† 0`."
msgstr "`mul_left_ne_zero a b` √® la dimostrazione che `a * b ‚â† 0 ‚Üí b ‚â† 0`."

#: Game.Levels.AdvMultiplication.L02mul_left_ne_zero
msgid ""
"If you have completed Algorithm World then you can use the `contrapose!` tactic\n"
"here. If not then I'll talk you through a manual approach."
msgstr ""
"Se hai gi√† completato il Mondo Algoritmi puoi usare la tattica `contrapose!`\n"
"qui. Altrimenti ti far√≤ vedere un approccio manuale."

#: Game.Levels.AdvMultiplication.L02mul_left_ne_zero
msgid ""
"We want to reduce this to a hypothesis `b = 0` and a goal `a * b = 0`,\n"
"which is logically equivalent but much easier to prove. Remember that `X ‚â† 0`\n"
"is notation for `X = 0 ‚Üí False`. Click on `Show more help!` if you need hints."
msgstr ""
"Vogliamo ridurre questo teorema a un'ipotesi `b = 0` e a un goal `a * b = 0`,\n"
"che insieme sono logicamente equivalenti all'originale ma pi√π facili da dimostrare. Ricorda che `X ‚â† 0`\n"
"√® zucchero sintattico per `X = 0 ‚Üí False`. Clicca su `Aiutami!` se hai bisogno di un indizio."

#: Game.Levels.AdvMultiplication.L02mul_left_ne_zero
msgid "Start with `intro hb`."
msgstr "Inizia con `intro hb`."

#: Game.Levels.AdvMultiplication.L02mul_left_ne_zero
msgid "Now `apply h` and you can probably take it from here."
msgstr "Ora fai `apply h` e credo che puoi proseguire da solo."

#: Game.Levels.AdvMultiplication.L03eq_succ_of_ne_zero
msgid "eq_succ_of_ne_zero"
msgstr "eq_succ_of_ne_zero"

#: Game.Levels.AdvMultiplication.L03eq_succ_of_ne_zero
msgid ""
"# Summary\n"
"\n"
"The `tauto` tactic will solve any goal which can be solved purely by logic (that is, by\n"
"truth tables).\n"
"\n"
"## Example\n"
"\n"
"If you have `False` as a hypothesis, then `tauto` will solve\n"
"the goal. This is because a false hypothesis implies any hypothesis.\n"
"\n"
"## Example\n"
"\n"
"If your goal is `True`, then `tauto` will solve the goal.\n"
"\n"
"## Example\n"
"\n"
"If you have two hypotheses `h1 : a = 37` and `h2 : a ‚â† 37` then `tauto` will\n"
"solve the goal because it can prove `False` from your hypotheses, and thus\n"
"prove the goal (as `False` implies anything).\n"
"\n"
"## Example\n"
"\n"
"If you have one hypothesis `h : a ‚â† a` then `tauto` will solve the goal because\n"
"`tauto` is smart enough to know that `a = a` is true, which gives the contradiction we seek.\n"
"\n"
"## Example\n"
"\n"
"If you have a hypothesis of the form `a = 0 ‚Üí a * b = 0` and your goal is `a * b ‚â† 0 ‚Üí a ‚â† 0`, then\n"
"`tauto` will solve the goal, because the goal is logically equivalent to the hypothesis.\n"
"If you switch the goal and hypothesis in this example, `tauto` would solve it too."
msgstr ""
"# Descrizione\n"
"\n"
"La tattica `tauto` risolver√† qualsiasi goal che pu√≤ essere tramite puro ragionamento logico (ossia, tramite le\n"
"tavole di verit√†).\n"
"\n"
"## Esempio\n"
"\n"
"Se hai `False` come ipotesi, allora `tauto` risolver√†\n"
"il goal. Questo perch√© un'ipotesi false implica qualsiasi cosa.\n"
"\n"
"## Esempio\n"
"\n"
"Se hai il goal `True`, allora `tauto` risolver√† il goal.\n"
"\n"
"## Esempio\n"
"\n"
"Se hai due ipotesi `h1 : a = 37` e `h2 : a ‚â† 37` allora `tauto` risolver√†\n"
"solve il goal perch√© pu√≤ dedurre `False` dalle tue ipotesi, e quindi\n"
"dimostrare il goal (dato che `False` implica qualsiasi cosa).\n"
"\n"
"## Esempio\n"
"\n"
"Se hai un'ipotesi `h : a ‚â† a` allora `tauto` risolver√† il goal perch√©\n"
"√® abbastanza intelligente da capire che `a = a` √® vero, arrivando alla contraddizione che cerchiamo.\n"
"\n"
"## Esempio\n"
"\n"
"Se hai un'ipotesi della forma `a = 0 ‚Üí a * b = 0` e hai il goal `a * b ‚â† 0 ‚Üí a ‚â† 0`, allora\n"
"`tauto` risolver√† il goal, because esso √® logicamente equivalente all'ipotesi.\n"
"E se scambi il ruolo del goal e dell'ipotesi in questo esempio, `tauto` lo risolverebbe lo stesso."

#: Game.Levels.AdvMultiplication.L03eq_succ_of_ne_zero
msgid "`eq_succ_of_ne_zero a` is a proof that `a ‚â† 0 ‚Üí ‚àÉ n, a = succ n`."
msgstr "`eq_succ_of_ne_zero a` √® la dimostrazione che `a ‚â† 0 ‚Üí ‚àÉ n, a = succ n`."

#: Game.Levels.AdvMultiplication.L03eq_succ_of_ne_zero
msgid ""
"Multiplication usually makes a number bigger, but multiplication by zero can make\n"
"it smaller. Thus many lemmas about inequalities and multiplication need the\n"
"hypothesis `a ‚â† 0`. Here is a key lemma enables us to use this hypothesis.\n"
"To help us with the proof, we can use the `tauto` tactic. Click on the tactic's name\n"
"on the right to see what it does."
msgstr ""
"La moltiplicazione di norma fa crescere un numero, ma moltiplicare per zero lo rende\n"
"pi√π piccolo, o meglio, lo azzera. Ecco perch√© gran parte dei teoremi che mischiano le disuguaglianze con la moltiplicazione hanno\n"
"l'ipotesi `a ‚â† 0`. Questo livello √® un lemma chiave che ci permette di mettere a frutto questa ipotesi.\n"
"Per aiutarci nella dimostrazione, possiamo usare la tattica `tauto`. Clicca sul nome della tattica\n"
"sulla destra per una descrizione dettagliata su cosa fa."

#: Game.Levels.AdvMultiplication.L03eq_succ_of_ne_zero
msgid "Start with `cases a with d` to do a case split on `a = 0` and `a = succ d`."
msgstr "Inizia con `cases a with d` per spezzare il numero nei casi `a = 0` e `a = succ d`."

#: Game.Levels.AdvMultiplication.L03eq_succ_of_ne_zero
msgid ""
"In the \"base case\" we have a hypothesis `ha : 0 ‚â† 0`, and you can deduce anything\n"
"from a false statement. The `tauto` tactic will close this goal."
msgstr ""
"Nel \"caso base\" abbiamo un'ipotesi `ha : 0 ‚â† 0`, e sappiamo che puoi dedurre qualsiasi cosa\n"
"da una proposizione falsa. La tattica `tauto` chiuder√† il goal."

#: Game.Levels.AdvMultiplication.L04one_le_of_ne_zero
msgid "one_le_of_ne_zero"
msgstr "one_le_of_ne_zero"

#: Game.Levels.AdvMultiplication.L04one_le_of_ne_zero
msgid "`one_le_of_ne_zero a` is a proof that `a ‚â† 0 ‚Üí 1 ‚â§ a`."
msgstr "`one_le_of_ne_zero a` √® la dimostrazione che `a ‚â† 0 ‚Üí 1 ‚â§ a`."

#: Game.Levels.AdvMultiplication.L04one_le_of_ne_zero
msgid "The previous lemma can be used to prove this one."
msgstr "Il lemma precedente pu√≤ essere usato per dimostrare questo."

#: Game.Levels.AdvMultiplication.L04one_le_of_ne_zero
msgid "Use the previous lemma with `apply eq_succ_of_ne_zero at ha`."
msgstr "Usa il lemma precedente con `apply eq_succ_of_ne_zero at ha`."

#: Game.Levels.AdvMultiplication.L04one_le_of_ne_zero
msgid "Now take apart the existence statement with `cases ha with n hn`."
msgstr "Ora scomponi l'ipotesi esistenziale con `cases ha with n hn`."

#: Game.Levels.AdvMultiplication.L05le_mul_right
msgid "le_mul_right"
msgstr "le_mul_right"

#: Game.Levels.AdvMultiplication.L05le_mul_right
msgid ""
"`le_mul_right a b` is a proof that `a * b ‚â† 0 ‚Üí a ‚â§ a * b`.\n"
"\n"
"It's one way of saying that a divisor of a positive number\n"
"has to be at most that number."
msgstr ""
"`le_mul_right a b` √® la dimostrazione che `a * b ‚â† 0 ‚Üí a ‚â§ a * b`.\n"
"\n"
"√à un modo di dire che un divisore di un numero positivo dev'essere per forza\n"
"al massimo il numero stesso."

#: Game.Levels.AdvMultiplication.L05le_mul_right
msgid ""
"In Prime Number World we will be proving that $2$ is prime.\n"
"To do this, we will have to rule out things like $2 ‚â† 37 √ó 42.$\n"
"We will do this by proving that any factor of $2$ is at most $2$,\n"
"which we will do using this lemma. The proof I have in mind manipulates the hypothesis\n"
"until it becomes the goal, using pretty much everything which we've proved in this world so far."
msgstr ""
"Nel Mondo Numeri Primi dimostreremo che $2$ √® primo.\n"
"Ma per arrivarci, dobbiamo escludere falsit√† del tipo $2 ‚â† 37 √ó 42.$\n"
"Lo faremo mostrando che ogni fattore di $2$ √® al pi√π $2$,\n"
"che avremo gratis grazie a questo lemma. La dimostrazione che ho in mente io manipola l'ipotesi finch√©\n"
"non diventa il goal, usando praticamente tutto ci√≤ che abbiamo dimostrato in questo mondo finora."

#: Game.Levels.AdvMultiplication.L05le_mul_right
msgid ""
"Here's what I was thinking of:\n"
"```\n"
"apply mul_left_ne_zero at h\n"
"apply one_le_of_ne_zero at h\n"
"apply mul_le_mul_right 1 b a at h\n"
"rw [one_mul, mul_comm] at h\n"
"exact h\n"
"```"
msgstr ""
"Ecco quello che avevo in mente:\n"
"```\n"
"apply mul_left_ne_zero at h\n"
"apply one_le_of_ne_zero at h\n"
"apply mul_le_mul_right 1 b a at h\n"
"rw [one_mul, mul_comm] at h\n"
"exact h\n"
"```"

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid "mul_right_eq_one"
msgstr "mul_right_eq_one"

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid ""
"# Summary\n"
"\n"
"The `have` tactic can be used to add new hypotheses to a level, but of course\n"
"you have to prove them.\n"
"\n"
"\n"
"## Example\n"
"\n"
"The simplest usage is like this. If you have `a` in your context and you execute\n"
"\n"
"`have ha : a = 0`\n"
"\n"
"then you will get a new goal `a = 0` to prove, and after you've proved\n"
"it you will have a new hypothesis `ha : a = 0` in your original goal.\n"
"\n"
"## Example\n"
"\n"
"If you already have a proof of what you want to `have`, you\n"
"can just create it immediately. For example, if you have `a` and `b`\n"
"number objects, then\n"
"\n"
"`have h2 : succ a = succ b ‚Üí a = b := succ_inj a b`\n"
"\n"
"will directly add a new hypothesis `h2 : succ a = succ b ‚Üí a = b`\n"
"to the context, because you just supplied the proof of it (`succ_inj a b`).\n"
"\n"
"## Example\n"
"\n"
"If you have a proof to hand, then you don't even need to state what you\n"
"are proving. example\n"
"\n"
"`have h2 := succ_inj a b`\n"
"\n"
"will add `h2 : succ a = succ b ‚Üí a = b` as a hypothesis."
msgstr ""
"# Descrizione\n"
"\n"
"La tattica `have` pu√≤ essere usata per aggiungere un'ipotesi a un livello, ma ovviamente ti chiede\n"
"di dimostrarla.\n"
"\n"
"\n"
"## Esempio\n"
"\n"
"Il suo utilizzo pi√π semplice e cos√¨. Se hai `a` nel contesto e vuoi eseguire\n"
"\n"
"`have ha : a = 0`\n"
"\n"
"allora otterrai un nuovo goal `a = 0` da dimostrare, e dopo che l'hai dimostrato\n"
"avrai l'ipotesi `ha : a = 0` nel contesto originale.\n"
"\n"
"## Esempio\n"
"\n"
"Se hai gi√† pronta la dimostrazione di ci√≤ che vuoi introdurre con `have`,\n"
"puoi farlo in un unico comando. Ad esempio, se hai `a` e `b`\n"
"come numeri, allora\n"
"\n"
"`have h2 : succ a = succ b ‚Üí a = b := succ_inj a b`\n"
"\n"
"aggiunger√† direttamente l'ipotesi `h2 : succ a = succ b ‚Üí a = b`\n"
"al contesto, dato che hai fornito assieme la sua dimostrazione (`succ_inj a b`).\n"
"\n"
"## Esempio\n"
"\n"
"Se hai in mano una dimostrazione, puoi omettere il lemma che vuoi introdurre (quello tra i simboli `:` e `:=`).\n"
"Ad esempio:\n"
"\n"
"`have h2 := succ_inj a b`\n"
"\n"
"aggiunger√† `h2 : succ a = succ b ‚Üí a = b` come ipotesi."

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid "`mul_right_eq_one a b` is a proof that `a * b = 1 ‚Üí a = 1`."
msgstr "`mul_right_eq_one a b` √® la dimostrazione che `a * b = 1 ‚Üí a = 1`."

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid ""
"This level proves `x * y = 1 ‚Üí x = 1`, the multiplicative analogue of Advanced Addition\n"
"World's `x + y = 0 ‚Üí x = 0`. The strategy is to prove that `x ‚â§ 1` and then use the\n"
"lemma `le_one` from `‚â§` world.\n"
"\n"
"We'll prove it using a new and very useful tactic called `have`."
msgstr ""
"Questo livello dimostra `x * y = 1 ‚Üí x = 1`, l'analogo moltiplicativo del lemma `x + y = 0 ‚Üí x = 0`\n"
"incontrato del Mondo Addizione Avanzata. La strategia √® dimostrare prima che `x ‚â§ 1` e poi usare il\n"
"lemma `le_one` del Mondo `‚â§`.\n"
"\n"
"Lo dimostreremo con una nuova tattica assai utile, `have`."

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid ""
"We want to use `le_mul_right`, but we need a hypothesis `x * y ‚â† 0`\n"
"which we don't have. Yet. Execute `have h2 : x * y ‚â† 0` (you can type `‚â†` with `\\ne`).\n"
"You'll be asked to\n"
"prove it, and then you'll have a new hypothesis which you can apply\n"
"`le_mul_right` to."
msgstr ""
"Il piano √® applicare `le_mul_right`, ma per farlo abbiamo bisogno dell'ipotesi `x * y ‚â† 0`\n"
"che non √® presente tra le ipotesi, per ora. Esegui `have h2 : x * y ‚â† 0` (digita `‚â†` tramite `\\ne`).\n"
"Lean ti chieder√† di\n"
"dimostrarlo, e dopo avrai un'ipotesi nuova di zecca a cui puoi applicare\n"
"`le_mul_right`."

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid "Now you can `apply le_mul_right at h2`."
msgstr "Ora puoi eseguire `apply le_mul_right at h2`."

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid "Now `rw [h] at h2` so you can `apply le_one at hx`."
msgstr "Adesso `rw [h] at h2` cos√¨ puoi fare `apply le_one at hx`."

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid ""
"Now `cases h2 with h0 h1` and deal with the two\n"
"cases separately."
msgstr ""
"Ora `cases h2 with h0 h1` e lavora sui due casi\n"
"separatamente."

#: Game.Levels.AdvMultiplication.L06mul_right_eq_one
msgid "`tauto` is good enough to solve this goal."
msgstr "`tauto` √® in grado di risolvere questo goal."

#: Game.Levels.AdvMultiplication.L07mul_ne_zero
msgid "mul_ne_zero"
msgstr "mul_ne_zero"

#: Game.Levels.AdvMultiplication.L07mul_ne_zero
msgid "`mul_ne_zero a b` is a proof that if `a ‚â† 0` and `b ‚â† 0` then `a * b ‚â† 0`."
msgstr "`mul_ne_zero a b` √® la dimostrazione che se `a ‚â† 0` e `b ‚â† 0` allora `a * b ‚â† 0`."

#: Game.Levels.AdvMultiplication.L07mul_ne_zero
msgid ""
"This level proves that if `a ‚â† 0` and `b ‚â† 0` then `a * b ‚â† 0`. One strategy\n"
"is to write both `a` and `b` as `succ` of something, deduce that `a * b` is\n"
"also `succ` of something, and then `apply zero_ne_succ`."
msgstr ""
"Questo livello dimostra che se `a ‚â† 0` e `b ‚â† 0` allora `a * b ‚â† 0`. Una strategia vincente\n"
"√® riscrivere sia `a` che `b` come `succ` di qualcosa, dedurre che `a * b` √® \n"
"anche lui `succ` di qualcosa, e infine fare `apply zero_ne_succ`."

#: Game.Levels.AdvMultiplication.L07mul_ne_zero
msgid "Start with `apply eq_succ_of_ne_zero at ha` and `... at hb`"
msgstr "Inizia con `apply eq_succ_of_ne_zero at ha` e `... at hb`"

#: Game.Levels.AdvMultiplication.L08mul_eq_zero
msgid "mul_eq_zero"
msgstr "mul_eq_zero"

#: Game.Levels.AdvMultiplication.L08mul_eq_zero
msgid "`mul_eq_zero a b` is a proof that if `a * b = 0` then `a = 0` or `b = 0`."
msgstr "`mul_eq_zero a b` √® la dimostrazione che se `a * b = 0` allora `a = 0` or `b = 0`."

#: Game.Levels.AdvMultiplication.L08mul_eq_zero
msgid ""
"This level proves that if `a * b = 0` then `a = 0` or `b = 0`. It is\n"
"logically equivalent to the last level, so there is a very short proof."
msgstr ""
"Questo livello dimostra che se `a * b = 0` allora `a = 0` or `b = 0`. √à\n"
"logicamente equivalente allo scorso livello, quindi puoi dare una dimostrazione veramente corta."

#: Game.Levels.AdvMultiplication.L08mul_eq_zero
msgid "Start with `have h2 := mul_ne_zero a b`."
msgstr "Inizia con `have h2 := mul_ne_zero a b`."

#: Game.Levels.AdvMultiplication.L08mul_eq_zero
msgid ""
"Now the goal can be deduced from `h2` by pure logic, so use the `tauto`\n"
"tactic."
msgstr ""
"Adesso il goal pu√≤ essere dedotto da `h2` tramite pura logica, dunque usa la tattica\n"
"`tauto`."

#: Game.Levels.AdvMultiplication.L09mul_left_cancel
msgid "mul_left_cancel"
msgstr "mul_left_cancel"

#: Game.Levels.AdvMultiplication.L09mul_left_cancel
msgid "`mul_left_cancel a b c` is a proof that if `a ‚â† 0` and `a * b = a * c` then `b = c`."
msgstr "`mul_left_cancel a b c` √® la dimostrazione che se `a ‚â† 0` e `a * b = a * c` allora `b = c`."

#: Game.Levels.AdvMultiplication.L09mul_left_cancel
msgid ""
"In this level we prove that if `a * b = a * c` and `a ‚â† 0` then `b = c`. It is tricky, for\n"
"several reasons. One of these is that\n"
"we need to introduce a new idea: we will need to understand the concept of\n"
"mathematical induction a little better.\n"
"\n"
"Starting with `induction b with d hd` is too naive, because in the inductive step\n"
"the hypothesis is `a * d = a * c ‚Üí d = c` but what we know is `a * succ d = a * c`,\n"
"so the induction hypothesis does not apply!\n"
"\n"
"Assume `a ‚â† 0` is fixed. The actual statement we want to prove by induction on `b` is\n"
"\"for all `c`, if `a * b = a * c` then `b = c`. This *can* be proved by induction,\n"
"because we now have the flexibility to change `c`.\""
msgstr ""
"In questo livello dimostriamo se `a * b = a * c` e `a ‚â† 0` allora `b = c`. √à un p√≤ complicato, per\n"
"diverse ragioni. Una di queste √® che\n"
"abbiamo bisogno di introdurre una nuova idea, approfondendo la nozione di\n"
"induzione matematica.\n"
"\n"
"Sarebbe ingenuo partire con `induction b with d hd`, perch√© nel passo induttivo\n"
"l'ipotesi √® `a * d = a * c ‚Üí d = c` ma quello che sappiamo √® solo che `a * succ d = a * c`,\n"
"dunque non possiamo applicare l'ipotesi ipotesi induttiva!\n"
"\n"
"Supponiamo di fissare la variabile `a ‚â† 0`. Il vero enunciato che vogliamo dimostrare per induzione su `b` √®\n"
"\"per tutte le `c`, se `a * b = a * c` allora `b = c`\". Questo *pu√≤* essere dimostrato per induzione,\n"
"perch√© abbiamo permesso alla `c` di variare."

#: Game.Levels.AdvMultiplication.L09mul_left_cancel
msgid "The way to start this proof is `induction b with d hd generalizing c`."
msgstr "Il modo giusto di aprire questa dimostrazione √® `induction b with d hd generalizing c`."

#: Game.Levels.AdvMultiplication.L09mul_left_cancel
msgid ""
"Use `mul_eq_zero` and remember that `tauto` will solve a goal\n"
"if there are hypotheses `a = 0` and `a ‚â† 0`."
msgstr ""
"Usa `mul_eq_zero` e ricorda che `tauto` risolve qualsiasi goal\n"
"se hai le ipotesi contraddittorie `a = 0` e `a ‚â† 0`."

#: Game.Levels.AdvMultiplication.L09mul_left_cancel
msgid ""
"The inductive hypothesis `hd` is \"For all natural numbers `c`, `a * d = a * c ‚Üí d = c`\".\n"
"You can `apply` it `at` any hypothesis of the form `a * d = a * ?`."
msgstr ""
"L'ipotesi induttiva `hd` √® \"Per tutti i numeri naturali `c`, `a * d = a * c ‚Üí d = c`\".\n"
"Puoi sfruttarla con `apply` e `at` su un'ipotesi della forma `a * d = a * ?`."

#: Game.Levels.AdvMultiplication.L09mul_left_cancel
msgid "Split into cases `c = 0` and `c = succ e` with `cases c with e`."
msgstr "Suddividi la dimostrazione nei casi `c = 0` e `c = succ e` con `cases c with e`."

#: Game.Levels.AdvMultiplication.L10mul_right_eq_self
msgid "mul_right_eq_self"
msgstr "mul_right_eq_self"

#: Game.Levels.AdvMultiplication.L10mul_right_eq_self
msgid "`mul_right_eq_self a b` is a proof that if `a ‚â† 0` and `a * b = a` then `b = 1`."
msgstr "`mul_right_eq_self a b` √® la dimostrazione che se `a ‚â† 0` e `a * b = a` allora `b = 1`."

#: Game.Levels.AdvMultiplication.L10mul_right_eq_self
msgid ""
"The lemma proved in the final level of this world will be helpful\n"
"in Divisibility World."
msgstr ""
"Il lemma dimostrato nel livello finale di questo mondo ci sar√† d'aiuto\n"
"nel Mondo Divisibilit√†."

#: Game.Levels.AdvMultiplication.L10mul_right_eq_self
msgid "Reduce to the previous lemma with `nth_rewrite 2 [‚Üê mul_one a] at h`"
msgstr "Riduci al lemma precedente con `nth_rewrite 2 [‚Üê mul_one a] at h`"

#: Game.Levels.AdvMultiplication.L10mul_right_eq_self
msgid "You can now `apply mul_left_cancel at h`"
msgstr "Ora puoi fare `apply mul_left_cancel at h`"

#: Game.Levels.AdvMultiplication.L10mul_right_eq_self
msgid ""
"A two-line proof is\n"
"\n"
"```\n"
"nth_rewrite 2 [‚Üê mul_one a] at h\n"
"exact mul_left_cancel a b 1 ha h\n"
"```\n"
"\n"
"We now have all the tools necessary to set up the basic theory of divisibility of naturals."
msgstr ""
"Una dimostrazione di due righe √® la seguente\n"
"\n"
"```\n"
"nth_rewrite 2 [‚Üê mul_one a] at h\n"
"exact mul_left_cancel a b 1 ha h\n"
"```\n"
"\n"
"Ora abbiamo tutti gli strumenti necessari per costruire la teoria basilare della divisibilit√† dei numeri naturali."

#: Game.Levels.AdvMultiplication
msgid "Advanced Multiplication World"
msgstr "Mondo Moltiplicazione Avanzata"

#: Game.Levels.AdvMultiplication
msgid ""
"Advanced *Addition* World proved various implications\n"
"involving addition, such as `x + y = 0 ‚Üí x = 0` and `x + y = x ‚Üí y = 0`.\n"
"These lemmas were used to prove basic facts about ‚â§ in ‚â§ World.\n"
"\n"
"In Advanced Multiplication World we prove analogous\n"
"facts about multiplication, such as `x * y = 1 ‚Üí x = 1`, and\n"
"`x * y = x ‚Üí y = 1` (assuming `x ‚â† 0` in the latter result). This will prepare\n"
"us for Divisibility World.\n"
"\n"
"Multiplication World is more complex than Addition World. In the same\n"
"way, Advanced Multiplication world is more complex than Advanced Addition\n"
"World. One reason for this is that certain intermediate results are only\n"
"true under the additional hypothesis that one of the variables is non-zero.\n"
"This causes some unexpected extra twists."
msgstr ""
"Nel Mondo *Addizione* Avanzata abbiamo dimostrato varie implicazioni\n"
"sull'addizione, ad esempio `x + y = 0 ‚Üí x = 0` e `x + y = x ‚Üí y = 0`.\n"
"In seguito abbiamo usato questi lemmi per dimostrare fatti basilari su ‚â§ nel Mondo ‚â§.\n"
"\n"
"Nel Mondo Moltiplicazione Avanzata dimostreremo dei fatti\n"
"analoghi sulla moltiplicazione, ad esempio `x * y = 1 ‚Üí x = 1`, e\n"
"`x * y = x ‚Üí y = 1` (assumendo che `x ‚â† 0` nel secondo enunciato). Questi saranno propedeutici\n"
"per il Mondo Divisibilit√†.\n"
"\n"
"Il Mondo Moltiplicazione √® pi√π complesso del Mondo Addizione. Allo stesso modo,\n"
"il Mondo Moltiplicazione Avanzata √® pi√π complesso del Mondo Addizione Avanzata.\n"
"La maggiore complessit√† di questo mondo √® dovuta al fatto che certi teoremi valgono a condizione che una delle variabili non possa assumere il valore zero (sia non-nulla).\n"
"Questo ulteriore vincolo ha dei risvolti inaspettati."

#: Game
msgid "Natural Number Game"
msgstr "Il Gioco dei Numeri Naturali"

#: Game
msgid ""
"# Welcome to the Natural Number Game\n"
"#### An introduction to mathematical proof.\n"
"\n"
"In this game, we will build the basic theory of the natural\n"
"numbers `{0,1,2,3,4,...}` from scratch. Our first goal is to prove\n"
"that `2 + 2 = 4`. Next we'll prove that `x + y = y + x`.\n"
"And at the end we'll see if we can prove Fermat's Last Theorem.\n"
"We'll do this by solving levels of a computer puzzle game called Lean.\n"
"\n"
"# Read this.\n"
"\n"
"Learning how to use an interactive theorem prover takes time.\n"
"Tests show that the people who get the most out of this game are\n"
"those who read the help texts like this one.\n"
"\n"
"To start, click on \"Tutorial World\".\n"
"\n"
"Note: this is a new Lean 4 version of the game containing several\n"
"worlds which were not present in the old Lean 3 version. A new version\n"
"of Advanced Multiplication World is in preparation, and worlds\n"
"such as Prime Number World and more will be appearing during October and\n"
"November 2023.\n"
"\n"
"## More\n"
"\n"
"Click on the three lines in the top right and select \"Game Info\" for resources,\n"
"links, and ways to interact with the Lean community."
msgstr ""
"# Benvenuto nel Gioco dei Numeri Naturali!\n"
"#### Un'introduzione alla dimostrazione matematica.\n"
"\n"
"In questo gioco costruiremo la teoria elementare dei numeri naturali\n"
"`{0,1,2,3,4,...}` a partire da zero. Il nostro primo obiettivo √® dimostrare\n"
"`2 + 2 = 4`. Dopodich√© dimostreremo `x + y = y + x`.\n"
"Infine cercheremo di dimostrare l'Ultimo Teorema di Fermat.\n"
"Risolveremo questi puzzle matematici in un ambiente interattivo chiamato Lean.\n"
"\n"
"# Leggi le istruzioni!\n"
"\n"
"Imparare a usare un *interactive theorem prover* richiede tempo e impegno.\n"
"Le statistiche mostrano che le persone che imparano di pi√π da questo gioco sono\n"
"coloro che leggono attentamente il testo delle istruzioni, come questo.\n"
"\n"
"Per iniziare, clicca su \"Mondo Tutorial\".\n"
"\n"
"Nota: questa √® la versione del gioco per Lean 4 contenente diversi\n"
"mondi che non erano presenti nella versione per Lean 3. Stiamo lavorando a una\n"
"nuova versione del Mondo Moltiplicazione Avanzata e nuovi mondi\n"
"tra cui Mondo Numeri Primi arriveranno durante Ottobre e\n"
"Novembre 2023.\n"
"\n"
"## Altro\n"
"\n"
"Clicca sulle tree lineette in alto a destra e seleziona \"Game Info\" per risorse,\n"
"link utili e vari modi per connetterti alla comunit√† di Lean."

#: Game
msgid ""
"*Game version: 4.2*\n"
"\n"
"*Recent additions: Inequality world, algorithm world*\n"
"\n"
"## Progress saving\n"
"\n"
"The game stores your progress in your local browser storage.\n"
"If you delete it, your progress will be lost!\n"
"\n"
"Warning: In most browsers, deleting cookies will also clear the local storage\n"
"(or \"local site data\"). Make sure to download your game progress first!\n"
"\n"
"## Credits\n"
"\n"
"* **Creators:** Kevin Buzzard, Jon Eugster\n"
"* **Original Lean3-version:** Kevin Buzzard, Mohammad Pedramfar\n"
"* **Game Engine:** Alexander Bentkamp, Jon Eugster, Patrick Massot\n"
"* **Additional levels:** Sian Carey, Ivan Farabella, Archie Browne.\n"
"* **Additional thanks:** All the student beta testers, all the schools\n"
"who invited Kevin to speak, and all the schoolkids who asked him questions\n"
"about the material.\n"
"\n"
"## Resources\n"
"\n"
"* The [Lean Zulip chat](https://leanprover.zulipchat.com/) forum\n"
"* [Original Lean3 version](https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/) (no longer maintained)\n"
"\n"
"## Problems?\n"
"\n"
"Please ask any questions about this game in the\n"
"[Lean Zulip chat](https://leanprover.zulipchat.com/) forum, for example in\n"
"the stream \"New Members\". The community will happily help. Note that\n"
"the Lean Zulip chat is a professional research forum.\n"
"Please use your full real name there, stay on topic, and be nice. If you're\n"
"looking for somewhere less formal (e.g. you want to post natural number\n"
"game memes) then head on over to the [Lean Discord](https://discord.gg/WZ9bs9UCvx).\n"
"\n"
"Alternatively, if you experience issues / bugs you can also open github issues:\n"
"\n"
"* For issues with the game engine, please open an\n"
"[issue at the lean4game](https://github.com/leanprover-community/lean4game/issues) repo.\n"
"* For issues about the game's content, please open an\n"
"[issue at the NNG](https://github.com/hhu-adam/NNG4/issues) repo."
msgstr ""
"*Versione del gioco: 4.2*\n"
"\n"
"*Aggiunti di recente: Mondo Disequazioni, Mondo Algoritmi*\n"
"\n"
"## Salvataggio del gioco\n"
"\n"
"Il gioco salva il tuo progresso nella memoria locale del browser.\n"
"Se cancelli la memoria, perderai anche i dati del gioco! (le tue preziose dimostrazioni!)\n"
"\n"
"Attenzione: nella maggior parte dei browser, cancellare i cookies cancella anche la memoria di un sito\n"
"(o \"i dati locali del sito\"). In ogni caso, assicurati di esportare il tuo progresso del gioco!\n"
"\n"
"## Riconoscimenti\n"
"\n"
"* **Autori:** Kevin Buzzard, Jon Eugster\n"
"* **Versione originale per Lean3:** Kevin Buzzard, Mohammad Pedramfar\n"
"* **Game Engine:** Alexander Bentkamp, Jon Eugster, Patrick Massot\n"
"* **Livelli extra:** Sian Carey, Ivan Farabella, Archie Browne.\n"
"* **Traduzione italiana**: Federico Dal Pio Luogo\n"
"* **Grazie anche a:** Gli studenti che si sono offerti come beta testers, tutte le scuole\n"
"che hanno invitato Kevin a parlare, e gli studenti che gli hanno fatto domande\n"
"sul materiale.\n"
"\n"
"## Risorse\n"
"\n"
"* La [chat di Lean su Zulip](https://leanprover.zulipchat.com/)\n"
"* Il [gioco originale per Lean3](https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/) (no longer maintained)\n"
"\n"
"## Problemi?\n"
"\n"
"Rivolgi le tue domande sul gioco nella\n"
"[chat di Lean su Zulip](https://leanprover.zulipchat.com/), utilizzando\n"
"lo stream \"New Members\". I membri della comunit√† sono felici di aiutare. Nota che\n"
"la chat di Lean su Zulip √® un forum professionale di ricerca.\n"
"Perci√≤ usa il tuo nome reale e per intero, rimani in tema, e sii cortese. Se cerchi\n"
"un forum pi√π informale (dove puoi ad esempio postare\n"
"i meme sui numeri naturali) allora il [server Discord di Lean](https://discord.gg/WZ9bs9UCvx) fa per te.\n"
"\n"
"In alternativa, se il gioco funziona male o dovessi trovare un bug puoi aprire una issue su github:\n"
"\n"
"* Per problemi relativi al game engine, apri una\n"
"[issue sul repo lean4game](https://github.com/leanprover-community/lean4game/issues).\n"
"* Per problemi relativi ai contenuti del the gioco, apri una\n"
"[issue sul repo NNG](https://github.com/hhu-adam/NNG4/issues)."

#: Game
msgid "The classical introduction game for Lean."
msgstr "Il classico gioco introduttivo per Lean."

#: Game
msgid ""
"In this game you recreate the natural numbers $\\mathbb{N}$ from the Peano axioms,\n"
"learning the basics about theorem proving in Lean.\n"
"\n"
"This is a good first introduction to Lean!"
msgstr ""
"In questo gioco ricreerai l'insieme dei numeri naturali $\\mathbb{N}$ partendo dagli assiomi di Peano,\n"
"e lungo il percorso imparerai le basi del *theorem proving* su Lean.\n"
"\n"
"Questo gioco √® un'ottima introduzione a Lean!"
